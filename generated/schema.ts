// @ts-nocheck
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type Scalars = {
    ID: string,
    DateTime: any,
    String: string,
    Float: number,
    Boolean: boolean,
    TimelessDate: any,
    JSONObject: any,
    JSON: any,
    Int: number,
    DateTimeOrDuration: any,
    TimelessDateOrDuration: any,
    Duration: any,
    UUID: any,
}


/** A customer notification subscription. */
export interface CustomerNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer subscribed to. */
    customer: Customer
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'CustomerNotificationSubscription'
}


/** Notification subscriptions for models. */
export type NotificationSubscription = (CustomerNotificationSubscription | CustomViewNotificationSubscription | CycleNotificationSubscription | LabelNotificationSubscription | ProjectNotificationSubscription | InitiativeNotificationSubscription | TeamNotificationSubscription | UserNotificationSubscription) & { __isUnion?: true }


/** A basic entity. */
export type Entity = (CustomerNotificationSubscription | CustomViewNotificationSubscription | CycleNotificationSubscription | LabelNotificationSubscription | ProjectNotificationSubscription | InitiativeNotificationSubscription | TeamNotificationSubscription | UserNotificationSubscription | IssueNotification | ProjectNotification | InitiativeNotification | OauthClientApprovalNotification | DocumentNotification | PostNotification | CustomerNeedNotification | PullRequestNotification) & { __isUnion?: true }

export type Node = (CustomerNotificationSubscription | User | Organization | Facet | Team | WorkflowState | Issue | DocumentContent | Project | ProjectStatus | Template | ProjectUpdate | Reaction | Comment | InitiativeUpdate | Initiative | EntityExternalLink | IntegrationsSettings | InitiativeHistory | Post | ExternalUser | Favorite | Cycle | CustomView | ViewPreferences | Document | Roadmap | IssueLabel | ProjectLabel | Customer | CustomerStatus | CustomerTier | Integration | Dashboard | ProjectMilestone | ProjectHistory | ProjectRelation | CustomerNeed | Attachment | ProjectAttachment | Meeting | IssueHistory | IssueImport | IssueRelation | IssueSuggestion | TriageResponsibility | TimeSchedule | TeamMembership | GitAutomationState | GitAutomationTargetBranch | Webhook | PaidSubscription | IssueDraft | Draft | CustomViewNotificationSubscription | CycleNotificationSubscription | LabelNotificationSubscription | ProjectNotificationSubscription | InitiativeNotificationSubscription | TeamNotificationSubscription | UserNotificationSubscription | IssueNotification | ProjectNotification | InitiativeNotification | OauthClientApprovalNotification | OauthClientApproval | DocumentNotification | PostNotification | CustomerNeedNotification | PullRequestNotification | PullRequest | UserSettings | SemanticSearchResult | DocumentSearchResult | ProjectSearchResult | IssueSearchResult | RoadmapToProject | OrganizationInvite | IntegrationTemplate | InitiativeToProject | InitiativeRelation | Emoji | AuditEntry | ApiKey | AgentContext | AgentActivity | PushSubscription | OrganizationDomain | EmailIntakeAddress) & { __isUnion?: true }


/** A user that has access to the the resources of an organization. */
export interface User {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user's full name. */
    name: Scalars['String']
    /** The user's display (nick) name. Unique within each organization. */
    displayName: Scalars['String']
    /** The user's email address. */
    email: Scalars['String']
    /** An URL to the user's avatar image. */
    avatarUrl: (Scalars['String'] | null)
    /** Reason why is the account disabled. */
    disableReason: (Scalars['String'] | null)
    /** [DEPRECATED] Hash for the user to be used in calendar URLs. */
    calendarHash: (Scalars['String'] | null)
    /** A short description of the user, either its title or bio. */
    description: (Scalars['String'] | null)
    /** The emoji to represent the user current status. */
    statusEmoji: (Scalars['String'] | null)
    /** The label of the user current status. */
    statusLabel: (Scalars['String'] | null)
    /** A date at which the user current status should be cleared. */
    statusUntilAt: (Scalars['DateTime'] | null)
    /** The local timezone of the user. */
    timezone: (Scalars['String'] | null)
    /** Organization the user belongs to. */
    organization: Organization
    /** The last time the user was seen online. */
    lastSeen: (Scalars['DateTime'] | null)
    /** The initials of the user. */
    initials: Scalars['String']
    /** The background color of the avatar for users without set avatar. */
    avatarBackgroundColor: Scalars['String']
    /** Whether the user is a guest in the workspace and limited to accessing a subset of teams. */
    guest: Scalars['Boolean']
    /** Whether the user is an app. */
    app: Scalars['Boolean']
    /** Whether the user account is active or disabled (suspended). */
    active: Scalars['Boolean']
    /** The user's issue drafts */
    issueDrafts: IssueDraftConnection
    /** The user's drafts */
    drafts: DraftConnection
    /** User's profile URL. */
    url: Scalars['String']
    /** Issues assigned to the user. */
    assignedIssues: IssueConnection
    /** Issues delegated to an agent by the user. */
    supervisedIssues: IssueConnection
    /** Issues created by the user. */
    createdIssues: IssueConnection
    /** Number of issues created. */
    createdIssueCount: Scalars['Int']
    /** Teams the user is part of. */
    teams: TeamConnection
    /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
    teamMemberships: TeamMembershipConnection
    /** Whether the user is the currently authenticated user. */
    isMe: Scalars['Boolean']
    /** Whether the user is an organization administrator. */
    admin: Scalars['Boolean']
    /**
     * @deprecated This hash is not in use anymore, this value will always be empty.
     * [DEPRECATED] Unique hash for the user to be used in invite URLs.
     */
    inviteHash: Scalars['String']
    /** The user's GitHub user ID. */
    gitHubUserId: (Scalars['String'] | null)
    __typename: 'User'
}


/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export interface Organization {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The organization's name. */
    name: Scalars['String']
    /** The organization's unique URL key. */
    urlKey: Scalars['String']
    /** The organization's logo URL. */
    logoUrl: (Scalars['String'] | null)
    /** Rolling 30-day total upload volume for the organization, in megabytes. */
    periodUploadVolume: Scalars['Float']
    /** [Internal] Facets associated with the organization. */
    facets: Facet[]
    /** How git branches are formatted. If null, default formatting will be used. */
    gitBranchFormat: (Scalars['String'] | null)
    /** Whether the Git integration linkback messages should be sent to private repositories. */
    gitLinkbackMessagesEnabled: Scalars['Boolean']
    /** Whether the Git integration linkback messages should be sent to public repositories. */
    gitPublicLinkbackMessagesEnabled: Scalars['Boolean']
    /** Whether the organization is using a roadmap. */
    roadmapEnabled: Scalars['Boolean']
    /** The n-weekly frequency at which to prompt for project updates. When not set, reminders are off. */
    projectUpdateReminderFrequencyInWeeks: (Scalars['Float'] | null)
    /** The day at which to prompt for project updates. */
    projectUpdateRemindersDay: Day
    /** The hour at which to prompt for project updates. */
    projectUpdateRemindersHour: Scalars['Float']
    /** The n-weekly frequency at which to prompt for initiative updates. When not set, reminders are off. */
    initiativeUpdateReminderFrequencyInWeeks: (Scalars['Float'] | null)
    /** The day at which to prompt for initiative updates. */
    initiativeUpdateRemindersDay: Day
    /** The hour at which to prompt for initiative updates. */
    initiativeUpdateRemindersHour: Scalars['Float']
    /** The month at which the fiscal year starts. Defaults to January (0). */
    fiscalYearStartMonth: Scalars['Float']
    /** [Internal] The list of working days. Sunday is 0, Monday is 1, etc. */
    workingDays: Scalars['Float'][]
    /** Whether SAML authentication is enabled for organization. */
    samlEnabled: Scalars['Boolean']
    /** [INTERNAL] SAML settings. */
    samlSettings: (Scalars['JSONObject'] | null)
    /** Whether SCIM provisioning is enabled for organization. */
    scimEnabled: Scalars['Boolean']
    /** [INTERNAL] SCIM settings. */
    scimSettings: (Scalars['JSONObject'] | null)
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices: Scalars['String'][]
    /** IP restriction configurations. */
    ipRestrictions: (OrganizationIpRestriction[] | null)
    /** The time at which deletion of the organization was requested. */
    deletionRequestedAt: (Scalars['DateTime'] | null)
    /** The time at which the trial will end. */
    trialEndsAt: (Scalars['DateTime'] | null)
    /** Previously used URL keys for the organization (last 3 are kept and redirected). */
    previousUrlKeys: Scalars['String'][]
    /** Whether member users are allowed to send invites. */
    allowMembersToInvite: (Scalars['Boolean'] | null)
    /** Whether team creation is restricted to admins. */
    restrictTeamCreationToAdmins: (Scalars['Boolean'] | null)
    /** Whether workspace label creation, update, and deletion is restricted to admins. */
    restrictLabelManagementToAdmins: (Scalars['Boolean'] | null)
    /** [ALPHA] Theme settings for the organization. */
    themeSettings: (Scalars['JSONObject'] | null)
    /** The feature release channel the organization belongs to. */
    releaseChannel: ReleaseChannel
    /** Configuration settings for the Customers feature. */
    customersConfiguration: Scalars['JSONObject']
    /** Default schedule for how often feed summaries are generated. */
    defaultFeedSummarySchedule: (FeedSummarySchedule | null)
    /** Whether the organization has enabled the feed feature. */
    feedEnabled: Scalars['Boolean']
    /** [INTERNAL] Whether the organization has enabled the AI add-on. */
    aiAddonEnabled: Scalars['Boolean']
    /**
     * @deprecated No longer in use
     * [DEPRECATED] Which day count to use for SLA calculations.
     */
    slaDayCount: SLADayCountType
    /**
     * @deprecated Use organization.projectUpdatesReminderFrequencyInWeeks instead
     * [DEPRECATED] The frequency at which to prompt for project updates.
     */
    projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency
    /** Users associated with the organization. */
    users: UserConnection
    /** Teams associated with the organization. */
    teams: TeamConnection
    /** The organization's project statuses. */
    projectStatuses: ProjectStatus[]
    /** Integrations associated with the organization. */
    integrations: IntegrationConnection
    /** The organization's subscription to a paid plan. */
    subscription: (PaidSubscription | null)
    /** Number of active users in the organization. */
    userCount: Scalars['Int']
    /** Number of issues in the organization. */
    createdIssueCount: Scalars['Int']
    /** Templates associated with the organization. */
    templates: TemplateConnection
    /** Labels associated with the organization. */
    labels: IssueLabelConnection
    /** [Internal] Project labels associated with the organization. */
    projectLabels: ProjectLabelConnection
    /** Number of customers in the organization. */
    customerCount: Scalars['Int']
    /** Whether the organization is using Customers. */
    customersEnabled: Scalars['Boolean']
    __typename: 'Organization'
}


/** A facet. Facets are joins between entities. A facet can tie a custom view to a project, or a a project to a roadmap for example. */
export interface Facet {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The sort order of the facet. */
    sortOrder: Scalars['Float']
    /** The owning organization. */
    sourceOrganization: (Organization | null)
    /** The owning team. */
    sourceTeam: (Team | null)
    /** The owning project. */
    sourceProject: (Project | null)
    /** The owning initiative. */
    sourceInitiative: (Initiative | null)
    /** The owning feed user. */
    sourceFeedUser: (User | null)
    /** The owning page. */
    sourcePage: (FacetPageSource | null)
    /** The targeted custom view. */
    targetCustomView: (CustomView | null)
    __typename: 'Facet'
}


/** An organizational unit that contains issues. */
export interface Team {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The team's name. */
    name: Scalars['String']
    /** The team's unique key. The key is used in URLs. */
    key: Scalars['String']
    /** The team's description. */
    description: (Scalars['String'] | null)
    /** The icon of the team. */
    icon: (Scalars['String'] | null)
    /** The team's color. */
    color: (Scalars['String'] | null)
    /** The organization that the team is associated with. */
    organization: Organization
    /** [Internal] The team's parent team. */
    parent: (Team | null)
    /** [Internal] The team's sub-teams. */
    children: Team[]
    /** Whether the team uses cycles. */
    cyclesEnabled: Scalars['Boolean']
    /** The day of the week that a new cycle starts. */
    cycleStartDay: Scalars['Float']
    /** The duration of a cycle in weeks. */
    cycleDuration: Scalars['Float']
    /** The cooldown time after each cycle in weeks. */
    cycleCooldownTime: Scalars['Float']
    /** Auto assign started issues to current cycle. */
    cycleIssueAutoAssignStarted: Scalars['Boolean']
    /** Auto assign completed issues to current cycle. */
    cycleIssueAutoAssignCompleted: Scalars['Boolean']
    /** Auto assign issues to current cycle if in active status. */
    cycleLockToActive: Scalars['Boolean']
    /** How many upcoming cycles to create. */
    upcomingCycleCount: Scalars['Float']
    /** The timezone of the team. Defaults to "America/Los_Angeles" */
    timezone: Scalars['String']
    /** Unique hash for the team to be used in invite URLs. */
    inviteHash: Scalars['String']
    /** Whether the team should inherit its workflow statuses from its parent. Only applies to sub-teams. */
    inheritWorkflowStatuses: Scalars['Boolean']
    /** Whether the team should inherit its estimation settings from its parent. Only applies to sub-teams. */
    inheritIssueEstimation: Scalars['Boolean']
    /** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
    issueEstimationType: Scalars['String']
    /**
     * @deprecated This setting is no longer in use.
     * [DEPRECATED] Whether issues without priority should be sorted first.
     */
    issueOrderingNoPriorityFirst: Scalars['Boolean']
    /** Whether to allow zeros in issues estimates. */
    issueEstimationAllowZero: Scalars['Boolean']
    /** Where to move issues when changing state. */
    setIssueSortOrderOnStateChange: Scalars['String']
    /** Whether to add additional points to the estimate scale. */
    issueEstimationExtended: Scalars['Boolean']
    /** What to use as a default estimate for unestimated issues. */
    defaultIssueEstimate: Scalars['Float']
    /** Whether triage mode is enabled for the team or not. */
    triageEnabled: Scalars['Boolean']
    /** Whether an issue needs to have a priority set before leaving triage. */
    requirePriorityToLeaveTriage: Scalars['Boolean']
    /** The default workflow state into which issues are set when they are opened by team members. */
    defaultIssueState: (WorkflowState | null)
    /** The default template to use for new issues created by members of the team. */
    defaultTemplateForMembers: (Template | null)
    /**
     * @deprecated Use defaultTemplateForMembers instead
     * The id of the default template to use for new issues created by members of the team.
     */
    defaultTemplateForMembersId: (Scalars['String'] | null)
    /** The default template to use for new issues created by non-members of the team. */
    defaultTemplateForNonMembers: (Template | null)
    /**
     * @deprecated Use defaultTemplateForNonMembers instead
     * The id of the default template to use for new issues created by non-members of the team.
     */
    defaultTemplateForNonMembersId: (Scalars['String'] | null)
    /** The default template to use for new projects created for the team. */
    defaultProjectTemplate: (Template | null)
    /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
    triageIssueState: (WorkflowState | null)
    /** Whether the team is private or not. */
    private: Scalars['Boolean']
    /** [Internal] Facets associated with the team. */
    facets: Facet[]
    /** [Internal] Posts associated with the team. */
    posts: Post[]
    /** Whether the team is managed by SCIM integration. */
    scimManaged: Scalars['Boolean']
    /** The SCIM group name for the team. */
    scimGroupName: (Scalars['String'] | null)
    /** [Internal] The progress history of the team. */
    progressHistory: Scalars['JSONObject']
    /** [Internal] The current progress of the team. */
    currentProgress: Scalars['JSONObject']
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been opened as draft.
     */
    draftWorkflowState: (WorkflowState | null)
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been opened.
     */
    startWorkflowState: (WorkflowState | null)
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a review has been requested for the PR.
     */
    reviewWorkflowState: (WorkflowState | null)
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR is ready to be merged.
     */
    mergeableWorkflowState: (WorkflowState | null)
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been merged.
     */
    mergeWorkflowState: (WorkflowState | null)
    /** Whether to group recent issue history entries. */
    groupIssueHistory: Scalars['Boolean']
    /** Whether to enable resolved thread AI summaries. */
    aiThreadSummariesEnabled: Scalars['Boolean']
    /**
     * @deprecated No longer is use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue: Scalars['Boolean']
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments: Scalars['Boolean']
    /**
     * @deprecated No longer in use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses: Scalars['Boolean']
    /** Period after which issues are automatically closed in months. Null/undefined means disabled. */
    autoClosePeriod: (Scalars['Float'] | null)
    /** The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state. */
    autoCloseStateId: (Scalars['String'] | null)
    /** Period after which automatically closed and completed issues are automatically archived in months. */
    autoArchivePeriod: Scalars['Float']
    /** Whether parent issues should automatically close when all child issues are closed */
    autoCloseParentIssues: (Scalars['Boolean'] | null)
    /** Whether child issues should automatically close when their parent issue is closed */
    autoCloseChildIssues: (Scalars['Boolean'] | null)
    /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
    markedAsDuplicateWorkflowState: (WorkflowState | null)
    /** [Internal] Whether new users should join this team by default. */
    joinByDefault: (Scalars['Boolean'] | null)
    /** Calendar feed URL (iCal) for cycles. */
    cycleCalenderUrl: Scalars['String']
    /** The name of the team including it's parent team name if it has one. */
    displayName: Scalars['String']
    /** Issues associated with the team. */
    issues: IssueConnection
    /** Number of issues in the team. */
    issueCount: Scalars['Int']
    /** Cycles associated with the team. */
    cycles: CycleConnection
    /** Team's currently active cycle. */
    activeCycle: (Cycle | null)
    /** Team's triage responsibility. */
    triageResponsibility: (TriageResponsibility | null)
    /** Users who are members of this team. */
    members: UserConnection
    /** [ALPHA] The membership of the given user in the team. */
    membership: (TeamMembership | null)
    /** Memberships associated with the team. For easier access of the same data, use `members` query. */
    memberships: TeamMembershipConnection
    /** Projects associated with the team. */
    projects: ProjectConnection
    /** The states that define the workflow associated with the team. */
    states: WorkflowStateConnection
    /** The Git automation states for the team. */
    gitAutomationStates: GitAutomationStateConnection
    /** Templates associated with the team. */
    templates: TemplateConnection
    /** Labels associated with the team. */
    labels: IssueLabelConnection
    /** Webhooks associated with the team. */
    webhooks: WebhookConnection
    /** Settings for all integrations associated with that team. */
    integrationsSettings: (IntegrationsSettings | null)
    /**
     * @deprecated Use setIssueSortOrderOnStateChange instead.
     * [DEPRECATED] Whether to move issues to bottom of the column when changing state.
     */
    issueSortOrderDefaultToBottom: Scalars['Boolean']
    __typename: 'Team'
}


/** A state in a team workflow. */
export interface WorkflowState {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The state's name. */
    name: Scalars['String']
    /** The state's UI color as a HEX string. */
    color: Scalars['String']
    /** Description of the state. */
    description: (Scalars['String'] | null)
    /** The position of the state in the team flow. */
    position: Scalars['Float']
    /** The type of the state. One of "triage", "backlog", "unstarted", "started", "completed", "canceled". */
    type: Scalars['String']
    /** The team to which this state belongs to. */
    team: Team
    /** The state inherited from */
    inheritedFrom: (WorkflowState | null)
    /** Issues belonging in this state. */
    issues: IssueConnection
    __typename: 'WorkflowState'
}

export interface IssueConnection {
    edges: IssueEdge[]
    nodes: Issue[]
    pageInfo: PageInfo
    __typename: 'IssueConnection'
}

export interface IssueEdge {
    node: Issue
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueEdge'
}


/** An issue. */
export interface Issue {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The issue's unique number. */
    number: Scalars['Float']
    /** The issue's title. */
    title: Scalars['String']
    /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority: Scalars['Float']
    /** The estimate of the complexity of the issue.. */
    estimate: (Scalars['Float'] | null)
    /**
     * @deprecated Will be removed in near future, please use `sortOrder` instead
     * The order of the item in its column on the board.
     */
    boardOrder: Scalars['Float']
    /** The order of the item in relation to other items in the organization. */
    sortOrder: Scalars['Float']
    /** The order of the item in relation to other items in the organization, when ordered by priority. */
    prioritySortOrder: Scalars['Float']
    /** The time at which the issue was moved into started state. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was moved into completed state. */
    completedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue entered triage. */
    startedTriageAt: (Scalars['DateTime'] | null)
    /** The time at which the issue left triage. */
    triagedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was moved into canceled state. */
    canceledAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was automatically closed by the auto pruning process. */
    autoClosedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was automatically archived by the auto pruning process. */
    autoArchivedAt: (Scalars['DateTime'] | null)
    /** The date at which the issue is due. */
    dueDate: (Scalars['TimelessDate'] | null)
    /** The time at which the issue's SLA began. */
    slaStartedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will enter medium risk state. */
    slaMediumRiskAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will enter high risk state. */
    slaHighRiskAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will breach. */
    slaBreachesAt: (Scalars['DateTime'] | null)
    /** The type of SLA set on the issue. Calendar days or business days. */
    slaType: (Scalars['String'] | null)
    /** The time at which the issue was added to a project. */
    addedToProjectAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was added to a cycle. */
    addedToCycleAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was added to a team. */
    addedToTeamAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the issue is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The time until an issue will be snoozed in Triage view. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** [Internal] The time at which the most recent suggestions for this issue were generated. */
    suggestionsGeneratedAt: (Scalars['DateTime'] | null)
    /** [Internal] The activity summary information for this issue. */
    activitySummary: (Scalars['JSONObject'] | null)
    /** [ALPHA] The document content representing this issue description. */
    documentContent: (DocumentContent | null)
    /** Id of the labels associated with this issue. */
    labelIds: Scalars['String'][]
    /** The team that the issue is associated with. */
    team: Team
    /** The cycle that the issue is associated with. */
    cycle: (Cycle | null)
    /** The project that the issue is associated with. */
    project: (Project | null)
    /** The projectMilestone that the issue is associated with. */
    projectMilestone: (ProjectMilestone | null)
    /** The last template that was applied to this issue. */
    lastAppliedTemplate: (Template | null)
    /** The recurring issue template that created this issue. */
    recurringIssueTemplate: (Template | null)
    /** Previous identifiers of the issue if it has been moved between teams. */
    previousIdentifiers: Scalars['String'][]
    /** The user who created the issue. */
    creator: (User | null)
    /** The external user who created the issue. */
    externalUserCreator: (ExternalUser | null)
    /** The user to whom the issue is assigned to. */
    assignee: (User | null)
    /** The user who has delegated this issue to be completed by an agent. */
    supervisor: (User | null)
    /** The user who snoozed the issue. */
    snoozedBy: (User | null)
    /** The workflow state that the issue is associated with. */
    state: WorkflowState
    /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
    subIssueSortOrder: (Scalars['Float'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** Label for the priority. */
    priorityLabel: Scalars['String']
    /** The comment that this issue was created from. */
    sourceComment: (Comment | null)
    /** Integration type that created this issue, if applicable. */
    integrationSourceType: (IntegrationService | null)
    /** The bot that created the issue, if applicable. */
    botActor: (ActorBot | null)
    /** The users favorite associated with this issue. */
    favorite: (Favorite | null)
    /** Issue's human readable identifier (e.g. ENG-123). */
    identifier: Scalars['String']
    /** Issue URL. */
    url: Scalars['String']
    /** Suggested branch name for the issue. */
    branchName: Scalars['String']
    /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
    customerTicketCount: Scalars['Int']
    /** Users who are subscribed to the issue. */
    subscribers: UserConnection
    /** The parent of the issue. */
    parent: (Issue | null)
    /** Children of the issue. */
    children: IssueConnection
    /** Comments associated with the issue. */
    comments: CommentConnection
    /** History entries associated with the issue. */
    history: IssueHistoryConnection
    /** Labels associated with this issue. */
    labels: IssueLabelConnection
    /** Relations associated with this issue. */
    relations: IssueRelationConnection
    /** Inverse relations associated with this issue. */
    inverseRelations: IssueRelationConnection
    /** Attachments associated with the issue. */
    attachments: AttachmentConnection
    /** Attachments previously associated with the issue before being moved to another issue. */
    formerAttachments: AttachmentConnection
    /** The issue's description in markdown format. */
    description: (Scalars['String'] | null)
    /** [Internal] The issue's description content as YJS state. */
    descriptionState: (Scalars['String'] | null)
    /** Reactions associated with the issue. */
    reactions: Reaction[]
    /** Customer needs associated with the issue. */
    needs: CustomerNeedConnection
    /** Customer needs previously associated with the issue before being moved to another issue. */
    formerNeeds: CustomerNeedConnection
    /** The external services the issue is synced with. */
    syncedWith: (ExternalEntityInfo[] | null)
    /** [Internal] Product intelligence suggestions for the issue. */
    suggestions: IssueSuggestionConnection
    /** [Internal] Incoming product intelligence relation suggestions for the issue. */
    incomingSuggestions: IssueSuggestionConnection
    __typename: 'Issue'
}


/** A document content for a project. */
export interface DocumentContent {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The document content in markdown format. */
    content: (Scalars['String'] | null)
    /** The document content state as a base64 encoded string. */
    contentState: (Scalars['String'] | null)
    /** The issue that the content is associated with. */
    issue: (Issue | null)
    /** The project that the content is associated with. */
    project: (Project | null)
    /** The initiative that the content is associated with. */
    initiative: (Initiative | null)
    /** The project milestone that the content is associated with. */
    projectMilestone: (ProjectMilestone | null)
    /** The document that the content is associated with. */
    document: (Document | null)
    /** [ALPHA] The meeting that the content is associated with. */
    meeting: (Meeting | null)
    /** The time at which the document content was restored from a previous version. */
    restoredAt: (Scalars['DateTime'] | null)
    __typename: 'DocumentContent'
}


/** A project. */
export interface Project {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks: (Scalars['Float'] | null)
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency: (Scalars['Float'] | null)
    /** The resolution of the reminder frequency. */
    frequencyResolution: FrequencyResolutionType
    /** The day at which to prompt for updates. */
    updateRemindersDay: (Day | null)
    /** The hour at which to prompt for updates. */
    updateRemindersHour: (Scalars['Float'] | null)
    /** The project's name. */
    name: Scalars['String']
    /** The project's description. */
    description: Scalars['String']
    /** The content of the project description. */
    documentContent: (DocumentContent | null)
    /** The project's unique URL slug. */
    slugId: Scalars['String']
    /** The icon of the project. */
    icon: (Scalars['String'] | null)
    /** The project's color. */
    color: Scalars['String']
    /** The status that the project is associated with. */
    status: ProjectStatus
    /** The user who created the project. */
    creator: (User | null)
    /** The project lead. */
    lead: (User | null)
    /** [Internal] Facets associated with the project. */
    facets: Facet[]
    /** The time until which project update reminders are paused. */
    projectUpdateRemindersPausedUntilAt: (Scalars['DateTime'] | null)
    /** The estimated start date of the project. */
    startDate: (Scalars['TimelessDate'] | null)
    /** The resolution of the project's start date. */
    startDateResolution: (DateResolutionType | null)
    /** The estimated completion date of the project. */
    targetDate: (Scalars['TimelessDate'] | null)
    /** The resolution of the project's estimated completion date. */
    targetDateResolution: (DateResolutionType | null)
    /** The time at which the project was moved into started state. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time at which the project was moved into completed state. */
    completedAt: (Scalars['DateTime'] | null)
    /** The time at which the project was moved into canceled state. */
    canceledAt: (Scalars['DateTime'] | null)
    /** The time at which the project was automatically archived by the auto pruning process. */
    autoArchivedAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the project is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The sort order for the project within the organization. */
    sortOrder: Scalars['Float']
    /** The sort order for the project within the organization, when ordered by priority. */
    prioritySortOrder: Scalars['Float']
    /** The project was created based on this issue. */
    convertedFromIssue: (Issue | null)
    /** The last template that was applied to this project. */
    lastAppliedTemplate: (Template | null)
    /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority: Scalars['Int']
    /** The last project update posted for this project. */
    lastUpdate: (ProjectUpdate | null)
    /** The health of the project. */
    health: (ProjectUpdateHealthType | null)
    /** The time at which the project health was updated. */
    healthUpdatedAt: (Scalars['DateTime'] | null)
    /** The total number of issues in the project after each week. */
    issueCountHistory: Scalars['Float'][]
    /** The number of completed issues in the project after each week. */
    completedIssueCountHistory: Scalars['Float'][]
    /** The total number of estimation points after each week. */
    scopeHistory: Scalars['Float'][]
    /** The number of completed estimation points after each week. */
    completedScopeHistory: Scalars['Float'][]
    /** The number of in progress estimation points after each week. */
    inProgressScopeHistory: Scalars['Float'][]
    /** [INTERNAL] The progress history of the project. */
    progressHistory: Scalars['JSONObject']
    /** [INTERNAL] The current progress of the project. */
    currentProgress: Scalars['JSONObject']
    /**
     * @deprecated No longer in use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue: Scalars['Boolean']
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments: Scalars['Boolean']
    /**
     * @deprecated No longer is use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses: Scalars['Boolean']
    /** Id of the labels associated with this project. */
    labelIds: Scalars['String'][]
    /** The user's favorite associated with this project. */
    favorite: (Favorite | null)
    /** Project URL. */
    url: Scalars['String']
    /** Initiatives that this project belongs to. */
    initiatives: InitiativeConnection
    /** Teams associated with this project. */
    teams: TeamConnection
    /** Users that are members of the project. */
    members: UserConnection
    /** Project updates associated with the project. */
    projectUpdates: ProjectUpdateConnection
    /** Documents associated with the project. */
    documents: DocumentConnection
    /** Milestones associated with the project. */
    projectMilestones: ProjectMilestoneConnection
    /** Issues associated with the project. */
    issues: IssueConnection
    /** External links associated with the project. */
    externalLinks: EntityExternalLinkConnection
    /** History entries associated with the project. */
    history: ProjectHistoryConnection
    /** [Internal] Labels associated with this project. */
    labels: ProjectLabelConnection
    /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress: Scalars['Float']
    /** The overall scope (total estimate points) of the project. */
    scope: Scalars['Float']
    /** Settings for all integrations associated with that project. */
    integrationsSettings: (IntegrationsSettings | null)
    /** The project's content in markdown format. */
    content: (Scalars['String'] | null)
    /** [Internal] The project's content as YJS state. */
    contentState: (Scalars['String'] | null)
    /** Comments associated with the project overview. */
    comments: CommentConnection
    /** Relations associated with this project. */
    relations: ProjectRelationConnection
    /** Inverse relations associated with this project. */
    inverseRelations: ProjectRelationConnection
    /** Customer needs associated with the project. */
    needs: CustomerNeedConnection
    /**
     * @deprecated Use project.status instead
     * [DEPRECATED] The type of the state.
     */
    state: Scalars['String']
    /** The priority of the project as a label. */
    priorityLabel: Scalars['String']
    __typename: 'Project'
}


/** By which resolution is frequency defined. */
export type FrequencyResolutionType = 'daily' | 'weekly'


/** The day of the week. */
export type Day = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday'


/** A project status. */
export interface ProjectStatus {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the status. */
    name: Scalars['String']
    /** The UI color of the status as a HEX string. */
    color: Scalars['String']
    /** Description of the status. */
    description: (Scalars['String'] | null)
    /** The position of the status in the workspace's project flow. */
    position: Scalars['Float']
    /** The type of the project status. */
    type: ProjectStatusType
    /** Whether or not a project can be in this status indefinitely. */
    indefinite: Scalars['Boolean']
    __typename: 'ProjectStatus'
}


/** A type of project status. */
export type ProjectStatusType = 'backlog' | 'planned' | 'started' | 'paused' | 'completed' | 'canceled'


/** By which resolution is a date defined. */
export type DateResolutionType = 'month' | 'quarter' | 'halfYear' | 'year'


/** A template object used for creating entities faster. */
export interface Template {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The entity type this template is for. */
    type: Scalars['String']
    /** The name of the template. */
    name: Scalars['String']
    /** Template description. */
    description: (Scalars['String'] | null)
    /** Template data. */
    templateData: Scalars['JSON']
    /** The sort order of the template. */
    sortOrder: Scalars['Float']
    /** The organization that the template is associated with. If null, the template is associated with a particular team. */
    organization: Organization
    /** The team that the template is associated with. If null, the template is global to the workspace. */
    team: (Team | null)
    /** The user who created the template. */
    creator: (User | null)
    /** The user who last updated the template. */
    lastUpdatedBy: (User | null)
    /** The original template inherited from. */
    inheritedFrom: (Template | null)
    __typename: 'Template'
}


/** An update associated with a project. */
export interface ProjectUpdate {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The update content in markdown format. */
    body: Scalars['String']
    /** The time the update was edited. */
    editedAt: (Scalars['DateTime'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** [Internal] The content of the update as a Prosemirror document. */
    bodyData: Scalars['String']
    /** The update's unique URL slug. */
    slugId: Scalars['String']
    /** The project that the update is associated with. */
    project: Project
    /** The health of the project at the time of the update. */
    health: ProjectUpdateHealthType
    /** The user who wrote the update. */
    user: User
    /** [Internal] Serialized JSON representing current state of the project properties when posting the project update. */
    infoSnapshot: (Scalars['JSONObject'] | null)
    /** Whether project update diff should be hidden. */
    isDiffHidden: Scalars['Boolean']
    /** The URL to the project update. */
    url: Scalars['String']
    /** Whether the project update is stale. */
    isStale: Scalars['Boolean']
    /** The diff between the current update and the previous one. */
    diff: (Scalars['JSONObject'] | null)
    /** The diff between the current update and the previous one, formatted as markdown. */
    diffMarkdown: (Scalars['String'] | null)
    /** Reactions associated with the project update. */
    reactions: Reaction[]
    /** Comments associated with the project update. */
    comments: CommentConnection
    __typename: 'ProjectUpdate'
}


/** The health type when the project update is created. */
export type ProjectUpdateHealthType = 'onTrack' | 'atRisk' | 'offTrack'


/** A reaction associated with a comment or a project update. */
export interface Reaction {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Name of the reaction's emoji. */
    emoji: Scalars['String']
    /** The issue that the reaction is associated with. */
    issue: (Issue | null)
    /** The comment that the reaction is associated with. */
    comment: (Comment | null)
    /** The project update that the reaction is associated with. */
    projectUpdate: (ProjectUpdate | null)
    /** The initiative update that the reaction is associated with. */
    initiativeUpdate: (InitiativeUpdate | null)
    /** The post that the reaction is associated with. */
    post: (Post | null)
    /** The user that created the reaction. */
    user: (User | null)
    /** The external user that created the reaction. */
    externalUser: (ExternalUser | null)
    __typename: 'Reaction'
}


/** A comment associated with an issue. */
export interface Comment {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The comment content in markdown format. */
    body: Scalars['String']
    /** The issue that the comment is associated with. */
    issue: (Issue | null)
    /** The document content that the comment is associated with. */
    documentContent: (DocumentContent | null)
    /** The project update that the comment is associated with. */
    projectUpdate: (ProjectUpdate | null)
    /** The initiative update that the comment is associated with. */
    initiativeUpdate: (InitiativeUpdate | null)
    /** The post that the comment is associated with. */
    post: (Post | null)
    /** The parent comment under which the current comment is nested. */
    parent: (Comment | null)
    /** The user that resolved the thread. */
    resolvingUser: (User | null)
    /** The time the resolvingUser resolved the thread. */
    resolvedAt: (Scalars['DateTime'] | null)
    /** The comment that resolved the thread. */
    resolvingComment: (Comment | null)
    /** The user who wrote the comment. */
    user: (User | null)
    /** The external user who wrote the comment. */
    externalUser: (ExternalUser | null)
    /** The time user edited the comment. */
    editedAt: (Scalars['DateTime'] | null)
    /** [Internal] The comment content as a Prosemirror document. */
    bodyData: Scalars['String']
    /** The text that this comment references. Only defined for inline comments. */
    quotedText: (Scalars['String'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** [Internal] A generated summary of the comment thread. */
    threadSummary: (Scalars['JSONObject'] | null)
    /** Comment's URL. */
    url: Scalars['String']
    /** The children of the comment. */
    children: CommentConnection
    /** The bot that created the comment. */
    botActor: (ActorBot | null)
    /** The external thread that the comment is synced with. */
    externalThread: (SyncedExternalThread | null)
    /** Reactions associated with the comment. */
    reactions: Reaction[]
    /** The external services the comment is synced with. */
    syncedWith: (ExternalEntityInfo[] | null)
    __typename: 'Comment'
}


/** An initiative update. */
export interface InitiativeUpdate {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The update content in markdown format. */
    body: Scalars['String']
    /** The time the update was edited. */
    editedAt: (Scalars['DateTime'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** [Internal] The content of the update as a Prosemirror document. */
    bodyData: Scalars['String']
    /** The update's unique URL slug. */
    slugId: Scalars['String']
    /** The initiative that the update is associated with. */
    initiative: Initiative
    /** The user who wrote the update. */
    user: User
    /** The health at the time of the update. */
    health: InitiativeUpdateHealthType
    /** [Internal] Serialized JSON representing current state of the initiative properties when posting the initiative update. */
    infoSnapshot: (Scalars['JSONObject'] | null)
    /** Whether initiative update diff should be hidden. */
    isDiffHidden: Scalars['Boolean']
    /** The URL to the initiative update. */
    url: Scalars['String']
    /** Whether the initiative update is stale. */
    isStale: Scalars['Boolean']
    /** The diff between the current update and the previous one. */
    diff: (Scalars['JSONObject'] | null)
    /** The diff between the current update and the previous one, formatted as markdown. */
    diffMarkdown: (Scalars['String'] | null)
    /** Reactions associated with the initiative update. */
    reactions: Reaction[]
    /** Comments associated with the initiative update. */
    comments: CommentConnection
    __typename: 'InitiativeUpdate'
}


/** An initiative to group projects. */
export interface Initiative {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks: (Scalars['Float'] | null)
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency: (Scalars['Float'] | null)
    /** The resolution of the reminder frequency. */
    frequencyResolution: FrequencyResolutionType
    /** The day at which to prompt for updates. */
    updateRemindersDay: (Day | null)
    /** The hour at which to prompt for updates. */
    updateRemindersHour: (Scalars['Float'] | null)
    /** The name of the initiative. */
    name: Scalars['String']
    /** The description of the initiative. */
    description: (Scalars['String'] | null)
    /** The organization of the initiative. */
    organization: Organization
    /** The user who created the initiative. */
    creator: (User | null)
    /** The user who owns the initiative. */
    owner: (User | null)
    /** The initiative's unique URL slug. */
    slugId: Scalars['String']
    /** The sort order of the initiative within the organization. */
    sortOrder: Scalars['Float']
    /** The initiative's color. */
    color: (Scalars['String'] | null)
    /** The icon of the initiative. */
    icon: (Scalars['String'] | null)
    /** A flag that indicates whether the initiative is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** [Internal] Facets associated with the initiative. */
    facets: Facet[]
    /** The estimated completion date of the initiative. */
    targetDate: (Scalars['TimelessDate'] | null)
    /** The resolution of the initiative's estimated completion date. */
    targetDateResolution: (DateResolutionType | null)
    /** The status of the initiative. One of Planned, Active, Completed */
    status: InitiativeStatus
    /** The last initiative update posted for this initiative. */
    lastUpdate: (InitiativeUpdate | null)
    /** The health of the initiative. */
    health: (InitiativeUpdateHealthType | null)
    /** The time at which the initiative health was updated. */
    healthUpdatedAt: (Scalars['DateTime'] | null)
    /** The time at which the initiative was moved into active status. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time at which the initiative was moved into completed status. */
    completedAt: (Scalars['DateTime'] | null)
    /** Initiative URL. */
    url: Scalars['String']
    /** Projects associated with the initiative. */
    projects: ProjectConnection
    /** Links associated with the initiative. */
    links: EntityExternalLinkConnection
    /** Settings for all integrations associated with that initiative. */
    integrationsSettings: (IntegrationsSettings | null)
    /** History entries associated with the initiative. */
    history: InitiativeHistoryConnection
    /** [ALPHA] Sub-initiatives associated with the initiative. */
    subInitiatives: InitiativeConnection
    /** The initiative's content in markdown format. */
    content: (Scalars['String'] | null)
    __typename: 'Initiative'
}

export type InitiativeStatus = 'Planned' | 'Active' | 'Completed'


/** The health type when the update is created. */
export type InitiativeUpdateHealthType = 'onTrack' | 'atRisk' | 'offTrack'

export interface ProjectConnection {
    edges: ProjectEdge[]
    nodes: Project[]
    pageInfo: PageInfo
    __typename: 'ProjectConnection'
}

export interface ProjectEdge {
    node: Project
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectEdge'
}

export interface PageInfo {
    /** Indicates if there are more results when paginating backward. */
    hasPreviousPage: Scalars['Boolean']
    /** Indicates if there are more results when paginating forward. */
    hasNextPage: Scalars['Boolean']
    /** Cursor representing the first result in the paginated results. */
    startCursor: (Scalars['String'] | null)
    /** Cursor representing the last result in the paginated results. */
    endCursor: (Scalars['String'] | null)
    __typename: 'PageInfo'
}

export type CyclePeriod = 'before' | 'during' | 'after'

export type SlaStatus = 'Breached' | 'HighRisk' | 'MediumRisk' | 'LowRisk' | 'Completed' | 'Failed'


/** By which field should the pagination order by */
export type PaginationOrderBy = 'createdAt' | 'updatedAt'


/** How to treat NULL values, whether they should appear first or last */
export type PaginationNulls = 'first' | 'last'


/** Whether to sort in ascending or descending order */
export type PaginationSortOrder = 'Ascending' | 'Descending'

export interface EntityExternalLinkConnection {
    edges: EntityExternalLinkEdge[]
    nodes: EntityExternalLink[]
    pageInfo: PageInfo
    __typename: 'EntityExternalLinkConnection'
}

export interface EntityExternalLinkEdge {
    node: EntityExternalLink
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'EntityExternalLinkEdge'
}


/** An external link for an entity like initiative, etc... */
export interface EntityExternalLink {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The link's URL. */
    url: Scalars['String']
    /** The link's label. */
    label: Scalars['String']
    /** The order of the item in the resources list. */
    sortOrder: Scalars['Float']
    /** The user who created the link. */
    creator: User
    /** The initiative that the link is associated with. */
    initiative: (Initiative | null)
    __typename: 'EntityExternalLink'
}


/** The configuration of all integrations for different entities. */
export interface IntegrationsSettings {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The type of view to which the integration settings context is associated with. */
    contextViewType: (ContextViewType | null)
    /**
     * @deprecated No longer in use. Use `slackIssueAddedToView` instead.
     * Whether to send a Slack message when a new issue is created for the project or the team.
     */
    slackIssueCreated: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
    slackIssueNewComment: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
    slackIssueStatusChangedDone: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when an issue is added to the custom view. */
    slackIssueAddedToView: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
    slackIssueStatusChangedAll: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when a project update is created. */
    slackProjectUpdateCreated: (Scalars['Boolean'] | null)
    /** Whether to send a new project update to team Slack channels. */
    slackProjectUpdateCreatedToTeam: (Scalars['Boolean'] | null)
    /** Whether to send a new project update to workspace Slack channel. */
    slackProjectUpdateCreatedToWorkspace: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when a initiate update is created. */
    slackInitiativeUpdateCreated: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when a new issue is added to triage. */
    slackIssueAddedToTriage: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when an SLA is at high risk. */
    slackIssueSlaHighRisk: (Scalars['Boolean'] | null)
    /** Whether to send a Slack message when an SLA is breached. */
    slackIssueSlaBreached: (Scalars['Boolean'] | null)
    /** Team which those settings apply to. */
    team: (Team | null)
    /** Project which those settings apply to. */
    project: (Project | null)
    /** Initiative which those settings apply to. */
    initiative: (Initiative | null)
    __typename: 'IntegrationsSettings'
}

export type ContextViewType = 'activeIssues' | 'activeCycle' | 'upcomingCycle' | 'backlog' | 'triage'

export interface InitiativeHistoryConnection {
    edges: InitiativeHistoryEdge[]
    nodes: InitiativeHistory[]
    pageInfo: PageInfo
    __typename: 'InitiativeHistoryConnection'
}

export interface InitiativeHistoryEdge {
    node: InitiativeHistory
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'InitiativeHistoryEdge'
}


/** A initiative history containing relevant change events. */
export interface InitiativeHistory {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The events that happened while recording that history. */
    entries: Scalars['JSONObject']
    /** The initiative that the history is associated with. */
    initiative: Initiative
    __typename: 'InitiativeHistory'
}

export interface InitiativeConnection {
    edges: InitiativeEdge[]
    nodes: Initiative[]
    pageInfo: PageInfo
    __typename: 'InitiativeConnection'
}

export interface InitiativeEdge {
    node: Initiative
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'InitiativeEdge'
}

export interface CommentConnection {
    edges: CommentEdge[]
    nodes: Comment[]
    pageInfo: PageInfo
    __typename: 'CommentConnection'
}

export interface CommentEdge {
    node: Comment
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CommentEdge'
}


/** [Internal] A generic post. */
export interface Post {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The update content in markdown format. */
    body: Scalars['String']
    /** [Internal] The content of the post as a Prosemirror document. */
    bodyData: Scalars['String']
    /** [Internal] The written update data used to compose the written post. */
    writtenSummaryData: (Scalars['JSONObject'] | null)
    /** The update content summarized for audio consumption. */
    audioSummary: (Scalars['String'] | null)
    /** The post's title. */
    title: (Scalars['String'] | null)
    /** The post's unique URL slug. */
    slugId: Scalars['String']
    /** The user who wrote the post. */
    creator: (User | null)
    /** The time the post was edited. */
    editedAt: (Scalars['DateTime'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** A URL of the TTL (text-to-language) for the body. */
    ttlUrl: (Scalars['String'] | null)
    /** The user that the post is associated with. */
    user: (User | null)
    /** The team that the post is associated with. */
    team: (Team | null)
    /** The type of the post. */
    type: (PostType | null)
    /** The log id of the ai response. */
    evalLogId: (Scalars['String'] | null)
    /** Schedule used to create a post summary. */
    feedSummaryScheduleAtCreate: (FeedSummarySchedule | null)
    __typename: 'Post'
}


/** Type of Post */
export type PostType = 'summary' | 'update'


/** Cadence to generate feed summary */
export type FeedSummarySchedule = 'daily' | 'weekly' | 'never'


/** An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them. */
export interface ExternalUser {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The external user's full name. */
    name: Scalars['String']
    /** The external user's display name. Unique within each organization. Can match the display name of an actual user. */
    displayName: Scalars['String']
    /** The external user's email address. */
    email: (Scalars['String'] | null)
    /** An URL to the external user's avatar image. */
    avatarUrl: (Scalars['String'] | null)
    /** Organization the external user belongs to. */
    organization: Organization
    /** The last time the external user was seen interacting with Linear. */
    lastSeen: (Scalars['DateTime'] | null)
    __typename: 'ExternalUser'
}


/** A bot actor is an actor that is not a user, but an application or integration. */
export interface ActorBot {
    id: (Scalars['ID'] | null)
    /** The type of bot. */
    type: Scalars['String']
    /** The sub type of the bot. */
    subType: (Scalars['String'] | null)
    /** The display name of the bot. */
    name: (Scalars['String'] | null)
    /** The display name of the external user on behalf of which the bot acted. */
    userDisplayName: (Scalars['String'] | null)
    /** A url pointing to the avatar representing this bot. */
    avatarUrl: (Scalars['String'] | null)
    __typename: 'ActorBot'
}


/** A comment thread that is synced with an external source. */
export interface SyncedExternalThread {
    id: (Scalars['ID'] | null)
    /** The type of the external source. */
    type: Scalars['String']
    /** The sub type of the external source. */
    subType: (Scalars['String'] | null)
    /** The display name of the source. */
    name: (Scalars['String'] | null)
    /** The display name of the thread. */
    displayName: (Scalars['String'] | null)
    /** The external url of the thread. */
    url: (Scalars['String'] | null)
    /** Whether this thread is syncing with the external service. */
    isConnected: Scalars['Boolean']
    /** Whether the current user has the corresponding personal integration connected for the external service. */
    isPersonalIntegrationConnected: Scalars['Boolean']
    /** Whether a connected personal integration is required to comment in this thread. */
    isPersonalIntegrationRequired: Scalars['Boolean']
    __typename: 'SyncedExternalThread'
}


/** Information about an external entity. */
export interface ExternalEntityInfo {
    /** The id of the external entity. */
    id: Scalars['String']
    /** The name of the service this entity is synced with. */
    service: ExternalSyncService
    /** Metadata about the external entity. */
    metadata: (ExternalEntityInfoMetadata | null)
    __typename: 'ExternalEntityInfo'
}


/** The service that syncs an external entity to Linear. */
export type ExternalSyncService = 'jira' | 'github' | 'slack'

export type ExternalEntityInfoMetadata = (ExternalEntityInfoGithubMetadata | ExternalEntityInfoJiraMetadata | ExternalEntitySlackMetadata) & { __isUnion?: true }


/** Metadata about the external GitHub entity. */
export interface ExternalEntityInfoGithubMetadata {
    /** The repository name. */
    repo: (Scalars['String'] | null)
    /** The owner of the repository. */
    owner: (Scalars['String'] | null)
    /** The number of the issue. */
    number: (Scalars['Float'] | null)
    __typename: 'ExternalEntityInfoGithubMetadata'
}


/** Metadata about the external Jira entity. */
export interface ExternalEntityInfoJiraMetadata {
    /** The key of the Jira issue. */
    issueKey: (Scalars['String'] | null)
    /** The id of the Jira project. */
    projectId: (Scalars['String'] | null)
    /** The id of the Jira issue type. */
    issueTypeId: (Scalars['String'] | null)
    __typename: 'ExternalEntityInfoJiraMetadata'
}


/** Metadata about the external Slack entity. */
export interface ExternalEntitySlackMetadata {
    /** Whether the entity originated from Slack (not Linear). */
    isFromSlack: Scalars['Boolean']
    /** The id of the Slack channel. */
    channelId: (Scalars['String'] | null)
    /** The name of the Slack channel. */
    channelName: (Scalars['String'] | null)
    /** The URL of the Slack message. */
    messageUrl: (Scalars['String'] | null)
    __typename: 'ExternalEntitySlackMetadata'
}


/** User favorites presented in the sidebar. */
export interface Favorite {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The type of the favorite. */
    type: Scalars['String']
    /** The parent folder of the favorite. */
    parent: (Favorite | null)
    /** The name of the folder. Only applies to favorites of type folder. */
    folderName: (Scalars['String'] | null)
    /** The targeted tab of the project. */
    projectTab: (ProjectTab | null)
    /** The type of favorited predefined view. */
    predefinedViewType: (Scalars['String'] | null)
    /** The targeted tab of the initiative. */
    initiativeTab: (InitiativeTab | null)
    /** The owner of the favorite. */
    owner: User
    /** The order of the item in the favorites list. */
    sortOrder: Scalars['Float']
    /** Children of the favorite. Only applies to favorites of type folder. */
    children: FavoriteConnection
    /** The favorited issue. */
    issue: (Issue | null)
    /** The favorited project. */
    project: (Project | null)
    /** [INTERNAL] The favorited facet. */
    facet: (Facet | null)
    /** [DEPRECATED] The favorited team of the project. */
    projectTeam: (Team | null)
    /** The favorited cycle. */
    cycle: (Cycle | null)
    /** The favorited custom view. */
    customView: (CustomView | null)
    /** The team of the favorited predefined view. */
    predefinedViewTeam: (Team | null)
    /** The favorited document. */
    document: (Document | null)
    /** The favorited roadmap. */
    roadmap: (Roadmap | null)
    /** The favorited initiative. */
    initiative: (Initiative | null)
    /** The favorited label. */
    label: (IssueLabel | null)
    /** [Internal] The favorited project label. */
    projectLabel: (ProjectLabel | null)
    /** The favorited user. */
    user: (User | null)
    /** The favorited customer. */
    customer: (Customer | null)
    /** The favorited dashboard. */
    dashboard: (Dashboard | null)
    /** URL of the favorited entity. Folders return 'null' value. */
    url: (Scalars['String'] | null)
    /** [Internal] Favorite's title text (name of the favorite'd object or folder). */
    title: Scalars['String']
    /** [Internal] Detail text for favorite's `title` (e.g. team's name for a project). */
    detail: (Scalars['String'] | null)
    /** [Internal] Returns the color of the favorite's icon. Unavailable for avatars and views with fixed icons (e.g. cycle). */
    color: (Scalars['String'] | null)
    /** [Internal] Name of the favorite's icon. Unavailable for standard views, issues, and avatars */
    icon: (Scalars['String'] | null)
    __typename: 'Favorite'
}


/** Different tabs available inside a project. */
export type ProjectTab = 'customers' | 'documents' | 'issues'


/** Different tabs available inside an initiative. */
export type InitiativeTab = 'overview' | 'projects'

export interface FavoriteConnection {
    edges: FavoriteEdge[]
    nodes: Favorite[]
    pageInfo: PageInfo
    __typename: 'FavoriteConnection'
}

export interface FavoriteEdge {
    node: Favorite
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'FavoriteEdge'
}


/** A set of issues to be resolved in a specified amount of time. */
export interface Cycle {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The number of the cycle. */
    number: Scalars['Float']
    /** The custom name of the cycle. */
    name: (Scalars['String'] | null)
    /** The cycle's description. */
    description: (Scalars['String'] | null)
    /** The start time of the cycle. */
    startsAt: Scalars['DateTime']
    /** The end time of the cycle. */
    endsAt: Scalars['DateTime']
    /** The completion time of the cycle. If null, the cycle hasn't been completed. */
    completedAt: (Scalars['DateTime'] | null)
    /** The time at which the cycle was automatically archived by the auto pruning process. */
    autoArchivedAt: (Scalars['DateTime'] | null)
    /** The total number of issues in the cycle after each day. */
    issueCountHistory: Scalars['Float'][]
    /** The number of completed issues in the cycle after each day. */
    completedIssueCountHistory: Scalars['Float'][]
    /** The total number of estimation points after each day. */
    scopeHistory: Scalars['Float'][]
    /** The number of completed estimation points after each day. */
    completedScopeHistory: Scalars['Float'][]
    /** The number of in progress estimation points after each day. */
    inProgressScopeHistory: Scalars['Float'][]
    /** The team that the cycle is associated with. */
    team: Team
    /** [Internal] The progress history of the cycle. */
    progressHistory: Scalars['JSONObject']
    /** [Internal] The current progress of the cycle. */
    currentProgress: Scalars['JSONObject']
    /** The cycle inherited from. */
    inheritedFrom: (Cycle | null)
    /** Issues associated with the cycle. */
    issues: IssueConnection
    /** Issues that weren't completed when the cycle was closed. */
    uncompletedIssuesUponClose: IssueConnection
    /** The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress: Scalars['Float']
    __typename: 'Cycle'
}


/** A custom view that has been saved by a user. */
export interface CustomView {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the custom view. */
    name: Scalars['String']
    /** The description of the custom view. */
    description: (Scalars['String'] | null)
    /** The icon of the custom view. */
    icon: (Scalars['String'] | null)
    /** The color of the icon of the custom view. */
    color: (Scalars['String'] | null)
    /** The organization of the custom view. */
    organization: Organization
    /** The user who created the custom view. */
    creator: User
    /** The user who owns the custom view. */
    owner: User
    /** The user who last updated the custom view. */
    updatedBy: (User | null)
    /**
     * @deprecated Will be replaced by `filterData` in a future update
     * The filters applied to issues in the custom view.
     */
    filters: Scalars['JSONObject']
    /** The filter applied to issues in the custom view. */
    filterData: Scalars['JSONObject']
    /** The filter applied to projects in the custom view. */
    projectFilterData: (Scalars['JSONObject'] | null)
    /** The filter applied to feed items in the custom view. */
    feedItemFilterData: (Scalars['JSONObject'] | null)
    /** Whether the custom view is shared with everyone in the organization. */
    shared: Scalars['Boolean']
    /** The custom view's unique URL slug. */
    slugId: (Scalars['String'] | null)
    /** The model name of the custom view. */
    modelName: Scalars['String']
    /** [INTERNAL] The facet associated with the custom view. */
    facet: (Facet | null)
    /** The team associated with the custom view. */
    team: (Team | null)
    /** Projects associated with the custom view. */
    projects: ProjectConnection
    /** Issues associated with the custom view. */
    issues: IssueConnection
    /** The current users view preferences for this custom view. */
    userViewPreferences: (ViewPreferences | null)
    /** The organizations default view preferences for this custom view. */
    organizationViewPreferences: (ViewPreferences | null)
    /** The calculated view preferences values for this custom view. */
    viewPreferencesValues: (ViewPreferencesValues | null)
    __typename: 'CustomView'
}


/** View preferences. */
export interface ViewPreferences {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The view preference type. */
    type: Scalars['String']
    /** The view type. */
    viewType: Scalars['String']
    /** The view preferences */
    preferences: ViewPreferencesValues
    __typename: 'ViewPreferences'
}

export interface ViewPreferencesValues {
    /** The issue ordering. */
    viewOrdering: (Scalars['String'] | null)
    /** The issue grouping. */
    issueGrouping: (Scalars['String'] | null)
    /** Whether to show completed issues. */
    showCompletedIssues: (Scalars['String'] | null)
    __typename: 'ViewPreferencesValues'
}


/** A document that can be attached to different entities. */
export interface Document {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The document title. */
    title: Scalars['String']
    /** The icon of the document. */
    icon: (Scalars['String'] | null)
    /** The color of the icon. */
    color: (Scalars['String'] | null)
    /** The user who created the document. */
    creator: (User | null)
    /** The user who last updated the document. */
    updatedBy: (User | null)
    /** The project that the document is associated with. */
    project: (Project | null)
    /** The initiative that the document is associated with. */
    initiative: (Initiative | null)
    /** [Internal] The team that the document is associated with. */
    team: (Team | null)
    /** The document's unique URL slug. */
    slugId: Scalars['String']
    /** The last template that was applied to this document. */
    lastAppliedTemplate: (Template | null)
    /** The time at which the document was hidden. Null if the entity has not been hidden. */
    hiddenAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the document is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The order of the item in the resources list. */
    sortOrder: Scalars['Float']
    /** Comments associated with the document. */
    comments: CommentConnection
    /** The documents content in markdown format. */
    content: (Scalars['String'] | null)
    /** [Internal] The documents content as YJS state. */
    contentState: (Scalars['String'] | null)
    /** The ID of the document content associated with the document. */
    documentContentId: (Scalars['String'] | null)
    /** The canonical url for the document. */
    url: Scalars['String']
    __typename: 'Document'
}


/** A roadmap for projects. */
export interface Roadmap {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the roadmap. */
    name: Scalars['String']
    /** The description of the roadmap. */
    description: (Scalars['String'] | null)
    /** The organization of the roadmap. */
    organization: Organization
    /** The user who created the roadmap. */
    creator: User
    /** The user who owns the roadmap. */
    owner: (User | null)
    /** The roadmap's unique URL slug. */
    slugId: Scalars['String']
    /** The sort order of the roadmap within the organization. */
    sortOrder: Scalars['Float']
    /** The roadmap's color. */
    color: (Scalars['String'] | null)
    /** Projects associated with the roadmap. */
    projects: ProjectConnection
    /** The canonical url for the roadmap. */
    url: Scalars['String']
    __typename: 'Roadmap'
}


/** Labels that can be associated with issues. */
export interface IssueLabel {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The label's name. */
    name: Scalars['String']
    /** The label's description. */
    description: (Scalars['String'] | null)
    /** The label's color as a HEX string. */
    color: Scalars['String']
    /** Whether the label is a group. */
    isGroup: Scalars['Boolean']
    /** @deprecated Workspace labels are identified by their team being null. */
    organization: Organization
    /** The team that the label is associated with. If null, the label is associated with the global workspace. */
    team: (Team | null)
    /** The user who created the label. */
    creator: (User | null)
    /** The parent label. */
    parent: (IssueLabel | null)
    /** The original label inherited from. */
    inheritedFrom: (IssueLabel | null)
    /** Issues associated with the label. */
    issues: IssueConnection
    /** Children of the label. */
    children: IssueLabelConnection
    __typename: 'IssueLabel'
}

export interface IssueLabelConnection {
    edges: IssueLabelEdge[]
    nodes: IssueLabel[]
    pageInfo: PageInfo
    __typename: 'IssueLabelConnection'
}

export interface IssueLabelEdge {
    node: IssueLabel
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueLabelEdge'
}


/** [Internal] Labels that can be associated with projects. */
export interface ProjectLabel {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The label's name. */
    name: Scalars['String']
    /** The label's description. */
    description: (Scalars['String'] | null)
    /** The label's color as a HEX string. */
    color: Scalars['String']
    /** Whether the label is a group. */
    isGroup: Scalars['Boolean']
    organization: Organization
    /** The user who created the label. */
    creator: (User | null)
    /** The parent label. */
    parent: (ProjectLabel | null)
    __typename: 'ProjectLabel'
}


/** A customer whose needs will be tied to issues or projects. */
export interface Customer {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The customer's name. */
    name: Scalars['String']
    /** The customer's logo URL. */
    logoUrl: (Scalars['String'] | null)
    /** The domains associated with this customer. */
    domains: Scalars['String'][]
    /** The ids of the customers in external systems. */
    externalIds: Scalars['String'][]
    /** The ID of the Slack channel used to interact with the customer. */
    slackChannelId: (Scalars['String'] | null)
    /** The user who owns the customer. */
    owner: (User | null)
    /** The current status of the customer. */
    status: CustomerStatus
    /** The annual revenue generated by the customer. */
    revenue: (Scalars['Float'] | null)
    /** The size of the customer. */
    size: (Scalars['Float'] | null)
    /** The tier of the customer. */
    tier: (CustomerTier | null)
    /** The approximate number of needs of the customer. */
    approximateNeedCount: Scalars['Float']
    /** The customer's unique URL slug. */
    slugId: Scalars['String']
    /** The ID of the main source, when a customer has multiple sources. Must be one of externalIds. */
    mainSourceId: (Scalars['String'] | null)
    /** The integration that manages the Customer. */
    integration: (Integration | null)
    __typename: 'Customer'
}


/** A customer status. */
export interface CustomerStatus {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the status. */
    name: Scalars['String']
    /** The UI color of the status as a HEX string. */
    color: Scalars['String']
    /** Description of the status. */
    description: (Scalars['String'] | null)
    /** The position of the status in the workspace's customers flow. */
    position: Scalars['Float']
    /** The display name of the status. */
    displayName: Scalars['String']
    /**
     * @deprecated Customer statuses are no longer grouped by type.
     * The type of the customer status.
     */
    type: (CustomerStatusType | null)
    __typename: 'CustomerStatus'
}


/** [DEPRECATED] A type of customer status. */
export type CustomerStatusType = 'active' | 'inactive'


/** A customer tier. */
export interface CustomerTier {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the tier. */
    name: Scalars['String']
    /** The UI color of the tier as a HEX string. */
    color: Scalars['String']
    /** Description of the tier. */
    description: (Scalars['String'] | null)
    /** The position of the tier in the workspace's customers flow. */
    position: Scalars['Float']
    /** The display name of the tier. */
    displayName: Scalars['String']
    __typename: 'CustomerTier'
}


/** An integration with an external service. */
export interface Integration {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The integration's type. */
    service: Scalars['String']
    /** The organization that the integration is associated with. */
    organization: Organization
    /** The team that the integration is associated with. */
    team: (Team | null)
    /** The user that added the integration. */
    creator: User
    __typename: 'Integration'
}


/** [Internal] A dashboard, usually a collection of widgets to display several insights at once. */
export interface Dashboard {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The dashboard's unique URL slug. */
    slugId: Scalars['String']
    /** The name of the dashboard. */
    name: Scalars['String']
    /** The description of the dashboard. */
    description: (Scalars['String'] | null)
    /** The icon of the dashboard. */
    icon: (Scalars['String'] | null)
    /** The color of the icon of the dashboard. */
    color: (Scalars['String'] | null)
    /** The sort order of the dashboard within the organization or its team. */
    sortOrder: Scalars['Float']
    /** Whether the dashboard is shared with everyone in the organization. */
    shared: Scalars['Boolean']
    /** The organization of the dashboard. */
    organization: Organization
    /** The user who created the dashboard. */
    creator: (User | null)
    /** The user who last updated the dashboard. */
    updatedBy: (User | null)
    /** The owner of the dashboard. */
    owner: (User | null)
    /** The filter applied to all dashboard widgets showing issues data. */
    issueFilter: (Scalars['JSONObject'] | null)
    /** The filter applied to all dashboard widgets showing projects data. */
    projectFilter: (Scalars['JSONObject'] | null)
    /** The widgets on the dashboard. */
    widgets: Scalars['JSONObject']
    __typename: 'Dashboard'
}

export interface TeamConnection {
    edges: TeamEdge[]
    nodes: Team[]
    pageInfo: PageInfo
    __typename: 'TeamConnection'
}

export interface TeamEdge {
    node: Team
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'TeamEdge'
}

export interface UserConnection {
    edges: UserEdge[]
    nodes: User[]
    pageInfo: PageInfo
    __typename: 'UserConnection'
}

export interface UserEdge {
    node: User
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'UserEdge'
}

export interface ProjectUpdateConnection {
    edges: ProjectUpdateEdge[]
    nodes: ProjectUpdate[]
    pageInfo: PageInfo
    __typename: 'ProjectUpdateConnection'
}

export interface ProjectUpdateEdge {
    node: ProjectUpdate
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectUpdateEdge'
}

export interface DocumentConnection {
    edges: DocumentEdge[]
    nodes: Document[]
    pageInfo: PageInfo
    __typename: 'DocumentConnection'
}

export interface DocumentEdge {
    node: Document
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'DocumentEdge'
}

export interface ProjectMilestoneConnection {
    edges: ProjectMilestoneEdge[]
    nodes: ProjectMilestone[]
    pageInfo: PageInfo
    __typename: 'ProjectMilestoneConnection'
}

export interface ProjectMilestoneEdge {
    node: ProjectMilestone
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectMilestoneEdge'
}


/** A milestone for a project. */
export interface ProjectMilestone {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the project milestone. */
    name: Scalars['String']
    /** The content of the project milestone description. */
    documentContent: (DocumentContent | null)
    /** The planned completion date of the milestone. */
    targetDate: (Scalars['TimelessDate'] | null)
    /** The project of the milestone. */
    project: Project
    /** [Internal] The progress history of the project milestone. */
    progressHistory: Scalars['JSONObject']
    /** [Internal] The current progress of the project milestone. */
    currentProgress: Scalars['JSONObject']
    /** The order of the milestone in relation to other milestones within a project. */
    sortOrder: Scalars['Float']
    /** The project milestone's description in markdown format. */
    description: (Scalars['String'] | null)
    /** The status of the project milestone. */
    status: ProjectMilestoneStatus
    /** The progress % of the project milestone. */
    progress: Scalars['Float']
    /** [Internal] The project milestone's description as YJS state. */
    descriptionState: (Scalars['String'] | null)
    /** Issues associated with the project milestone. */
    issues: IssueConnection
    __typename: 'ProjectMilestone'
}


/** The status of a project milestone. */
export type ProjectMilestoneStatus = 'unstarted' | 'next' | 'overdue' | 'done'

export interface ProjectHistoryConnection {
    edges: ProjectHistoryEdge[]
    nodes: ProjectHistory[]
    pageInfo: PageInfo
    __typename: 'ProjectHistoryConnection'
}

export interface ProjectHistoryEdge {
    node: ProjectHistory
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectHistoryEdge'
}


/** An history associated with a project. */
export interface ProjectHistory {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The events that happened while recording that history. */
    entries: Scalars['JSONObject']
    /** The project that the history is associated with. */
    project: Project
    __typename: 'ProjectHistory'
}

export interface ProjectLabelConnection {
    edges: ProjectLabelEdge[]
    nodes: ProjectLabel[]
    pageInfo: PageInfo
    __typename: 'ProjectLabelConnection'
}

export interface ProjectLabelEdge {
    node: ProjectLabel
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectLabelEdge'
}

export interface ProjectRelationConnection {
    edges: ProjectRelationEdge[]
    nodes: ProjectRelation[]
    pageInfo: PageInfo
    __typename: 'ProjectRelationConnection'
}

export interface ProjectRelationEdge {
    node: ProjectRelation
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectRelationEdge'
}


/** A relation between two projects. */
export interface ProjectRelation {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The relationship of the project with the related project. */
    type: Scalars['String']
    /** The project whose relationship is being described. */
    project: Project
    /** The milestone within the project whose relationship is being described. */
    projectMilestone: (ProjectMilestone | null)
    /** The type of anchor on the project end of the relation. */
    anchorType: Scalars['String']
    /** The related project. */
    relatedProject: Project
    /** The milestone within the related project whose relationship is being described. */
    relatedProjectMilestone: (ProjectMilestone | null)
    /** The type of anchor on the relatedProject end of the relation. */
    relatedAnchorType: Scalars['String']
    /** The last user who created or modified the relation. */
    user: (User | null)
    __typename: 'ProjectRelation'
}

export interface CustomerNeedConnection {
    edges: CustomerNeedEdge[]
    nodes: CustomerNeed[]
    pageInfo: PageInfo
    __typename: 'CustomerNeedConnection'
}

export interface CustomerNeedEdge {
    node: CustomerNeed
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CustomerNeedEdge'
}


/** A customer need, expressed through a reference to an issue, project, or comment. */
export interface CustomerNeed {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The customer that this need is attached to. */
    customer: (Customer | null)
    /** The issue this need is referencing. */
    issue: (Issue | null)
    /** The project this need is referencing. */
    project: (Project | null)
    /** The comment this need is referencing. */
    comment: (Comment | null)
    /** The attachment this need is referencing. */
    attachment: (Attachment | null)
    /** The project attachment this need is referencing. */
    projectAttachment: (ProjectAttachment | null)
    /** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
    priority: Scalars['Float']
    /** The need content in markdown format. */
    body: (Scalars['String'] | null)
    /** [Internal] The content of the need as a Prosemirror document. */
    bodyData: (Scalars['String'] | null)
    /** The creator of the customer need. */
    creator: (User | null)
    /** The issue this customer need was originally created on. Will be undefined if the customer need hasn't been moved. */
    originalIssue: (Issue | null)
    /** The URL of the underlying attachment, if any */
    url: (Scalars['String'] | null)
    __typename: 'CustomerNeed'
}


/** Issue attachment (e.g. support ticket, pull request). */
export interface Attachment {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Content for the title line in the Linear attachment widget. */
    title: Scalars['String']
    /** Content for the subtitle line in the Linear attachment widget. */
    subtitle: (Scalars['String'] | null)
    /** Location of the attachment which is also used as an identifier. */
    url: Scalars['String']
    /** The creator of the attachment. */
    creator: (User | null)
    /** The non-Linear user who created the attachment. */
    externalUserCreator: (ExternalUser | null)
    /** Custom metadata related to the attachment. */
    metadata: Scalars['JSONObject']
    /** Information about the source which created the attachment. */
    source: (Scalars['JSONObject'] | null)
    /** An accessor helper to source.type, defines the source type of the attachment. */
    sourceType: (Scalars['String'] | null)
    /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
    groupBySource: Scalars['Boolean']
    /** The issue this attachment was originally created on. Will be undefined if the attachment hasn't been moved. */
    originalIssue: (Issue | null)
    /** The issue this attachment belongs to. */
    issue: Issue
    /** The body data of the attachment, if any. */
    bodyData: (Scalars['String'] | null)
    __typename: 'Attachment'
}


/** [INTERNAL] Project attachment */
export interface ProjectAttachment {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Title of the attachment. */
    title: Scalars['String']
    /** Optional subtitle of the attachment */
    subtitle: (Scalars['String'] | null)
    /** URL of the attachment. */
    url: Scalars['String']
    /** The creator of the attachment. */
    creator: (User | null)
    /** Custom metadata related to the attachment. */
    metadata: Scalars['JSONObject']
    /** Information about the external source which created the attachment. */
    source: (Scalars['JSONObject'] | null)
    /** An accessor helper to source.type, defines the source type of the attachment. */
    sourceType: (Scalars['String'] | null)
    __typename: 'ProjectAttachment'
}


/** A meeting that can be attached to different entities. */
export interface Meeting {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The meeting title. */
    title: Scalars['String']
    /** The location of the meeting. */
    location: (Scalars['String'] | null)
    /** The meeting link of the meeting. */
    meetingLink: (Scalars['String'] | null)
    /** Link to a recording of the meeting. */
    recordingLink: (Scalars['String'] | null)
    /** The icon of the meeting. */
    icon: (Scalars['String'] | null)
    /** The color of the icon. */
    color: (Scalars['String'] | null)
    /** The user who created the meeting. */
    creator: (User | null)
    /** The user who last updated the meeting. */
    updatedBy: (User | null)
    /** The project that the meeting is associated with. */
    project: (Project | null)
    /** [Internal] The initiative that the meeting is associated with. */
    initiative: (Initiative | null)
    /** The time at which the meeting is set to start. */
    startsAt: (Scalars['DateTime'] | null)
    /** The time at which the meeting is set to end. */
    endsAt: (Scalars['DateTime'] | null)
    /** The time at which the meeting was hidden. Null if the entity has not been hidden. */
    hiddenAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the meeting is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The order of the item in the resources list. */
    sortOrder: Scalars['Float']
    __typename: 'Meeting'
}


/** Linear supported integration services. */
export type IntegrationService = 'airbyte' | 'discord' | 'figma' | 'figmaPlugin' | 'front' | 'github' | 'githubEnterpriseServer' | 'githubCommit' | 'githubImport' | 'githubPersonal' | 'gitlab' | 'googleCalendarPersonal' | 'googleSheets' | 'intercom' | 'jira' | 'jiraPersonal' | 'launchDarkly' | 'launchDarklyPersonal' | 'loom' | 'notion' | 'opsgenie' | 'pagerDuty' | 'salesforce' | 'slack' | 'slackAsks' | 'slackCustomViewNotifications' | 'slackOrgProjectUpdatesPost' | 'slackOrgInitiativeUpdatesPost' | 'slackPersonal' | 'slackPost' | 'slackProjectPost' | 'slackProjectUpdatesPost' | 'slackInitiativePost' | 'sentry' | 'zendesk' | 'email'

export interface IssueHistoryConnection {
    edges: IssueHistoryEdge[]
    nodes: IssueHistory[]
    pageInfo: PageInfo
    __typename: 'IssueHistoryConnection'
}

export interface IssueHistoryEdge {
    node: IssueHistory
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueHistoryEdge'
}


/** A record of changes to an issue. */
export interface IssueHistory {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The issue that was changed. */
    issue: Issue
    /** The id of user who made these changes. If null, possibly means that the change made by an integration. */
    actorId: (Scalars['String'] | null)
    /** Whether the issue's description was updated. */
    updatedDescription: (Scalars['Boolean'] | null)
    /** What the title was changed from. */
    fromTitle: (Scalars['String'] | null)
    /** What the title was changed to. */
    toTitle: (Scalars['String'] | null)
    /** The id of user from whom the issue was re-assigned from. */
    fromAssigneeId: (Scalars['String'] | null)
    /** The id of user to whom the issue was assigned to. */
    toAssigneeId: (Scalars['String'] | null)
    /** What the priority was changed from. */
    fromPriority: (Scalars['Float'] | null)
    /** What the priority was changed to. */
    toPriority: (Scalars['Float'] | null)
    /** The id of team from which the issue was moved from. */
    fromTeamId: (Scalars['String'] | null)
    /** The id of team to which the issue was moved to. */
    toTeamId: (Scalars['String'] | null)
    /** The id of previous parent of the issue. */
    fromParentId: (Scalars['String'] | null)
    /** The id of new parent of the issue. */
    toParentId: (Scalars['String'] | null)
    /** The id of previous workflow state of the issue. */
    fromStateId: (Scalars['String'] | null)
    /** The id of new workflow state of the issue. */
    toStateId: (Scalars['String'] | null)
    /** The id of previous cycle of the issue. */
    fromCycleId: (Scalars['String'] | null)
    /** The id of new cycle of the issue. */
    toCycleId: (Scalars['String'] | null)
    /** The id of new project created from the issue. */
    toConvertedProjectId: (Scalars['String'] | null)
    /** The id of previous project of the issue. */
    fromProjectId: (Scalars['String'] | null)
    /** The id of new project of the issue. */
    toProjectId: (Scalars['String'] | null)
    /** What the estimate was changed from. */
    fromEstimate: (Scalars['Float'] | null)
    /** What the estimate was changed to. */
    toEstimate: (Scalars['Float'] | null)
    /** Whether the issue is archived at the time of this history entry. */
    archived: (Scalars['Boolean'] | null)
    /** Whether the issue was trashed or un-trashed. */
    trashed: (Scalars['Boolean'] | null)
    /** The id of linked attachment. */
    attachmentId: (Scalars['String'] | null)
    /** ID's of labels that were added. */
    addedLabelIds: (Scalars['String'][] | null)
    /** ID's of labels that were removed. */
    removedLabelIds: (Scalars['String'][] | null)
    /** Changed issue relationships. */
    relationChanges: (IssueRelationHistoryPayload[] | null)
    /** Whether the issue was auto-closed. */
    autoClosed: (Scalars['Boolean'] | null)
    /** Whether the issue was auto-archived. */
    autoArchived: (Scalars['Boolean'] | null)
    /** What the due date was changed from. */
    fromDueDate: (Scalars['TimelessDate'] | null)
    /** What the due date was changed to. */
    toDueDate: (Scalars['TimelessDate'] | null)
    /** The id of linked customer need. */
    customerNeedId: (Scalars['String'] | null)
    /** [Internal] Serialized JSON representing changes for certain non-relational properties. */
    changes: (Scalars['JSONObject'] | null)
    /** The actor that performed the actions. This field may be empty in the case of integrations or automations. */
    actor: (User | null)
    /**
     * @deprecated Use `actor` and `descriptionUpdatedBy` instead.
     * The actors that performed the actions. This field may be empty in the case of integrations or automations.
     */
    actors: (User[] | null)
    /** The actors that edited the description of the issue, if any. */
    descriptionUpdatedBy: (User[] | null)
    /** The user that was unassigned from the issue. */
    fromAssignee: (User | null)
    /** The user that was assigned to the issue. */
    toAssignee: (User | null)
    /** The cycle that the issue was moved from. */
    fromCycle: (Cycle | null)
    /** The cycle that the issue was moved to. */
    toCycle: (Cycle | null)
    /** The new project created from the issue. */
    toConvertedProject: (Project | null)
    /** The project that the issue was moved from. */
    fromProject: (Project | null)
    /** The project that the issue was moved to. */
    toProject: (Project | null)
    /** The state that the issue was moved from. */
    fromState: (WorkflowState | null)
    /** The state that the issue was moved to. */
    toState: (WorkflowState | null)
    /** The team that the issue was moved from. */
    fromTeam: (Team | null)
    /** The team that the issue was moved to. */
    toTeam: (Team | null)
    /** The parent issue that the issue was moved from. */
    fromParent: (Issue | null)
    /** The parent issue that the issue was moved to. */
    toParent: (Issue | null)
    /** The linked attachment. */
    attachment: (Attachment | null)
    /** The import record. */
    issueImport: (IssueImport | null)
    /** The users that were notified of the issue. */
    triageResponsibilityNotifiedUsers: (User[] | null)
    /** The bot that performed the action. */
    botActor: (ActorBot | null)
    /** The labels that were added to the issue. */
    addedLabels: (IssueLabel[] | null)
    /** The labels that were removed from the issue. */
    removedLabels: (IssueLabel[] | null)
    __typename: 'IssueHistory'
}


/** Issue relation history's payload. */
export interface IssueRelationHistoryPayload {
    /** The identifier of the related issue. */
    identifier: Scalars['String']
    /** The type of the change. */
    type: Scalars['String']
    __typename: 'IssueRelationHistoryPayload'
}


/** An import job for data from an external service. */
export interface IssueImport {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** New team's name in cases when teamId not set. */
    teamName: (Scalars['String'] | null)
    /** The id for the user that started the job. */
    creatorId: Scalars['String']
    /** The service from which data will be imported. */
    service: Scalars['String']
    /** The status for the import job. */
    status: Scalars['String']
    /** The data mapping configuration for the import job. */
    mapping: (Scalars['JSONObject'] | null)
    /** User readable error message, if one has occurred during the import. */
    error: (Scalars['String'] | null)
    /** Current step progress in % (0-100). */
    progress: (Scalars['Float'] | null)
    /** File URL for the uploaded CSV for the import, if there is one. */
    csvFileUrl: (Scalars['String'] | null)
    /** Error code and metadata, if one has occurred during the import. */
    errorMetadata: (Scalars['JSONObject'] | null)
    /** Metadata related to import service. */
    serviceMetadata: (Scalars['JSONObject'] | null)
    /** The display name of the import service. */
    displayName: Scalars['String']
    __typename: 'IssueImport'
}

export interface IssueRelationConnection {
    edges: IssueRelationEdge[]
    nodes: IssueRelation[]
    pageInfo: PageInfo
    __typename: 'IssueRelationConnection'
}

export interface IssueRelationEdge {
    node: IssueRelation
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueRelationEdge'
}


/** A relation between two issues. */
export interface IssueRelation {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The relationship of the issue with the related issue. */
    type: Scalars['String']
    /** The issue whose relationship is being described. */
    issue: Issue
    /** The related issue. */
    relatedIssue: Issue
    __typename: 'IssueRelation'
}

export interface AttachmentConnection {
    edges: AttachmentEdge[]
    nodes: Attachment[]
    pageInfo: PageInfo
    __typename: 'AttachmentConnection'
}

export interface AttachmentEdge {
    node: Attachment
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'AttachmentEdge'
}

export interface IssueSuggestionConnection {
    edges: IssueSuggestionEdge[]
    nodes: IssueSuggestion[]
    pageInfo: PageInfo
    __typename: 'IssueSuggestionConnection'
}

export interface IssueSuggestionEdge {
    node: IssueSuggestion
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueSuggestionEdge'
}

export interface IssueSuggestion {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    issue: Issue
    issueId: Scalars['String']
    type: IssueSuggestionType
    state: IssueSuggestionState
    stateChangedAt: Scalars['DateTime']
    metadata: (IssueSuggestionMetadata | null)
    suggestedIssue: (Issue | null)
    suggestedIssueId: (Scalars['String'] | null)
    suggestedTeam: (Team | null)
    suggestedProject: (Project | null)
    suggestedUser: (User | null)
    suggestedUserId: (Scalars['String'] | null)
    suggestedLabel: (IssueLabel | null)
    suggestedLabelId: (Scalars['String'] | null)
    __typename: 'IssueSuggestion'
}

export type IssueSuggestionType = 'team' | 'project' | 'assignee' | 'label' | 'similarIssue' | 'relatedIssue'

export type IssueSuggestionState = 'active' | 'stale' | 'accepted' | 'dismissed'

export interface IssueSuggestionMetadata {
    score: (Scalars['Float'] | null)
    classification: (Scalars['String'] | null)
    reasons: (Scalars['String'][] | null)
    evalLogId: (Scalars['String'] | null)
    __typename: 'IssueSuggestionMetadata'
}

export interface CycleConnection {
    edges: CycleEdge[]
    nodes: Cycle[]
    pageInfo: PageInfo
    __typename: 'CycleConnection'
}

export interface CycleEdge {
    node: Cycle
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CycleEdge'
}


/** A team's triage responsibility. */
export interface TriageResponsibility {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The action to take when an issue is added to triage. */
    action: TriageResponsibilityAction
    /** Set of users used for triage responsibility. */
    manualSelection: (TriageResponsibilityManualSelection | null)
    /** The team to which the triage responsibility belongs to. */
    team: Team
    /** The time schedule used for scheduling. */
    timeSchedule: (TimeSchedule | null)
    /** The user currently responsible for triage. */
    currentUser: (User | null)
    __typename: 'TriageResponsibility'
}


/** Which action should be taken after an issue is added to triage. */
export type TriageResponsibilityAction = 'assign' | 'notify'

export interface TriageResponsibilityManualSelection {
    /** The set of users responsible for triage. */
    userIds: Scalars['String'][]
    /** [Internal] The index of the current userId used for the assign action when having more than one user. */
    assignmentIndex: (Scalars['Int'] | null)
    __typename: 'TriageResponsibilityManualSelection'
}


/** A time schedule. */
export interface TimeSchedule {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The name of the schedule. */
    name: Scalars['String']
    /** The schedule entries. */
    entries: (TimeScheduleEntry[] | null)
    /** The identifier of the external schedule. */
    externalId: (Scalars['String'] | null)
    /** The URL to the external schedule. */
    externalUrl: (Scalars['String'] | null)
    /** The organization of the schedule. */
    organization: Organization
    /** The identifier of the Linear integration populating the schedule. */
    integration: (Integration | null)
    __typename: 'TimeSchedule'
}

export interface TimeScheduleEntry {
    /** The start date of the schedule in ISO 8601 date-time format. */
    startsAt: Scalars['DateTime']
    /** The end date of the schedule in ISO 8601 date-time format. */
    endsAt: Scalars['DateTime']
    /** The Linear user id of the user on schedule. If the user cannot be mapped to a Linear user then `userEmail` can be used as a reference. */
    userId: (Scalars['String'] | null)
    /** The email, name or reference to the user on schedule. This is used in case the external user could not be mapped to a Linear user id. */
    userEmail: (Scalars['String'] | null)
    __typename: 'TimeScheduleEntry'
}


/** Defines the membership of a user to a team. */
export interface TeamMembership {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that the membership is associated with. */
    user: User
    /** The team that the membership is associated with. */
    team: Team
    /** Whether the user is the owner of the team. */
    owner: Scalars['Boolean']
    /** The order of the item in the users team list. */
    sortOrder: Scalars['Float']
    __typename: 'TeamMembership'
}

export interface TeamMembershipConnection {
    edges: TeamMembershipEdge[]
    nodes: TeamMembership[]
    pageInfo: PageInfo
    __typename: 'TeamMembershipConnection'
}

export interface TeamMembershipEdge {
    node: TeamMembership
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'TeamMembershipEdge'
}

export interface WorkflowStateConnection {
    edges: WorkflowStateEdge[]
    nodes: WorkflowState[]
    pageInfo: PageInfo
    __typename: 'WorkflowStateConnection'
}

export interface WorkflowStateEdge {
    node: WorkflowState
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'WorkflowStateEdge'
}

export interface GitAutomationStateConnection {
    edges: GitAutomationStateEdge[]
    nodes: GitAutomationState[]
    pageInfo: PageInfo
    __typename: 'GitAutomationStateConnection'
}

export interface GitAutomationStateEdge {
    node: GitAutomationState
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'GitAutomationStateEdge'
}


/** A trigger that updates the issue status according to Git automations. */
export interface GitAutomationState {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The associated workflow state. */
    state: (WorkflowState | null)
    /** The team to which this automation state belongs. */
    team: Team
    /** The target branch associated to this automation state. */
    targetBranch: (GitAutomationTargetBranch | null)
    /** The event that triggers the automation. */
    event: GitAutomationStates
    /**
     * @deprecated Use targetBranch instead.
     * [DEPRECATED] The target branch, if null, the automation will be triggered on any branch.
     */
    branchPattern: (Scalars['String'] | null)
    __typename: 'GitAutomationState'
}


/** A Git target branch for which there are automations (GitAutomationState). */
export interface GitAutomationTargetBranch {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The team to which this Git target branch automation belongs. */
    team: Team
    /** The target branch pattern. */
    branchPattern: Scalars['String']
    /** Whether the branch pattern is a regular expression. */
    isRegex: Scalars['Boolean']
    /** Automation states associated with the target branch. */
    automationStates: GitAutomationStateConnection
    __typename: 'GitAutomationTargetBranch'
}


/** The various states of a pull/merge request. */
export type GitAutomationStates = 'draft' | 'start' | 'review' | 'mergeable' | 'merge'

export interface TemplateConnection {
    edges: TemplateEdge[]
    nodes: Template[]
    pageInfo: PageInfo
    __typename: 'TemplateConnection'
}

export interface TemplateEdge {
    node: Template
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'TemplateEdge'
}

export interface WebhookConnection {
    edges: WebhookEdge[]
    nodes: Webhook[]
    pageInfo: PageInfo
    __typename: 'WebhookConnection'
}

export interface WebhookEdge {
    node: Webhook
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'WebhookEdge'
}


/** A webhook used to send HTTP notifications over data updates. */
export interface Webhook {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Webhook label. */
    label: (Scalars['String'] | null)
    /** Webhook URL. */
    url: (Scalars['String'] | null)
    /** Whether the Webhook is enabled. */
    enabled: Scalars['Boolean']
    /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization or multiple teams. */
    team: (Team | null)
    /** [INTERNAL] The teams that the webhook is associated with. Used to represent a webhook that targets multiple teams, potentially in addition to all public teams of the organization. */
    teamIds: (Scalars['String'][] | null)
    /** Whether the Webhook is enabled for all public teams, including teams created after the webhook was created. */
    allPublicTeams: Scalars['Boolean']
    /** The user who created the webhook. */
    creator: (User | null)
    /** Secret token for verifying the origin on the recipient side. */
    secret: (Scalars['String'] | null)
    /** The resource types this webhook is subscribed to. */
    resourceTypes: Scalars['String'][]
    /** [INTERNAL] Webhook failure events associated with the webhook (last 50). */
    failures: WebhookFailureEvent[]
    __typename: 'Webhook'
}


/** Entity representing a webhook execution failure. */
export interface WebhookFailureEvent {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /** The webhook that this failure event is associated with. */
    webhook: Webhook
    /** The URL that the webhook was trying to push to. */
    url: Scalars['String']
    /** The HTTP status code returned by the recipient. */
    httpStatus: (Scalars['Float'] | null)
    /** The HTTP response body returned by the recipient or error occured. */
    responseOrError: (Scalars['String'] | null)
    /** The unique execution ID of the webhook push. This is retained between retries of the same push. */
    executionId: Scalars['String']
    __typename: 'WebhookFailureEvent'
}

export type FacetPageSource = 'projects' | 'teamIssues' | 'feed'

export interface OrganizationIpRestriction {
    /** IP range in CIDR format. */
    range: Scalars['String']
    /** Restriction type. */
    type: Scalars['String']
    /** Optional restriction description. */
    description: (Scalars['String'] | null)
    /** Whether the restriction is enabled. */
    enabled: Scalars['Boolean']
    __typename: 'OrganizationIpRestriction'
}


/** Features release channel. */
export type ReleaseChannel = 'development' | 'internal' | 'beta' | 'preRelease' | 'public'

export type SLADayCountType = 'all' | 'onlyBusinessDays'


/** The frequency at which to send project update reminders. */
export type ProjectUpdateReminderFrequency = 'week' | 'twoWeeks' | 'month' | 'never'

export interface IntegrationConnection {
    edges: IntegrationEdge[]
    nodes: Integration[]
    pageInfo: PageInfo
    __typename: 'IntegrationConnection'
}

export interface IntegrationEdge {
    node: Integration
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IntegrationEdge'
}


/** The paid subscription of an organization. */
export interface PaidSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The subscription type. */
    type: Scalars['String']
    /** The number of seats in the subscription. */
    seats: Scalars['Float']
    /** The minimum number of seats that will be billed in the subscription. */
    seatsMinimum: (Scalars['Float'] | null)
    /** The maximum number of seats that will be billed in the subscription. */
    seatsMaximum: (Scalars['Float'] | null)
    /** The creator of the subscription. */
    creator: (User | null)
    /** The organization that the subscription is associated with. */
    organization: Organization
    /** The collection method for this subscription, either automatically charged or invoiced. */
    collectionMethod: Scalars['String']
    /** The date the subscription was canceled, if any. */
    canceledAt: (Scalars['DateTime'] | null)
    /** The date the subscription is scheduled to be canceled, if any. */
    cancelAt: (Scalars['DateTime'] | null)
    /** The subscription type of a pending change. Null if no change pending. */
    pendingChangeType: (Scalars['String'] | null)
    /** The date the subscription will be billed next. */
    nextBillingAt: (Scalars['DateTime'] | null)
    __typename: 'PaidSubscription'
}

export interface IssueDraftConnection {
    edges: IssueDraftEdge[]
    nodes: IssueDraft[]
    pageInfo: PageInfo
    __typename: 'IssueDraftConnection'
}

export interface IssueDraftEdge {
    node: IssueDraft
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueDraftEdge'
}


/** [Internal] A draft issue. */
export interface IssueDraft {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The draft's title. */
    title: Scalars['String']
    /** The draft's description in markdown format. */
    description: (Scalars['String'] | null)
    /** The priority of the draft. */
    priority: Scalars['Float']
    /** The estimate of the complexity of the draft. */
    estimate: (Scalars['Float'] | null)
    /** The date at which the issue would be due. */
    dueDate: (Scalars['TimelessDate'] | null)
    /** The IDs of labels added to the draft. */
    labelIds: Scalars['String'][]
    /** The team associated with the draft. */
    teamId: Scalars['String']
    /** The cycle associated with the draft. */
    cycleId: (Scalars['String'] | null)
    /** The project associated with the draft. */
    projectId: (Scalars['String'] | null)
    /** The project milestone associated with the draft. */
    projectMilestoneId: (Scalars['String'] | null)
    /** The user who created the draft. */
    creator: User
    /** The user assigned to the draft. */
    assigneeId: (Scalars['String'] | null)
    /** The workflow state associated with the draft. */
    stateId: Scalars['String']
    /** The parent draft of the draft. */
    parent: (IssueDraft | null)
    /** The ID of the parent issue draft, if any. */
    parentId: (Scalars['String'] | null)
    /** The ID of the comment that the draft was created from. */
    sourceCommentId: (Scalars['String'] | null)
    /** The parent issue of the draft. */
    parentIssue: (Issue | null)
    /** The ID of the parent issue, if any. */
    parentIssueId: (Scalars['String'] | null)
    /** The order of items in the sub-draft list. Only set if the draft has `parent` set. */
    subIssueSortOrder: (Scalars['Float'] | null)
    /** Label for the priority. */
    priorityLabel: Scalars['String']
    /** [Internal] The draft's description as a Prosemirror document. */
    descriptionData: (Scalars['JSON'] | null)
    /** Serialized array of JSONs representing attachments. */
    attachments: (Scalars['JSONObject'] | null)
    /** Serialized array of JSONs representing customer needs. */
    needs: (Scalars['JSONObject'] | null)
    /** Serialized array of JSONs representing the recurring issue's schedule. */
    schedule: (Scalars['JSONObject'] | null)
    __typename: 'IssueDraft'
}

export interface DraftConnection {
    edges: DraftEdge[]
    nodes: Draft[]
    pageInfo: PageInfo
    __typename: 'DraftConnection'
}

export interface DraftEdge {
    node: Draft
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'DraftEdge'
}


/** A general purpose draft. Used for comments, project updates, etc. */
export interface Draft {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The text content as a Prosemirror document. */
    bodyData: Scalars['JSON']
    /** Additional properties for the draft. */
    data: (Scalars['JSONObject'] | null)
    /** Whether the draft was autogenerated for the user. */
    isAutogenerated: Scalars['Boolean']
    /** [INTERNAL] Whether the draft was ported from a local draft. */
    wasLocalDraft: Scalars['Boolean']
    /** The user who created the draft. */
    user: User
    /** The issue for which this is a draft comment. */
    issue: (Issue | null)
    /** The project for which this is a draft project update. */
    project: (Project | null)
    /** The project update for which this is a draft comment. */
    projectUpdate: (ProjectUpdate | null)
    /** The initiative for which this is a draft initiative update. */
    initiative: (Initiative | null)
    /** The initiative update for which this is a draft comment. */
    initiativeUpdate: (InitiativeUpdate | null)
    /** The post for which this is a draft comment. */
    post: (Post | null)
    /** The comment for which this is a draft comment reply. */
    parentComment: (Comment | null)
    /** The customer need that this draft is referencing. */
    customerNeed: (CustomerNeed | null)
    __typename: 'Draft'
}

export type UserContextViewType = 'assigned'


/** A custom view notification subscription. */
export interface CustomViewNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The custom view subscribed to. */
    customView: CustomView
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'CustomViewNotificationSubscription'
}


/** A cycle notification subscription. */
export interface CycleNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The cycle subscribed to. */
    cycle: Cycle
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'CycleNotificationSubscription'
}


/** A label notification subscription. */
export interface LabelNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The label subscribed to. */
    label: IssueLabel
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'LabelNotificationSubscription'
}


/** A project notification subscription. */
export interface ProjectNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The project subscribed to. */
    project: Project
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'ProjectNotificationSubscription'
}


/** An initiative notification subscription. */
export interface InitiativeNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The initiative subscribed to. */
    initiative: Initiative
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'InitiativeNotificationSubscription'
}


/** A team notification subscription. */
export interface TeamNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team subscribed to. */
    team: Team
    /** The user view associated with the notification subscription. */
    user: (User | null)
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'TeamNotificationSubscription'
}


/** A user notification subscription. */
export interface UserNotificationSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that subscribed to receive notifications. */
    subscriber: User
    /** The customer associated with the notification subscription. */
    customer: (Customer | null)
    /** The contextual custom view associated with the notification subscription. */
    customView: (CustomView | null)
    /** The contextual cycle view associated with the notification subscription. */
    cycle: (Cycle | null)
    /** The contextual label view associated with the notification subscription. */
    label: (IssueLabel | null)
    /** The contextual project view associated with the notification subscription. */
    project: (Project | null)
    /** The contextual initiative view associated with the notification subscription. */
    initiative: (Initiative | null)
    /** The team associated with the notification subscription. */
    team: (Team | null)
    /** The user subscribed to. */
    user: User
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType: (ContextViewType | null)
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType: (UserContextViewType | null)
    /** Whether the subscription is active or not. */
    active: Scalars['Boolean']
    /** The type of subscription. */
    notificationSubscriptionTypes: Scalars['String'][]
    __typename: 'UserNotificationSubscription'
}


/** An issue related notification. */
export interface IssueNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related issue ID. */
    issueId: Scalars['String']
    /** The issue related to the notification. */
    issue: Issue
    /** The comment related to the notification. */
    comment: (Comment | null)
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment: (Comment | null)
    /** The team related to the issue notification. */
    team: Team
    /** The subscriptions related to the notification. */
    subscriptions: (NotificationSubscription[] | null)
    __typename: 'IssueNotification'
}


/** A notification sent to a user. */
export type Notification = (IssueNotification | ProjectNotification | InitiativeNotification | OauthClientApprovalNotification | DocumentNotification | PostNotification | CustomerNeedNotification | PullRequestNotification) & { __isUnion?: true }


/** A project related notification. */
export interface ProjectNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related project ID. */
    projectId: Scalars['String']
    /** Related project milestone ID. */
    projectMilestoneId: (Scalars['String'] | null)
    /** Related project update ID. */
    projectUpdateId: (Scalars['String'] | null)
    /** The project related to the notification. */
    project: Project
    /** The initiative related to the notification. */
    initiative: (Initiative | null)
    /** The document related to the notification. */
    document: (Document | null)
    /** The project update related to the notification. */
    projectUpdate: (ProjectUpdate | null)
    /** The initiative update related to the notification. */
    initiativeUpdate: (InitiativeUpdate | null)
    /** The comment related to the notification. */
    comment: (Comment | null)
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment: (Comment | null)
    __typename: 'ProjectNotification'
}


/** An initiative related notification. */
export interface InitiativeNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related initiative ID. */
    initiativeId: Scalars['String']
    /** Related initiative update ID. */
    initiativeUpdateId: (Scalars['String'] | null)
    __typename: 'InitiativeNotification'
}


/** An oauth client approval related notification. */
export interface OauthClientApprovalNotification {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related OAuth client approval request ID. */
    oauthClientApprovalId: Scalars['String']
    /** The OAuth client approval request related to the notification. */
    oauthClientApproval: OauthClientApproval
    __typename: 'OauthClientApprovalNotification'
}


/** Request to install OAuth clients on organizations and the response to the request. */
export interface OauthClientApproval {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The uuid of the OAuth client being requested for installation. */
    oauthClientId: Scalars['String']
    /** The person who requested installing the OAuth client. */
    requesterId: Scalars['String']
    /** The person who responded to the request to install the OAuth client. */
    responderId: (Scalars['String'] | null)
    /** The status for the OAuth client approval request. */
    status: OAuthClientApprovalStatus
    /** The scopes the app has requested. */
    scopes: Scalars['String'][]
    /** The reason the person wants to install this OAuth client. */
    requestReason: (Scalars['String'] | null)
    /** The reason the request for the OAuth client approval was denied. */
    denyReason: (Scalars['String'] | null)
    __typename: 'OauthClientApproval'
}


/** The different requests statuses possible for an OAuth client approval request. */
export type OAuthClientApprovalStatus = 'requested' | 'approved' | 'denied'


/** A document related notification. */
export interface DocumentNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related document ID. */
    documentId: Scalars['String']
    __typename: 'DocumentNotification'
}


/** [Internal] A post related notification. */
export interface PostNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related post ID. */
    postId: Scalars['String']
    __typename: 'PostNotification'
}


/** [Internal] A customer need related notification. */
export interface CustomerNeedNotification {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related customer need. */
    customerNeedId: Scalars['String']
    /** The issue related to the notification. */
    relatedIssue: (Issue | null)
    /** The project related to the notification. */
    relatedProject: (Project | null)
    __typename: 'CustomerNeedNotification'
}


/** [Internal] A pull request related notification. */
export interface PullRequestNotification {
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId: (Scalars['String'] | null)
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId: (Scalars['String'] | null)
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji: (Scalars['String'] | null)
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Notification type. */
    type: Scalars['String']
    /** The user that caused the notification. */
    actor: (User | null)
    /** The external user that caused the notification. */
    externalUserActor: (ExternalUser | null)
    /** The user that received the notification. */
    user: User
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt: (Scalars['DateTime'] | null)
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt: (Scalars['DateTime'] | null)
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt: (Scalars['DateTime'] | null)
    /** [Internal] URL to the target of the notification. */
    url: Scalars['String']
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars['String']
    /** [Internal] Notification title. */
    title: Scalars['String']
    /** [Internal] Notification subtitle. */
    subtitle: Scalars['String']
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars['Boolean']
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials: (Scalars['String'] | null)
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars['String']
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType: (Scalars['String'] | null)
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth: (Scalars['String'] | null)
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars['String']
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars['Float']
    /** The bot that caused the notification. */
    botActor: (ActorBot | null)
    /** Related pull request. */
    pullRequestId: Scalars['String']
    /** The pull request related to the notification. */
    pullRequest: PullRequest
    __typename: 'PullRequestNotification'
}


/** [Internal] A pull request in a version control system. */
export interface PullRequest {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The title of the pull request. */
    title: Scalars['String']
    /** The number of the pull request in the version control system. */
    number: Scalars['Float']
    /** The source branch of the pull request. */
    sourceBranch: Scalars['String']
    /** The target branch of the pull request. */
    targetBranch: Scalars['String']
    /** The URL of the pull request in the version control system. */
    url: Scalars['String']
    /** The status of the pull request. */
    status: PullRequestStatus
    __typename: 'PullRequest'
}


/** The status of a pull request. */
export type PullRequestStatus = 'draft' | 'open' | 'inReview' | 'approved' | 'merged' | 'closed'

export interface Query {
    /** All issue workflow states. */
    workflowStates: WorkflowStateConnection
    /** One specific state. */
    workflowState: WorkflowState
    /** All webhooks. */
    webhooks: WebhookConnection
    /** A specific webhook. */
    webhook: Webhook
    /** [INTERNAL] Webhook failure events for webhooks that belong to an OAuth application. (last 50) */
    failuresForOauthWebhooks: WebhookFailureEvent[]
    /** The user's settings. */
    userSettings: UserSettings
    /** All users for the organization. */
    users: UserConnection
    /** One specific user. */
    user: User
    /** The currently authenticated user. */
    viewer: User
    /** All triage responsibilities. */
    triageResponsibilities: TriageResponsibilityConnection
    /** A specific triage responsibility. */
    triageResponsibility: TriageResponsibility
    /** All time schedules. */
    timeSchedules: TimeScheduleConnection
    /** A specific time schedule. */
    timeSchedule: TimeSchedule
    /** All templates from all users. */
    templates: Template[]
    /** A specific template. */
    template: Template
    /** Returns all templates that are associated with the integration type. */
    templatesForIntegration: Template[]
    /** All projects. */
    projects: ProjectConnection
    /** One specific project. */
    project: Project
    /** Suggests filters for a project view based on a text prompt. */
    projectFilterSuggestion: ProjectFilterSuggestionPayload
    /** All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user. */
    teams: TeamConnection
    /** All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to. */
    administrableTeams: TeamConnection
    /** One specific team. */
    team: Team
    /** All team memberships. */
    teamMemberships: TeamMembershipConnection
    /** One specific team membership. */
    teamMembership: TeamMembership
    /** [ALPHA] Search for various resources using natural language. */
    semanticSearch: SemanticSearchPayload
    /** Search documents. */
    searchDocuments: DocumentSearchPayload
    /** Search projects. */
    searchProjects: ProjectSearchPayload
    /** Search issues. */
    searchIssues: IssueSearchPayload
    /** Custom views for the user. */
    roadmapToProjects: RoadmapToProjectConnection
    /** One specific roadmapToProject. */
    roadmapToProject: RoadmapToProject
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * All roadmaps in the workspace.
     */
    roadmaps: RoadmapConnection
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * One specific roadmap.
     */
    roadmap: Roadmap
    /** The status of the rate limiter. */
    rateLimitStatus: RateLimitPayload
    /** Sends a test push message. */
    pushSubscriptionTest: PushSubscriptionTestPayload
    /** All project updates. */
    projectUpdates: ProjectUpdateConnection
    /** A specific project update. */
    projectUpdate: ProjectUpdate
    /** [Internal] AI summary of the latest project updates for the given projects */
    summarizeProjectUpdates: SummaryPayload
    /** All project statuses. */
    projectStatuses: ProjectStatusConnection
    /** [INTERNAL] Count of projects using this project status across the organization. */
    projectStatusProjectCount: ProjectStatusCountPayload
    /** One specific project status. */
    projectStatus: ProjectStatus
    /** All project relationships. */
    projectRelations: ProjectRelationConnection
    /** One specific project relation. */
    projectRelation: ProjectRelation
    /** All milestones for the project. */
    projectMilestones: ProjectMilestoneConnection
    /** One specific project milestone. */
    projectMilestone: ProjectMilestone
    /** The user's organization. */
    organization: Organization
    /** Does the organization exist. */
    organizationExists: OrganizationExistsPayload
    /** [Internal] All archived teams of the organization. */
    archivedTeams: Team[]
    /** [INTERNAL] Get organization metadata by urlKey or organization id. */
    organizationMeta: (OrganizationMeta | null)
    /** All invites for the organization. */
    organizationInvites: OrganizationInviteConnection
    /** One specific organization invite. */
    organizationInvite: OrganizationInvite
    /** One specific organization invite. */
    organizationInviteDetails: OrganizationInviteDetailsPayload
    /** [INTERNAL] Checks whether the domain can be claimed. */
    organizationDomainClaimRequest: OrganizationDomainClaimPayload
    /** The user's notification subscriptions. */
    notificationSubscriptions: NotificationSubscriptionConnection
    /** One specific notification subscription. */
    notificationSubscription: NotificationSubscription
    /** All notifications. */
    notifications: NotificationConnection
    /** [Internal] A number of unread notifications. */
    notificationsUnreadCount: Scalars['Int']
    /** One specific notification. */
    notification: Notification
    /** All issues. */
    issues: IssueConnection
    /** One specific issue. */
    issue: Issue
    /** [DEPRECATED] Search issues. This endpoint is deprecated and will be removed in the future – use `searchIssues` instead. */
    issueSearch: IssueConnection
    /** Find issue based on the VCS branch name. */
    issueVcsBranchSearch: (Issue | null)
    /** Find issues that are related to a given Figma file key. */
    issueFigmaFileKeySearch: IssueConnection
    /** Issue priority values and corresponding labels. */
    issuePriorityValues: IssuePriorityValue[]
    /** Suggests filters for an issue view based on a text prompt. */
    issueFilterSuggestion: IssueFilterSuggestionPayload
    /** All issue relationships. */
    issueRelations: IssueRelationConnection
    /** One specific issue relation. */
    issueRelation: IssueRelation
    /** All issue labels. */
    issueLabels: IssueLabelConnection
    /** One specific label. */
    issueLabel: IssueLabel
    /** Checks a CSV file validity against a specific import service. */
    issueImportCheckCSV: IssueImportCheckPayload
    /** Checks whether it will be possible to setup sync for this project or repository at the end of import */
    issueImportCheckSync: IssueImportSyncCheckPayload
    /** Checks whether a custom JQL query is valid and can be used to filter issues of a Jira import */
    issueImportJqlCheck: IssueImportJqlCheckPayload
    /** One specific set of settings. */
    integrationsSettings: IntegrationsSettings
    /** Template and integration connections. */
    integrationTemplates: IntegrationTemplateConnection
    /** One specific integrationTemplate. */
    integrationTemplate: IntegrationTemplate
    /** All integrations. */
    integrations: IntegrationConnection
    /** One specific integration. */
    integration: Integration
    /** Verify that we received the correct response from the GitHub Enterprise Server. */
    verifyGitHubEnterpriseServerInstallation: GitHubEnterpriseServerInstallVerificationPayload
    /** Checks if the integration has all required scopes. */
    integrationHasScopes: IntegrationHasScopesPayload
    /** All  InitiativeUpdates. */
    initiativeUpdates: InitiativeUpdateConnection
    /** A specific  initiative update. */
    initiativeUpdate: InitiativeUpdate
    /** returns a list of initiative to project entities. */
    initiativeToProjects: InitiativeToProjectConnection
    /** One specific initiativeToProject. */
    initiativeToProject: InitiativeToProject
    /** All initiatives in the workspace. */
    initiatives: InitiativeConnection
    /** One specific initiative. */
    initiative: Initiative
    /** All initiative relationships. */
    initiativeRelations: InitiativeRelationConnection
    /** One specific initiative relation. */
    initiativeRelation: ProjectRelation
    /** The user's favorites. */
    favorites: FavoriteConnection
    /** One specific favorite. */
    favorite: Favorite
    /** All external users for the organization. */
    externalUsers: ExternalUserConnection
    /** One specific external user. */
    externalUser: ExternalUser
    /** One specific entity link. */
    entityExternalLink: EntityExternalLink
    /** All custom emojis. */
    emojis: EmojiConnection
    /** A specific emoji. */
    emoji: Emoji
    /** All documents in the workspace. */
    documents: DocumentConnection
    /** One specific document. */
    document: Document
    /** A collection of document content history entries. */
    documentContentHistory: DocumentContentHistoryPayload
    /** All cycles. */
    cycles: CycleConnection
    /** One specific cycle. */
    cycle: Cycle
    /** All customer tiers. */
    customerTiers: CustomerTierConnection
    /** One specific customer tier. */
    customerTier: CustomerTier
    /** All customer statuses. */
    customerStatuses: CustomerStatusConnection
    /** One specific customer status. */
    customerStatus: CustomerStatus
    /** All customers. */
    customers: CustomerConnection
    /** One specific customer. */
    customer: Customer
    /** All customer needs. */
    customerNeeds: CustomerNeedConnection
    /** One specific customer need */
    customerNeed: CustomerNeed
    /** Suggests issue title based on a customer request. */
    issueTitleSuggestionFromCustomerRequest: IssueTitleSuggestionFromCustomerRequestPayload
    /** Custom views for the user. */
    customViews: CustomViewConnection
    /** One specific custom view. */
    customView: CustomView
    /** [INTERNAL] Suggests metadata for a view based on it's filters. */
    customViewDetailsSuggestion: CustomViewSuggestionPayload
    /** Whether a custom view has other subscribers than the current user in the organization. */
    customViewHasSubscribers: CustomViewHasSubscribersPayload
    /** All comments. */
    comments: CommentConnection
    /** A specific comment. */
    comment: Comment
    /** Fetch users belonging to this user account. */
    availableUsers: AuthResolverResponse
    /** User's active sessions. */
    authenticationSessions: AuthenticationSessionResponse[]
    /** Fetch SSO login URL for the email provided. */
    ssoUrlFromEmail: SsoUrlFromEmailResponse
    /** List of audit entry types. */
    auditEntryTypes: AuditEntryType[]
    /** All audit log entries. */
    auditEntries: AuditEntryConnection
    /**
     * All issue attachments.
     * 
     * To get attachments for a given URL, use `attachmentsForURL` query.
     */
    attachments: AttachmentConnection
    /**
     * 
     * One specific issue attachment.
     * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
     */
    attachment: Attachment
    /** Returns issue attachments for a given `url`. */
    attachmentsForURL: AttachmentConnection
    /**
     * @deprecated Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead.
     * 
     * Query an issue by its associated attachment, and its id.
     * 
     */
    attachmentIssue: Issue
    /** [Internal] Get a list of all unique attachment sources in the workspace. */
    attachmentSources: AttachmentSourcesPayload
    /** Get basic information for an application. */
    applicationInfo: Application
    /** [INTERNAL] Get basic information for a list of applications. */
    applicationInfoByIds: Application[]
    /**
     * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
     * [DEPRECATED] [INTERNAL] Get information for a list of applications with memberships
     */
    applicationInfoWithMembershipsByIds: WorkspaceAuthorizedApplication[]
    /** Get information for an application and whether a user has approved it for the given scopes. */
    applicationWithAuthorization: UserAuthorizedApplication
    /** [INTERNAL] Get all authorized applications for a user. */
    authorizedApplications: AuthorizedApplication[]
    /**
     * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
     * [DEPRECATED] [INTERNAL] Get non-internal authorized applications (with limited fields) for a workspace
     */
    workspaceAuthorizedApplications: WorkspaceAuthorizedApplication[]
    /** [INTERNAL] Get non-internal authorized applications for a workspace, including each application's app user. */
    workspaceAuthorizedApplicationsWithAppUser: WorkspaceAuthorizedApplicationWithAppUser[]
    /** [INTERNAL] Get a specific non-internal authorized application (with limited fields) for a workspace */
    workspaceAuthorizedApplication: WorkspaceAuthorizedApplicationWithMemberships
    /** All API keys for the user. */
    apiKeys: ApiKeyConnection
    /** All agent contexts. */
    agentContexts: AgentContextConnection
    /** A specific agent context. */
    agentContext: AgentContext
    /** All agent activities. */
    agentActivities: AgentActivityConnection
    /** A specific agent activity. */
    agentActivity: AgentActivity
    __typename: 'Query'
}


/** The settings of a user as a JSON object. */
export interface UserSettings {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The notification delivery preferences for the user. Note: notificationDisabled field is deprecated in favor of notificationChannelPreferences. */
    notificationDeliveryPreferences: NotificationDeliveryPreferences
    /**
     * @deprecated Use individual subscription fields instead. This field's value is now outdated.
     * The email types the user has unsubscribed from.
     */
    unsubscribedFrom: Scalars['String'][]
    /** The user associated with these settings. */
    user: User
    /** Hash for the user to be used in calendar URLs. */
    calendarHash: (Scalars['String'] | null)
    /** Whether this user is subscribed to changelog email or not. */
    subscribedToChangelog: Scalars['Boolean']
    /** Whether this user is subscribed to DPA emails or not. */
    subscribedToDPA: Scalars['Boolean']
    /** Whether this user is subscribed to invite accepted emails or not. */
    subscribedToInviteAccepted: Scalars['Boolean']
    /** Whether this user is subscribed to privacy and legal update emails or not. */
    subscribedToPrivacyLegalUpdates: Scalars['Boolean']
    /** Whether to show full user names instead of display names. */
    showFullUserNames: Scalars['Boolean']
    /** Whether to auto-assign newly created issues to the current user by default. */
    autoAssignToSelf: Scalars['Boolean']
    /** The user's notification category preferences. */
    notificationCategoryPreferences: NotificationCategoryPreferences
    /** The user's notification channel preferences. */
    notificationChannelPreferences: NotificationChannelPreferences
    __typename: 'UserSettings'
}


/** A user's notification delivery preferences. */
export interface NotificationDeliveryPreferences {
    /** The delivery preferences for the mobile channel. */
    mobile: (NotificationDeliveryPreferencesChannel | null)
    __typename: 'NotificationDeliveryPreferences'
}


/** A user's notification delivery preferences. */
export interface NotificationDeliveryPreferencesChannel {
    /**
     * @deprecated This field has been replaced by notificationChannelPreferences
     * [DEPRECATED] Whether notifications are enabled for this channel. Use notificationChannelPreferences instead.
     */
    notificationsDisabled: (Scalars['Boolean'] | null)
    /** The schedule for notifications on this channel. */
    schedule: (NotificationDeliveryPreferencesSchedule | null)
    __typename: 'NotificationDeliveryPreferencesChannel'
}


/** A user's notification delivery schedule for a particular day. */
export interface NotificationDeliveryPreferencesSchedule {
    /** Whether the schedule is disabled. */
    disabled: (Scalars['Boolean'] | null)
    /** Delivery preferences for Sunday. */
    sunday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Monday. */
    monday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Tuesday. */
    tuesday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Wednesday. */
    wednesday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Thursday. */
    thursday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Friday. */
    friday: NotificationDeliveryPreferencesDay
    /** Delivery preferences for Saturday. */
    saturday: NotificationDeliveryPreferencesDay
    __typename: 'NotificationDeliveryPreferencesSchedule'
}


/** A user's notification delivery schedule for a particular day. */
export interface NotificationDeliveryPreferencesDay {
    /** The time notifications start. */
    start: (Scalars['String'] | null)
    /** The time notifications end. */
    end: (Scalars['String'] | null)
    __typename: 'NotificationDeliveryPreferencesDay'
}


/** A user's notification category preferences. */
export interface NotificationCategoryPreferences {
    /** The preferences for notifications about assignments. */
    assignments: NotificationChannelPreferences
    /** The preferences for notifications about status changes. */
    statusChanges: NotificationChannelPreferences
    /** The preferences for notifications about comments and replies. */
    commentsAndReplies: NotificationChannelPreferences
    /** The preferences for notifications about mentions. */
    mentions: NotificationChannelPreferences
    /** The preferences for notifications about reactions. */
    reactions: NotificationChannelPreferences
    /** The preferences for notifications about subscriptions. */
    subscriptions: NotificationChannelPreferences
    /** The preferences for notifications about document changes. */
    documentChanges: NotificationChannelPreferences
    /** The preferences for notifications about posts and updates. */
    postsAndUpdates: NotificationChannelPreferences
    /** The preferences for notifications about reminders. */
    reminders: NotificationChannelPreferences
    /** The preferences for notifications about reviews. */
    reviews: NotificationChannelPreferences
    /** The preferences for notifications about apps and integrations. */
    appsAndIntegrations: NotificationChannelPreferences
    /** The preferences for system notifications. */
    system: NotificationChannelPreferences
    /** The preferences for triage notifications. */
    triage: NotificationChannelPreferences
    /** The preferences for customer notifications. */
    customers: NotificationChannelPreferences
    __typename: 'NotificationCategoryPreferences'
}


/** A user's notification channel preferences, indicating if a channel is enabled or not */
export interface NotificationChannelPreferences {
    /** Whether notifications are currently enabled for mobile. */
    mobile: Scalars['Boolean']
    /** Whether notifications are currently enabled for desktop. */
    desktop: Scalars['Boolean']
    /** Whether notifications are currently enabled for email. */
    email: Scalars['Boolean']
    /** Whether notifications are currently enabled for Slack. */
    slack: Scalars['Boolean']
    __typename: 'NotificationChannelPreferences'
}

export interface TriageResponsibilityConnection {
    edges: TriageResponsibilityEdge[]
    nodes: TriageResponsibility[]
    pageInfo: PageInfo
    __typename: 'TriageResponsibilityConnection'
}

export interface TriageResponsibilityEdge {
    node: TriageResponsibility
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'TriageResponsibilityEdge'
}

export interface TimeScheduleConnection {
    edges: TimeScheduleEdge[]
    nodes: TimeSchedule[]
    pageInfo: PageInfo
    __typename: 'TimeScheduleConnection'
}

export interface TimeScheduleEdge {
    node: TimeSchedule
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'TimeScheduleEdge'
}

export interface ProjectFilterSuggestionPayload {
    /** The json filter that is suggested. */
    filter: (Scalars['JSONObject'] | null)
    /** The log id of the prompt, that created this filter. */
    logId: (Scalars['String'] | null)
    __typename: 'ProjectFilterSuggestionPayload'
}


/** [ALPHA] Payload returned by semantic search. */
export interface SemanticSearchPayload {
    enabled: Scalars['Boolean']
    results: SemanticSearchResult[]
    __typename: 'SemanticSearchPayload'
}


/** [ALPHA] A semantic search result reference. */
export interface SemanticSearchResult {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The type of the semantic search result. */
    type: SemanticSearchResultType
    /** The issue related to the semantic search result. */
    issue: (Issue | null)
    /** The project related to the semantic search result. */
    project: (Project | null)
    /** The initiative related to the semantic search result. */
    initiative: (Initiative | null)
    /** The document related to the semantic search result. */
    document: (Document | null)
    __typename: 'SemanticSearchResult'
}


/** [ALPHA] The type of the semantic search result. */
export type SemanticSearchResultType = 'issue' | 'project' | 'initiative' | 'document'

export interface DocumentSearchPayload {
    edges: DocumentSearchResultEdge[]
    nodes: DocumentSearchResult[]
    pageInfo: PageInfo
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload: ArchiveResponse
    /** Total number of results for query without filters applied. */
    totalCount: Scalars['Float']
    __typename: 'DocumentSearchPayload'
}

export interface DocumentSearchResultEdge {
    node: DocumentSearchResult
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'DocumentSearchResultEdge'
}

export interface DocumentSearchResult {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The document title. */
    title: Scalars['String']
    /** The icon of the document. */
    icon: (Scalars['String'] | null)
    /** The color of the icon. */
    color: (Scalars['String'] | null)
    /** The user who created the document. */
    creator: (User | null)
    /** The user who last updated the document. */
    updatedBy: (User | null)
    /** The project that the document is associated with. */
    project: (Project | null)
    /** The initiative that the document is associated with. */
    initiative: (Initiative | null)
    /** [Internal] The team that the document is associated with. */
    team: (Team | null)
    /** The document's unique URL slug. */
    slugId: Scalars['String']
    /** The last template that was applied to this document. */
    lastAppliedTemplate: (Template | null)
    /** The time at which the document was hidden. Null if the entity has not been hidden. */
    hiddenAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the document is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The order of the item in the resources list. */
    sortOrder: Scalars['Float']
    /** Comments associated with the document. */
    comments: CommentConnection
    /** The documents content in markdown format. */
    content: (Scalars['String'] | null)
    /** [Internal] The documents content as YJS state. */
    contentState: (Scalars['String'] | null)
    /** The ID of the document content associated with the document. */
    documentContentId: (Scalars['String'] | null)
    /** The canonical url for the document. */
    url: Scalars['String']
    /** Metadata related to search result. */
    metadata: Scalars['JSONObject']
    __typename: 'DocumentSearchResult'
}


/** Contains requested archived model objects. */
export interface ArchiveResponse {
    /** A JSON serialized collection of model objects loaded from the archive */
    archive: Scalars['String']
    /** The total number of entities in the archive. */
    totalCount: Scalars['Float']
    /** The version of the remote database. Incremented by 1 for each migration run on the database. */
    databaseVersion: Scalars['Float']
    /** Whether the dependencies for the model objects are included in the archive. */
    includesDependencies: Scalars['String'][]
    __typename: 'ArchiveResponse'
}

export interface ProjectSearchPayload {
    edges: ProjectSearchResultEdge[]
    nodes: ProjectSearchResult[]
    pageInfo: PageInfo
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload: ArchiveResponse
    /** Total number of results for query without filters applied. */
    totalCount: Scalars['Float']
    __typename: 'ProjectSearchPayload'
}

export interface ProjectSearchResultEdge {
    node: ProjectSearchResult
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectSearchResultEdge'
}

export interface ProjectSearchResult {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks: (Scalars['Float'] | null)
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency: (Scalars['Float'] | null)
    /** The resolution of the reminder frequency. */
    frequencyResolution: FrequencyResolutionType
    /** The day at which to prompt for updates. */
    updateRemindersDay: (Day | null)
    /** The hour at which to prompt for updates. */
    updateRemindersHour: (Scalars['Float'] | null)
    /** The project's name. */
    name: Scalars['String']
    /** The project's description. */
    description: Scalars['String']
    /** The content of the project description. */
    documentContent: (DocumentContent | null)
    /** The project's unique URL slug. */
    slugId: Scalars['String']
    /** The icon of the project. */
    icon: (Scalars['String'] | null)
    /** The project's color. */
    color: Scalars['String']
    /** The status that the project is associated with. */
    status: ProjectStatus
    /** The user who created the project. */
    creator: (User | null)
    /** The project lead. */
    lead: (User | null)
    /** [Internal] Facets associated with the project. */
    facets: Facet[]
    /** The time until which project update reminders are paused. */
    projectUpdateRemindersPausedUntilAt: (Scalars['DateTime'] | null)
    /** The estimated start date of the project. */
    startDate: (Scalars['TimelessDate'] | null)
    /** The resolution of the project's start date. */
    startDateResolution: (DateResolutionType | null)
    /** The estimated completion date of the project. */
    targetDate: (Scalars['TimelessDate'] | null)
    /** The resolution of the project's estimated completion date. */
    targetDateResolution: (DateResolutionType | null)
    /** The time at which the project was moved into started state. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time at which the project was moved into completed state. */
    completedAt: (Scalars['DateTime'] | null)
    /** The time at which the project was moved into canceled state. */
    canceledAt: (Scalars['DateTime'] | null)
    /** The time at which the project was automatically archived by the auto pruning process. */
    autoArchivedAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the project is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The sort order for the project within the organization. */
    sortOrder: Scalars['Float']
    /** The sort order for the project within the organization, when ordered by priority. */
    prioritySortOrder: Scalars['Float']
    /** The project was created based on this issue. */
    convertedFromIssue: (Issue | null)
    /** The last template that was applied to this project. */
    lastAppliedTemplate: (Template | null)
    /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority: Scalars['Int']
    /** The last project update posted for this project. */
    lastUpdate: (ProjectUpdate | null)
    /** The health of the project. */
    health: (ProjectUpdateHealthType | null)
    /** The time at which the project health was updated. */
    healthUpdatedAt: (Scalars['DateTime'] | null)
    /** The total number of issues in the project after each week. */
    issueCountHistory: Scalars['Float'][]
    /** The number of completed issues in the project after each week. */
    completedIssueCountHistory: Scalars['Float'][]
    /** The total number of estimation points after each week. */
    scopeHistory: Scalars['Float'][]
    /** The number of completed estimation points after each week. */
    completedScopeHistory: Scalars['Float'][]
    /** The number of in progress estimation points after each week. */
    inProgressScopeHistory: Scalars['Float'][]
    /** [INTERNAL] The progress history of the project. */
    progressHistory: Scalars['JSONObject']
    /** [INTERNAL] The current progress of the project. */
    currentProgress: Scalars['JSONObject']
    /**
     * @deprecated No longer in use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue: Scalars['Boolean']
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments: Scalars['Boolean']
    /**
     * @deprecated No longer is use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses: Scalars['Boolean']
    /** Id of the labels associated with this project. */
    labelIds: Scalars['String'][]
    /** The user's favorite associated with this project. */
    favorite: (Favorite | null)
    /** Project URL. */
    url: Scalars['String']
    /** Initiatives that this project belongs to. */
    initiatives: InitiativeConnection
    /** Teams associated with this project. */
    teams: TeamConnection
    /** Users that are members of the project. */
    members: UserConnection
    /** Project updates associated with the project. */
    projectUpdates: ProjectUpdateConnection
    /** Documents associated with the project. */
    documents: DocumentConnection
    /** Milestones associated with the project. */
    projectMilestones: ProjectMilestoneConnection
    /** Issues associated with the project. */
    issues: IssueConnection
    /** External links associated with the project. */
    externalLinks: EntityExternalLinkConnection
    /** History entries associated with the project. */
    history: ProjectHistoryConnection
    /** [Internal] Labels associated with this project. */
    labels: ProjectLabelConnection
    /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress: Scalars['Float']
    /** The overall scope (total estimate points) of the project. */
    scope: Scalars['Float']
    /** Settings for all integrations associated with that project. */
    integrationsSettings: (IntegrationsSettings | null)
    /** The project's content in markdown format. */
    content: (Scalars['String'] | null)
    /** [Internal] The project's content as YJS state. */
    contentState: (Scalars['String'] | null)
    /** Comments associated with the project overview. */
    comments: CommentConnection
    /** Relations associated with this project. */
    relations: ProjectRelationConnection
    /** Inverse relations associated with this project. */
    inverseRelations: ProjectRelationConnection
    /** Customer needs associated with the project. */
    needs: CustomerNeedConnection
    /**
     * @deprecated Use project.status instead
     * [DEPRECATED] The type of the state.
     */
    state: Scalars['String']
    /** The priority of the project as a label. */
    priorityLabel: Scalars['String']
    /** Metadata related to search result. */
    metadata: Scalars['JSONObject']
    __typename: 'ProjectSearchResult'
}

export interface IssueSearchPayload {
    edges: IssueSearchResultEdge[]
    nodes: IssueSearchResult[]
    pageInfo: PageInfo
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload: ArchiveResponse
    /** Total number of results for query without filters applied. */
    totalCount: Scalars['Float']
    __typename: 'IssueSearchPayload'
}

export interface IssueSearchResultEdge {
    node: IssueSearchResult
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IssueSearchResultEdge'
}

export interface IssueSearchResult {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The issue's unique number. */
    number: Scalars['Float']
    /** The issue's title. */
    title: Scalars['String']
    /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority: Scalars['Float']
    /** The estimate of the complexity of the issue.. */
    estimate: (Scalars['Float'] | null)
    /**
     * @deprecated Will be removed in near future, please use `sortOrder` instead
     * The order of the item in its column on the board.
     */
    boardOrder: Scalars['Float']
    /** The order of the item in relation to other items in the organization. */
    sortOrder: Scalars['Float']
    /** The order of the item in relation to other items in the organization, when ordered by priority. */
    prioritySortOrder: Scalars['Float']
    /** The time at which the issue was moved into started state. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was moved into completed state. */
    completedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue entered triage. */
    startedTriageAt: (Scalars['DateTime'] | null)
    /** The time at which the issue left triage. */
    triagedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was moved into canceled state. */
    canceledAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was automatically closed by the auto pruning process. */
    autoClosedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was automatically archived by the auto pruning process. */
    autoArchivedAt: (Scalars['DateTime'] | null)
    /** The date at which the issue is due. */
    dueDate: (Scalars['TimelessDate'] | null)
    /** The time at which the issue's SLA began. */
    slaStartedAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will enter medium risk state. */
    slaMediumRiskAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will enter high risk state. */
    slaHighRiskAt: (Scalars['DateTime'] | null)
    /** The time at which the issue's SLA will breach. */
    slaBreachesAt: (Scalars['DateTime'] | null)
    /** The type of SLA set on the issue. Calendar days or business days. */
    slaType: (Scalars['String'] | null)
    /** The time at which the issue was added to a project. */
    addedToProjectAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was added to a cycle. */
    addedToCycleAt: (Scalars['DateTime'] | null)
    /** The time at which the issue was added to a team. */
    addedToTeamAt: (Scalars['DateTime'] | null)
    /** A flag that indicates whether the issue is in the trash bin. */
    trashed: (Scalars['Boolean'] | null)
    /** The time until an issue will be snoozed in Triage view. */
    snoozedUntilAt: (Scalars['DateTime'] | null)
    /** [Internal] The time at which the most recent suggestions for this issue were generated. */
    suggestionsGeneratedAt: (Scalars['DateTime'] | null)
    /** [Internal] The activity summary information for this issue. */
    activitySummary: (Scalars['JSONObject'] | null)
    /** [ALPHA] The document content representing this issue description. */
    documentContent: (DocumentContent | null)
    /** Id of the labels associated with this issue. */
    labelIds: Scalars['String'][]
    /** The team that the issue is associated with. */
    team: Team
    /** The cycle that the issue is associated with. */
    cycle: (Cycle | null)
    /** The project that the issue is associated with. */
    project: (Project | null)
    /** The projectMilestone that the issue is associated with. */
    projectMilestone: (ProjectMilestone | null)
    /** The last template that was applied to this issue. */
    lastAppliedTemplate: (Template | null)
    /** The recurring issue template that created this issue. */
    recurringIssueTemplate: (Template | null)
    /** Previous identifiers of the issue if it has been moved between teams. */
    previousIdentifiers: Scalars['String'][]
    /** The user who created the issue. */
    creator: (User | null)
    /** The external user who created the issue. */
    externalUserCreator: (ExternalUser | null)
    /** The user to whom the issue is assigned to. */
    assignee: (User | null)
    /** The user who has delegated this issue to be completed by an agent. */
    supervisor: (User | null)
    /** The user who snoozed the issue. */
    snoozedBy: (User | null)
    /** The workflow state that the issue is associated with. */
    state: WorkflowState
    /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
    subIssueSortOrder: (Scalars['Float'] | null)
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData: Scalars['JSONObject']
    /** Label for the priority. */
    priorityLabel: Scalars['String']
    /** The comment that this issue was created from. */
    sourceComment: (Comment | null)
    /** Integration type that created this issue, if applicable. */
    integrationSourceType: (IntegrationService | null)
    /** The bot that created the issue, if applicable. */
    botActor: (ActorBot | null)
    /** The users favorite associated with this issue. */
    favorite: (Favorite | null)
    /** Issue's human readable identifier (e.g. ENG-123). */
    identifier: Scalars['String']
    /** Issue URL. */
    url: Scalars['String']
    /** Suggested branch name for the issue. */
    branchName: Scalars['String']
    /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
    customerTicketCount: Scalars['Int']
    /** Users who are subscribed to the issue. */
    subscribers: UserConnection
    /** The parent of the issue. */
    parent: (Issue | null)
    /** Children of the issue. */
    children: IssueConnection
    /** Comments associated with the issue. */
    comments: CommentConnection
    /** History entries associated with the issue. */
    history: IssueHistoryConnection
    /** Labels associated with this issue. */
    labels: IssueLabelConnection
    /** Relations associated with this issue. */
    relations: IssueRelationConnection
    /** Inverse relations associated with this issue. */
    inverseRelations: IssueRelationConnection
    /** Attachments associated with the issue. */
    attachments: AttachmentConnection
    /** Attachments previously associated with the issue before being moved to another issue. */
    formerAttachments: AttachmentConnection
    /** The issue's description in markdown format. */
    description: (Scalars['String'] | null)
    /** [Internal] The issue's description content as YJS state. */
    descriptionState: (Scalars['String'] | null)
    /** Reactions associated with the issue. */
    reactions: Reaction[]
    /** Customer needs associated with the issue. */
    needs: CustomerNeedConnection
    /** Customer needs previously associated with the issue before being moved to another issue. */
    formerNeeds: CustomerNeedConnection
    /** The external services the issue is synced with. */
    syncedWith: (ExternalEntityInfo[] | null)
    /** [Internal] Product intelligence suggestions for the issue. */
    suggestions: IssueSuggestionConnection
    /** [Internal] Incoming product intelligence relation suggestions for the issue. */
    incomingSuggestions: IssueSuggestionConnection
    /** Metadata related to search result. */
    metadata: Scalars['JSONObject']
    __typename: 'IssueSearchResult'
}

export interface RoadmapToProjectConnection {
    edges: RoadmapToProjectEdge[]
    nodes: RoadmapToProject[]
    pageInfo: PageInfo
    __typename: 'RoadmapToProjectConnection'
}

export interface RoadmapToProjectEdge {
    node: RoadmapToProject
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'RoadmapToProjectEdge'
}


/** Join table between projects and roadmaps. */
export interface RoadmapToProject {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The project that the roadmap is associated with. */
    project: Project
    /** The roadmap that the project is associated with. */
    roadmap: Roadmap
    /** The sort order of the project within the roadmap. */
    sortOrder: Scalars['String']
    __typename: 'RoadmapToProject'
}

export interface RoadmapConnection {
    edges: RoadmapEdge[]
    nodes: Roadmap[]
    pageInfo: PageInfo
    __typename: 'RoadmapConnection'
}

export interface RoadmapEdge {
    node: Roadmap
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'RoadmapEdge'
}

export interface RateLimitPayload {
    /** The identifier we rate limit on. */
    identifier: (Scalars['String'] | null)
    /** The kind of rate limit selected for this request. */
    kind: Scalars['String']
    /** The state of the rate limit. */
    limits: RateLimitResultPayload[]
    __typename: 'RateLimitPayload'
}

export interface RateLimitResultPayload {
    /** What is being rate limited. */
    type: Scalars['String']
    /** The requested quantity for this type of limit. */
    requestedAmount: Scalars['Float']
    /** The total allowed quantity for this type of limit. */
    allowedAmount: Scalars['Float']
    /** The period in which the rate limit is fully replenished in ms. */
    period: Scalars['Float']
    /** The remaining quantity for this type of limit after this request. */
    remainingAmount: Scalars['Float']
    /** The timestamp after the rate limit is fully replenished as a UNIX timestamp. */
    reset: Scalars['Float']
    __typename: 'RateLimitResultPayload'
}

export interface PushSubscriptionTestPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'PushSubscriptionTestPayload'
}

export type SendStrategy = 'desktopThenPush' | 'desktopAndPush' | 'desktop' | 'push'

export interface SummaryPayload {
    /** Summary for project updates. */
    summary: Scalars['String']
    __typename: 'SummaryPayload'
}

export interface ProjectStatusConnection {
    edges: ProjectStatusEdge[]
    nodes: ProjectStatus[]
    pageInfo: PageInfo
    __typename: 'ProjectStatusConnection'
}

export interface ProjectStatusEdge {
    node: ProjectStatus
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ProjectStatusEdge'
}

export interface ProjectStatusCountPayload {
    /** Total number of projects using this project status. */
    count: Scalars['Float']
    /** Total number of projects using this project status that are not visible to the user because they are in a private team. */
    privateCount: Scalars['Float']
    /** Total number of projects using this project status that are not visible to the user because they are in an archived team. */
    archivedTeamCount: Scalars['Float']
    __typename: 'ProjectStatusCountPayload'
}

export interface OrganizationExistsPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** Whether the organization exists. */
    exists: Scalars['Boolean']
    __typename: 'OrganizationExistsPayload'
}

export interface OrganizationMeta {
    /** The region the organization is hosted in. */
    region: Scalars['String']
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices: Scalars['String'][]
    __typename: 'OrganizationMeta'
}

export interface OrganizationInviteConnection {
    edges: OrganizationInviteEdge[]
    nodes: OrganizationInvite[]
    pageInfo: PageInfo
    __typename: 'OrganizationInviteConnection'
}

export interface OrganizationInviteEdge {
    node: OrganizationInvite
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'OrganizationInviteEdge'
}


/** An invitation to the organization that has been sent via email. */
export interface OrganizationInvite {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The invitees email address. */
    email: Scalars['String']
    /** The user role that the invitee will receive upon accepting the invite. */
    role: UserRoleType
    /** The invite was sent to external address. */
    external: Scalars['Boolean']
    /** The time at which the invite was accepted. Null, if the invite hasn't been accepted. */
    acceptedAt: (Scalars['DateTime'] | null)
    /** The time at which the invite will be expiring. Null, if the invite shouldn't expire. */
    expiresAt: (Scalars['DateTime'] | null)
    /** Extra metadata associated with the organization invite. */
    metadata: (Scalars['JSONObject'] | null)
    /** The user who created the invitation. */
    inviter: User
    /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
    invitee: (User | null)
    /** The organization that the invite is associated with. */
    organization: Organization
    __typename: 'OrganizationInvite'
}


/** The different permission roles available to users on an organization. */
export type UserRoleType = 'admin' | 'guest' | 'user' | 'app'

export type OrganizationInviteDetailsPayload = (OrganizationInviteFullDetailsPayload | OrganizationAcceptedOrExpiredInviteDetailsPayload) & { __isUnion?: true }

export interface OrganizationInviteFullDetailsPayload {
    /** The status of the invite. */
    status: OrganizationInviteStatus
    /** The name of the inviter. */
    inviter: Scalars['String']
    /** The email of the invitee. */
    email: Scalars['String']
    /** What user role the invite should grant. */
    role: UserRoleType
    /** When the invite was created. */
    createdAt: Scalars['DateTime']
    /** Name of the workspace the invite is for. */
    organizationName: Scalars['String']
    /** ID of the workspace the invite is for. */
    organizationId: Scalars['String']
    /** URL of the workspace logo the invite is for. */
    organizationLogoUrl: (Scalars['String'] | null)
    /** Whether the invite has already been accepted. */
    accepted: Scalars['Boolean']
    /** Whether the invite has expired. */
    expired: Scalars['Boolean']
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices: Scalars['String'][]
    __typename: 'OrganizationInviteFullDetailsPayload'
}


/** The different statuses possible for an organization invite. */
export type OrganizationInviteStatus = 'pending' | 'accepted' | 'expired'

export interface OrganizationAcceptedOrExpiredInviteDetailsPayload {
    /** The status of the invite. */
    status: OrganizationInviteStatus
    __typename: 'OrganizationAcceptedOrExpiredInviteDetailsPayload'
}


/** [INTERNAL] Domain claim request response. */
export interface OrganizationDomainClaimPayload {
    /** String to put into DNS for verification. */
    verificationString: Scalars['String']
    __typename: 'OrganizationDomainClaimPayload'
}

export interface NotificationSubscriptionConnection {
    edges: NotificationSubscriptionEdge[]
    nodes: NotificationSubscription[]
    pageInfo: PageInfo
    __typename: 'NotificationSubscriptionConnection'
}

export interface NotificationSubscriptionEdge {
    node: NotificationSubscription
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'NotificationSubscriptionEdge'
}

export interface NotificationConnection {
    edges: NotificationEdge[]
    nodes: Notification[]
    pageInfo: PageInfo
    __typename: 'NotificationConnection'
}

export interface NotificationEdge {
    node: Notification
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'NotificationEdge'
}

export interface IssuePriorityValue {
    /** Priority's number value. */
    priority: Scalars['Int']
    /** Priority's label. */
    label: Scalars['String']
    __typename: 'IssuePriorityValue'
}

export interface IssueFilterSuggestionPayload {
    /** The json filter that is suggested. */
    filter: (Scalars['JSONObject'] | null)
    /** The log id of the prompt, that created this filter. */
    logId: (Scalars['String'] | null)
    __typename: 'IssueFilterSuggestionPayload'
}

export interface IssueImportCheckPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueImportCheckPayload'
}


/** Whether an issue import can be synced at the end of an import or not */
export interface IssueImportSyncCheckPayload {
    /** Returns true if the import can be synced, false otherwise */
    canSync: Scalars['Boolean']
    /** An error message with a root cause of why the import cannot be synced */
    error: (Scalars['String'] | null)
    __typename: 'IssueImportSyncCheckPayload'
}


/** Whether a custom JQL query is valid or not */
export interface IssueImportJqlCheckPayload {
    /** Returns true if the JQL query has been validated successfully, false otherwise */
    success: Scalars['Boolean']
    /** Returns an approximate number of issues matching the JQL query, if available */
    count: (Scalars['Float'] | null)
    /** An error message returned by Jira when validating the JQL query. */
    error: (Scalars['String'] | null)
    __typename: 'IssueImportJqlCheckPayload'
}

export interface IntegrationTemplateConnection {
    edges: IntegrationTemplateEdge[]
    nodes: IntegrationTemplate[]
    pageInfo: PageInfo
    __typename: 'IntegrationTemplateConnection'
}

export interface IntegrationTemplateEdge {
    node: IntegrationTemplate
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'IntegrationTemplateEdge'
}


/** Join table between templates and integrations. */
export interface IntegrationTemplate {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The template that the integration is associated with. */
    template: Template
    /** The integration that the template is associated with. */
    integration: Integration
    /** ID of the foreign entity in the external integration this template is for, e.g., Slack channel ID. */
    foreignEntityId: (Scalars['String'] | null)
    __typename: 'IntegrationTemplate'
}

export interface GitHubEnterpriseServerInstallVerificationPayload {
    /** Has the install been successful. */
    success: Scalars['Boolean']
    __typename: 'GitHubEnterpriseServerInstallVerificationPayload'
}

export interface IntegrationHasScopesPayload {
    /** Whether the integration has the required scopes. */
    hasAllScopes: Scalars['Boolean']
    /** The missing scopes. */
    missingScopes: (Scalars['String'][] | null)
    __typename: 'IntegrationHasScopesPayload'
}

export interface InitiativeUpdateConnection {
    edges: InitiativeUpdateEdge[]
    nodes: InitiativeUpdate[]
    pageInfo: PageInfo
    __typename: 'InitiativeUpdateConnection'
}

export interface InitiativeUpdateEdge {
    node: InitiativeUpdate
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'InitiativeUpdateEdge'
}

export interface InitiativeToProjectConnection {
    edges: InitiativeToProjectEdge[]
    nodes: InitiativeToProject[]
    pageInfo: PageInfo
    __typename: 'InitiativeToProjectConnection'
}

export interface InitiativeToProjectEdge {
    node: InitiativeToProject
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'InitiativeToProjectEdge'
}


/** Join table between projects and initiatives. */
export interface InitiativeToProject {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The project that the initiative is associated with. */
    project: Project
    /** The initiative that the project is associated with. */
    initiative: Initiative
    /** The sort order of the project within the initiative. */
    sortOrder: Scalars['String']
    __typename: 'InitiativeToProject'
}

export interface InitiativeRelationConnection {
    edges: InitiativeRelationEdge[]
    nodes: InitiativeRelation[]
    pageInfo: PageInfo
    __typename: 'InitiativeRelationConnection'
}

export interface InitiativeRelationEdge {
    node: InitiativeRelation
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'InitiativeRelationEdge'
}


/** A relation representing the dependency between two initiatives. */
export interface InitiativeRelation {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The parent initiative. */
    initiative: Initiative
    /** The child initiative. */
    relatedInitiative: Initiative
    /** The last user who created or modified the relation. */
    user: (User | null)
    /** The sort order of the relation within the initiative. */
    sortOrder: Scalars['Float']
    __typename: 'InitiativeRelation'
}

export interface ExternalUserConnection {
    edges: ExternalUserEdge[]
    nodes: ExternalUser[]
    pageInfo: PageInfo
    __typename: 'ExternalUserConnection'
}

export interface ExternalUserEdge {
    node: ExternalUser
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ExternalUserEdge'
}

export interface EmojiConnection {
    edges: EmojiEdge[]
    nodes: Emoji[]
    pageInfo: PageInfo
    __typename: 'EmojiConnection'
}

export interface EmojiEdge {
    node: Emoji
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'EmojiEdge'
}


/** A custom emoji. */
export interface Emoji {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The emoji's name. */
    name: Scalars['String']
    /** The emoji image URL. */
    url: Scalars['String']
    /** The source of the emoji. */
    source: Scalars['String']
    /** The user who created the emoji. */
    creator: (User | null)
    /** The organization that the emoji belongs to. */
    organization: Organization
    __typename: 'Emoji'
}

export interface DocumentContentHistoryPayload {
    /** The document content history entries. */
    history: DocumentContentHistoryType[]
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'DocumentContentHistoryPayload'
}

export interface DocumentContentHistoryType {
    /** The UUID of the document content history entry. */
    id: Scalars['String']
    /** The date when the document content history entry was created. */
    createdAt: Scalars['DateTime']
    /** The date when the document content history snapshot was taken. This can be different than createdAt since the content is captured from its state at the previously known updatedAt timestamp in the case of an update. On document create, these timestamps can be the same. */
    contentDataSnapshotAt: Scalars['DateTime']
    /** [Internal] The document content as Prosemirror document. */
    contentData: (Scalars['JSON'] | null)
    /** The ID of the author of the change. */
    actorIds: (Scalars['String'][] | null)
    __typename: 'DocumentContentHistoryType'
}

export interface CustomerTierConnection {
    edges: CustomerTierEdge[]
    nodes: CustomerTier[]
    pageInfo: PageInfo
    __typename: 'CustomerTierConnection'
}

export interface CustomerTierEdge {
    node: CustomerTier
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CustomerTierEdge'
}

export interface CustomerStatusConnection {
    edges: CustomerStatusEdge[]
    nodes: CustomerStatus[]
    pageInfo: PageInfo
    __typename: 'CustomerStatusConnection'
}

export interface CustomerStatusEdge {
    node: CustomerStatus
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CustomerStatusEdge'
}

export interface CustomerConnection {
    edges: CustomerEdge[]
    nodes: Customer[]
    pageInfo: PageInfo
    __typename: 'CustomerConnection'
}

export interface CustomerEdge {
    node: Customer
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CustomerEdge'
}

export interface IssueTitleSuggestionFromCustomerRequestPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The suggested issue title. */
    title: Scalars['String']
    /** [Internal] The log id of the ai response. */
    logId: (Scalars['String'] | null)
    __typename: 'IssueTitleSuggestionFromCustomerRequestPayload'
}

export interface CustomViewConnection {
    edges: CustomViewEdge[]
    nodes: CustomView[]
    pageInfo: PageInfo
    __typename: 'CustomViewConnection'
}

export interface CustomViewEdge {
    node: CustomView
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'CustomViewEdge'
}

export interface CustomViewSuggestionPayload {
    /** The suggested view name. */
    name: (Scalars['String'] | null)
    /** The suggested view description. */
    description: (Scalars['String'] | null)
    /** The suggested view icon. */
    icon: (Scalars['String'] | null)
    __typename: 'CustomViewSuggestionPayload'
}

export interface CustomViewHasSubscribersPayload {
    /** Whether the custom view has subscribers. */
    hasSubscribers: Scalars['Boolean']
    __typename: 'CustomViewHasSubscribersPayload'
}

export interface AuthResolverResponse {
    /** User account ID. */
    id: Scalars['String']
    /** Email for the authenticated account. */
    email: Scalars['String']
    /** Should the signup flow allow access for the domain. */
    allowDomainAccess: (Scalars['Boolean'] | null)
    /** List of active users that belong to the user account. */
    users: AuthUser[]
    /** List of locked users that are locked by login restrictions */
    lockedUsers: AuthUser[]
    /** List of organizations allowing this user account to join automatically. */
    availableOrganizations: (AuthOrganization[] | null)
    /** List of organization available to this user account but locked due to the current auth method. */
    lockedOrganizations: (AuthOrganization[] | null)
    /** ID of the organization last accessed by the user. */
    lastUsedOrganizationId: (Scalars['String'] | null)
    /**
     * @deprecated Deprecated and not used anymore. Never populated.
     * Application token.
     */
    token: (Scalars['String'] | null)
    __typename: 'AuthResolverResponse'
}


/** A user that has access to the the resources of an organization. */
export interface AuthUser {
    id: Scalars['ID']
    /** The user's full name. */
    name: Scalars['String']
    /** The user's display (nick) name. Unique within each organization. */
    displayName: Scalars['String']
    /** The user's email address. */
    email: Scalars['String']
    /** An URL to the user's avatar image. */
    avatarUrl: (Scalars['String'] | null)
    /** Whether the user is an organization admin or guest on a database level. */
    role: UserRoleType
    /** Whether the user is active. */
    active: Scalars['Boolean']
    /** User account ID the user belongs to. */
    userAccountId: Scalars['String']
    /** Organization the user belongs to. */
    organization: AuthOrganization
    __typename: 'AuthUser'
}


/** An organization. Organizations are root-level objects that contain users and teams. */
export interface AuthOrganization {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The organization's name. */
    name: Scalars['String']
    /** Whether the organization is enabled. Used as a superuser tool to lock down the org. */
    enabled: Scalars['Boolean']
    /** The organization's unique URL key. */
    urlKey: Scalars['String']
    /** Previously used URL keys for the organization (last 3 are kept and redirected). */
    previousUrlKeys: Scalars['String'][]
    /** The organization's logo URL. */
    logoUrl: (Scalars['String'] | null)
    /** The time at which deletion of the organization was requested. */
    deletionRequestedAt: (Scalars['DateTime'] | null)
    /** The feature release channel the organization belongs to. */
    releaseChannel: ReleaseChannel
    /** Whether SAML authentication is enabled for organization. */
    samlEnabled: Scalars['Boolean']
    /** [INTERNAL] SAML settings */
    samlSettings: (Scalars['JSONObject'] | null)
    /** Allowed authentication providers, empty array means all are allowed */
    allowedAuthServices: Scalars['String'][]
    /** Whether SCIM provisioning is enabled for organization. */
    scimEnabled: Scalars['Boolean']
    /** The email domain or URL key for the organization. */
    serviceId: Scalars['String']
    /** The region the organization is hosted in. */
    region: Scalars['String']
    userCount: Scalars['Float']
    __typename: 'AuthOrganization'
}


/** Authentication session information. */
export interface AuthenticationSessionResponse {
    id: Scalars['String']
    /** Type of application used to authenticate. */
    type: AuthenticationSessionType
    /** IP address. */
    ip: (Scalars['String'] | null)
    /** Location country name. */
    locationCountry: (Scalars['String'] | null)
    /** Location country code. */
    locationCountryCode: (Scalars['String'] | null)
    /** Country codes of all seen locations. */
    countryCodes: Scalars['String'][]
    /** Location region code. */
    locationRegionCode: (Scalars['String'] | null)
    /** Location city name. */
    locationCity: (Scalars['String'] | null)
    /** Session's user-agent. */
    userAgent: (Scalars['String'] | null)
    /** Used web browser. */
    browserType: (Scalars['String'] | null)
    /** Service used for logging in. */
    service: (Scalars['String'] | null)
    /** When was the session last seen */
    lastActiveAt: (Scalars['DateTime'] | null)
    /** Date when the session was created. */
    createdAt: Scalars['DateTime']
    /** Date when the session was last updated. */
    updatedAt: Scalars['DateTime']
    /** Human readable location */
    location: (Scalars['String'] | null)
    /** Operating system used for the session */
    operatingSystem: (Scalars['String'] | null)
    /** Client used for the session */
    client: (Scalars['String'] | null)
    /** Name of the session, derived from the client and operating system */
    name: Scalars['String']
    /** Identifies the session used to make the request. */
    isCurrentSession: Scalars['Boolean']
    __typename: 'AuthenticationSessionResponse'
}

export type AuthenticationSessionType = 'web' | 'desktop' | 'ios' | 'android'

export interface SsoUrlFromEmailResponse {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** SAML SSO sign-in URL. */
    samlSsoUrl: Scalars['String']
    __typename: 'SsoUrlFromEmailResponse'
}

export interface AuditEntryType {
    /** The audit entry type. */
    type: Scalars['String']
    /** Description of the audit entry type. */
    description: Scalars['String']
    __typename: 'AuditEntryType'
}

export interface AuditEntryConnection {
    edges: AuditEntryEdge[]
    nodes: AuditEntry[]
    pageInfo: PageInfo
    __typename: 'AuditEntryConnection'
}

export interface AuditEntryEdge {
    node: AuditEntry
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'AuditEntryEdge'
}


/** Workspace audit log entry object. */
export interface AuditEntry {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    type: Scalars['String']
    /** The organization the audit log belongs to. */
    organization: (Organization | null)
    /** The user that caused the audit entry to be created. */
    actor: (User | null)
    /** The ID of the user that caused the audit entry to be created. */
    actorId: (Scalars['String'] | null)
    /** IP from actor when entry was recorded. */
    ip: (Scalars['String'] | null)
    /** Country code of request resulting to audit entry. */
    countryCode: (Scalars['String'] | null)
    /** Additional metadata related to the audit entry. */
    metadata: (Scalars['JSONObject'] | null)
    /** Additional information related to the request which performed the action. */
    requestInformation: (Scalars['JSONObject'] | null)
    __typename: 'AuditEntry'
}

export interface AttachmentSourcesPayload {
    /** A unique list of all source types used in this workspace. */
    sources: Scalars['JSONObject']
    __typename: 'AttachmentSourcesPayload'
}


/** Public information of the OAuth application. */
export interface Application {
    /** OAuth application's ID. */
    id: Scalars['String']
    /** OAuth application's client ID. */
    clientId: Scalars['String']
    /** Application name. */
    name: Scalars['String']
    /** Information about the application. */
    description: (Scalars['String'] | null)
    /** Name of the developer. */
    developer: Scalars['String']
    /** Url of the developer (homepage or docs). */
    developerUrl: Scalars['String']
    /** Image of the application. */
    imageUrl: (Scalars['String'] | null)
    __typename: 'Application'
}


/** [INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users. */
export interface WorkspaceAuthorizedApplication {
    /** Application name. */
    name: Scalars['String']
    /** Description of the application. */
    description: (Scalars['String'] | null)
    /** Developer of the application. */
    developer: (Scalars['String'] | null)
    /** Developer URL of the application. */
    developerUrl: (Scalars['String'] | null)
    /** Image of the application. */
    imageUrl: (Scalars['String'] | null)
    /** Scopes that are authorized for this application for a given user. */
    scope: Scalars['String'][]
    /** OAuth application's ID. */
    appId: Scalars['String']
    /** OAuth application's client ID. */
    clientId: Scalars['String']
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled: Scalars['Boolean']
    /** Total number of members that authorized the application. */
    totalMembers: Scalars['Float']
    /** UserIds and membership dates of everyone who has authorized the application with the set of scopes. */
    memberships: AuthMembership[]
    __typename: 'WorkspaceAuthorizedApplication'
}


/** [INTERNAL] An OAuth userId/createdDate tuple */
export interface AuthMembership {
    /** The user ID the authorization was done for */
    userId: Scalars['String']
    /** The user ID associated with the authorization */
    authorizingUserId: (Scalars['String'] | null)
    /** The date of the authorization */
    createdAt: Scalars['DateTime']
    __typename: 'AuthMembership'
}


/** Public information of the OAuth application, plus whether the application has been authorized for the given scopes. */
export interface UserAuthorizedApplication {
    /** OAuth application's ID. */
    id: Scalars['String']
    /** OAuth application's client ID. */
    clientId: Scalars['String']
    /** Application name. */
    name: Scalars['String']
    /** Information about the application. */
    description: (Scalars['String'] | null)
    /** Name of the developer. */
    developer: Scalars['String']
    /** Url of the developer (homepage or docs). */
    developerUrl: Scalars['String']
    /** Image of the application. */
    imageUrl: (Scalars['String'] | null)
    /** Whether the user has authorized the application for the given scopes. */
    isAuthorized: Scalars['Boolean']
    /** Whether the application was created by Linear. */
    createdByLinear: Scalars['Boolean']
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled: Scalars['Boolean']
    /** Details of the app user's existing token, if any. */
    appUserAuthentication: (AppUserAuthentication | null)
    /** Error associated with the application needing to be requested for approval in the workspace. */
    approvalErrorCode: (Scalars['String'] | null)
    __typename: 'UserAuthorizedApplication'
}


/** [INTERNAL] Details of the app user's existing token. */
export interface AppUserAuthentication {
    /** The timestamp at which the token was created. */
    createdAt: Scalars['DateTime']
    /** The scopes that the token has. */
    scope: Scalars['String'][]
    /** Whether the application has requested custom sync groups. */
    requestedSyncGroups: Scalars['Boolean']
    /** The user that authorized the application, if known. */
    authorizingUser: (AuthorizingUser | null)
    __typename: 'AppUserAuthentication'
}


/** Details of the app user's authorizing user. */
export interface AuthorizingUser {
    /** The user's full name. */
    name: Scalars['String']
    /** The user's display name. */
    displayName: Scalars['String']
    __typename: 'AuthorizingUser'
}


/** [INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user. */
export interface AuthorizedApplication {
    /** Application name. */
    name: Scalars['String']
    /** Description of the application. */
    description: (Scalars['String'] | null)
    /** Developer of the application. */
    developer: (Scalars['String'] | null)
    /** Developer URL of the application. */
    developerUrl: (Scalars['String'] | null)
    /** Image of the application. */
    imageUrl: (Scalars['String'] | null)
    /** Scopes that are authorized for this application for a given user. */
    scope: Scalars['String'][]
    /** OAuth application's ID. */
    appId: Scalars['String']
    /** OAuth application's client ID. */
    clientId: Scalars['String']
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled: Scalars['Boolean']
    __typename: 'AuthorizedApplication'
}


/** [INTERNAL] Public information of the OAuth application, plus the app user and aggregate membership count. */
export interface WorkspaceAuthorizedApplicationWithAppUser {
    /** Application name. */
    name: Scalars['String']
    /** Description of the application. */
    description: (Scalars['String'] | null)
    /** Developer of the application. */
    developer: (Scalars['String'] | null)
    /** Developer URL of the application. */
    developerUrl: (Scalars['String'] | null)
    /** Image of the application. */
    imageUrl: (Scalars['String'] | null)
    /** Scopes that are authorized for this application for a given user. */
    scope: Scalars['String'][]
    /** OAuth application's ID. */
    appId: Scalars['String']
    /** OAuth application's client ID. */
    clientId: Scalars['String']
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled: Scalars['Boolean']
    /** Total number of members (including the app user, if it exists) that authorized the application. */
    totalMembers: Scalars['Float']
    /** The app user associated with this client, if one exists. */
    appUser: (AuthMembership | null)
    __typename: 'WorkspaceAuthorizedApplicationWithAppUser'
}


/** [INTERNAL] Public information of the OAuth application with its memberships */
export interface WorkspaceAuthorizedApplicationWithMemberships {
    /** Details of the OAuth application */
    client: AuthorizedApplication
    /** UserIds and membership dates of everyone who has authorized the application */
    memberships: AuthMembership[]
    /** Total number of members that authorized the application. */
    totalMembers: Scalars['Float']
    __typename: 'WorkspaceAuthorizedApplicationWithMemberships'
}

export interface ApiKeyConnection {
    edges: ApiKeyEdge[]
    nodes: ApiKey[]
    pageInfo: PageInfo
    __typename: 'ApiKeyConnection'
}

export interface ApiKeyEdge {
    node: ApiKey
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'ApiKeyEdge'
}


/** An API key. Grants access to the user's resources. */
export interface ApiKey {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The label of the API key. */
    label: Scalars['String']
    /** Scopes associated with the API key. */
    scope: (Scalars['String'][] | null)
    /** The sync groups that this API key requests access to. If null, the API key has access to all sync groups the user has access to. The final set of sync groups is computed as the intersection of these requested groups with the user's base sync groups. */
    requestedSyncGroups: (Scalars['String'][] | null)
    /** Organization the API key belongs to. */
    organization: Organization
    __typename: 'ApiKey'
}

export interface AgentContextConnection {
    edges: AgentContextEdge[]
    nodes: AgentContext[]
    pageInfo: PageInfo
    __typename: 'AgentContextConnection'
}

export interface AgentContextEdge {
    node: AgentContext
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'AgentContextEdge'
}


/** A context for agent activities and state management. */
export interface AgentContext {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The user that created this agent context. */
    creator: (User | null)
    /** The agent user that is associated with this agent context. */
    appUser: User
    /** The comment this agent context is associated with. */
    comment: (Comment | null)
    /** The issue this agent context is associated with. */
    issue: (Issue | null)
    /** The current status of the agent context. */
    status: AgentContextStatus
    /** The time the agent context started working. */
    startedAt: (Scalars['DateTime'] | null)
    /** The time the agent context ended. */
    endedAt: (Scalars['DateTime'] | null)
    /** The type of the agent context. */
    type: AgentContextType
    /** Activities associated with this agent context. */
    activities: AgentActivity[]
    /** External links associated with this agent context. */
    links: EntityExternalLink[]
    /** A summary of the activities in this context. */
    summary: (Scalars['String'] | null)
    /** Metadata about the external source that created this agent context. */
    sourceMetadata: (Scalars['JSON'] | null)
    __typename: 'AgentContext'
}


/** The status of an agent context. */
export type AgentContextStatus = 'pending' | 'active' | 'complete' | 'awaitingInput'


/** The type of an agent context. */
export type AgentContextType = 'commentThread'


/** An activity within an agent context. */
export interface AgentActivity {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** The agent context this activity belongs to. */
    agentContext: AgentContext
    /** The type of the activity. */
    type: AgentActivityType
    /** The content of the activity */
    content: AgentActivityContent
    __typename: 'AgentActivity'
}


/** The type of an agent activity. */
export type AgentActivityType = 'observation' | 'action' | 'response' | 'error'


/** Content for different types of agent activities. */
export type AgentActivityContent = (AgentActivityObservationContent | AgentActivityActionContent | AgentActivityResponseContent | AgentActivityErrorContent) & { __isUnion?: true }


/** Content for an observation activity (chain of thought). */
export interface AgentActivityObservationContent {
    /** The type of activity. */
    type: AgentActivityType
    /** The observation content in Markdown format. */
    body: Scalars['String']
    __typename: 'AgentActivityObservationContent'
}


/** Content for an action activity (tool call or action). */
export interface AgentActivityActionContent {
    /** The type of activity. */
    type: AgentActivityType
    /** The action being performed. */
    action: Scalars['String']
    /** The parameters for the action, e.g. a file path, a keyword, etc. */
    parameter: Scalars['String']
    /** The result of the action in Markdown format. */
    result: (Scalars['String'] | null)
    __typename: 'AgentActivityActionContent'
}


/** Content for a response activity (markdown-like completion). */
export interface AgentActivityResponseContent {
    /** The type of activity. */
    type: AgentActivityType
    /** The response body in Markdown format. */
    body: Scalars['String']
    __typename: 'AgentActivityResponseContent'
}


/** Content for an error activity. */
export interface AgentActivityErrorContent {
    /** The type of activity. */
    type: AgentActivityType
    /** The error message in Markdown format. */
    body: Scalars['String']
    __typename: 'AgentActivityErrorContent'
}

export interface AgentActivityConnection {
    edges: AgentActivityEdge[]
    nodes: AgentActivity[]
    pageInfo: PageInfo
    __typename: 'AgentActivityConnection'
}

export interface AgentActivityEdge {
    node: AgentActivity
    /** Used in `before` and `after` args */
    cursor: Scalars['String']
    __typename: 'AgentActivityEdge'
}

export interface Mutation {
    /** Creates a new state, adding it to the workflow of a team. */
    workflowStateCreate: WorkflowStatePayload
    /** Updates a state. */
    workflowStateUpdate: WorkflowStatePayload
    /** Archives a state. Only states with issues that have all been archived can be archived. */
    workflowStateArchive: WorkflowStateArchivePayload
    /** Creates a new webhook. */
    webhookCreate: WebhookPayload
    /** Updates an existing Webhook. */
    webhookUpdate: WebhookPayload
    /** Deletes a Webhook. */
    webhookDelete: DeletePayload
    /** Creates a new ViewPreferences object. */
    viewPreferencesCreate: ViewPreferencesPayload
    /** Updates an existing ViewPreferences object. */
    viewPreferencesUpdate: ViewPreferencesPayload
    /** Deletes a ViewPreferences. */
    viewPreferencesDelete: DeletePayload
    /** Updates the user's settings. */
    userSettingsUpdate: UserSettingsPayload
    /** Resets user's setting flags. */
    userSettingsFlagsReset: UserSettingsFlagsResetPayload
    /** Updates a user's settings flag. */
    userFlagUpdate: UserSettingsFlagPayload
    /** Subscribes to or unsubscribes from a notification category for a given notification channel for the user */
    notificationCategoryChannelSubscriptionUpdate: UserSettingsPayload
    /** Updates a user. Only available to organization admins and the user themselves. */
    userUpdate: UserPayload
    /** Connects the Discord user to this Linear account via OAuth2. */
    userDiscordConnect: UserPayload
    /** Disconnects the external user from this Linear account. */
    userExternalUserDisconnect: UserPayload
    /** Makes user an admin. Can only be called by an admin. */
    userPromoteAdmin: UserAdminPayload
    /** Makes user a regular user. Can only be called by an admin. */
    userDemoteAdmin: UserAdminPayload
    /** Makes user a regular user. Can only be called by an admin. */
    userPromoteMember: UserAdminPayload
    /** Makes user a guest. Can only be called by an admin. */
    userDemoteMember: UserAdminPayload
    /** Suspends a user. Can only be called by an admin. */
    userSuspend: UserAdminPayload
    /** Un-suspends a user. Can only be called by an admin. */
    userUnsuspend: UserAdminPayload
    /** Creates a new triage responsibility. */
    triageResponsibilityCreate: TriageResponsibilityPayload
    /** Updates an existing triage responsibility. */
    triageResponsibilityUpdate: TriageResponsibilityPayload
    /** Deletes a triage responsibility. */
    triageResponsibilityDelete: DeletePayload
    /** Creates a new time schedule. */
    timeScheduleCreate: TimeSchedulePayload
    /** Updates a time schedule. */
    timeScheduleUpdate: TimeSchedulePayload
    /** Upsert an external time schedule. */
    timeScheduleUpsertExternal: TimeSchedulePayload
    /** Deletes a time schedule. */
    timeScheduleDelete: DeletePayload
    /** Refresh the integration schedule information. */
    timeScheduleRefreshIntegrationSchedule: TimeSchedulePayload
    /** Creates a new template. */
    templateCreate: TemplatePayload
    /** Updates an existing template. */
    templateUpdate: TemplatePayload
    /** Deletes a template. */
    templateDelete: DeletePayload
    /** Creates a new project. */
    projectCreate: ProjectPayload
    /** Updates a project. */
    projectUpdate: ProjectPayload
    /** [INTERNAL] Updates all projects currently assigned to to a project status to a new project status. */
    projectReassignStatus: SuccessPayload
    /** Deletes (trashes) a project. */
    projectDelete: ProjectArchivePayload
    /**
     * @deprecated Deprecated in favor of projectDelete.
     * Archives a project.
     */
    projectArchive: ProjectArchivePayload
    /** Unarchives a project. */
    projectUnarchive: ProjectArchivePayload
    /** [Internal] Adds a label to a project. */
    projectAddLabel: ProjectPayload
    /** [Internal] Removes a label from a project. */
    projectRemoveLabel: ProjectPayload
    /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
    teamCreate: TeamPayload
    /** Updates a team. */
    teamUpdate: TeamPayload
    /** Deletes a team. */
    teamDelete: DeletePayload
    /** Unarchives a team and cancels deletion. */
    teamUnarchive: TeamArchivePayload
    /** Deletes team's cycles data */
    teamCyclesDelete: TeamPayload
    /** Creates a new team membership. */
    teamMembershipCreate: TeamMembershipPayload
    /** Updates a team membership. */
    teamMembershipUpdate: TeamMembershipPayload
    /** Deletes a team membership. */
    teamMembershipDelete: DeletePayload
    /** Deletes a previously used team key. */
    teamKeyDelete: DeletePayload
    /** Creates a new roadmapToProject join. */
    roadmapToProjectCreate: RoadmapToProjectPayload
    /** Updates a roadmapToProject. */
    roadmapToProjectUpdate: RoadmapToProjectPayload
    /** Deletes a roadmapToProject. */
    roadmapToProjectDelete: DeletePayload
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Creates a new roadmap.
     */
    roadmapCreate: RoadmapPayload
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Updates a roadmap.
     */
    roadmapUpdate: RoadmapPayload
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Archives a roadmap.
     */
    roadmapArchive: RoadmapArchivePayload
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Unarchives a roadmap.
     */
    roadmapUnarchive: RoadmapArchivePayload
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Deletes a roadmap.
     */
    roadmapDelete: DeletePayload
    /** Create CSV export report for the organization. */
    createCsvExportReport: CreateCsvExportReportPayload
    /** Creates a new reaction. */
    reactionCreate: ReactionPayload
    /** Deletes a reaction. */
    reactionDelete: DeletePayload
    /** Creates a push subscription. */
    pushSubscriptionCreate: PushSubscriptionPayload
    /** Deletes a push subscription. */
    pushSubscriptionDelete: PushSubscriptionPayload
    /** Creates a new project update. */
    projectUpdateCreate: ProjectUpdatePayload
    /** Updates a project update. */
    projectUpdateUpdate: ProjectUpdatePayload
    /** Archives a project update. */
    projectUpdateArchive: ProjectUpdateArchivePayload
    /** Unarchives a project update. */
    projectUpdateUnarchive: ProjectUpdateArchivePayload
    /**
     * @deprecated Use `projectUpdateArchive` instead.
     * Deletes a project update.
     */
    projectUpdateDelete: DeletePayload
    /** Create a notification to remind a user about a project update. */
    createProjectUpdateReminder: ProjectUpdateReminderPayload
    /** Creates a new project status. */
    projectStatusCreate: ProjectStatusPayload
    /** Updates a project status. */
    projectStatusUpdate: ProjectStatusPayload
    /** Archives a project status. */
    projectStatusArchive: ProjectStatusArchivePayload
    /** Unarchives a project status. */
    projectStatusUnarchive: ProjectStatusArchivePayload
    /** Creates a new project relation. */
    projectRelationCreate: ProjectRelationPayload
    /** Updates a project relation. */
    projectRelationUpdate: ProjectRelationPayload
    /** Deletes a project relation. */
    projectRelationDelete: DeletePayload
    /** Creates a new project milestone. */
    projectMilestoneCreate: ProjectMilestonePayload
    /** Updates a project milestone. */
    projectMilestoneUpdate: ProjectMilestonePayload
    /** Deletes a project milestone. */
    projectMilestoneDelete: DeletePayload
    /** [Internal] Moves a project milestone to another project, can be called to undo a prior move. */
    projectMilestoneMove: ProjectMilestoneMovePayload
    /** Updates the user's organization. */
    organizationUpdate: OrganizationPayload
    /** Get an organization's delete confirmation token. Administrator privileges required. */
    organizationDeleteChallenge: OrganizationDeletePayload
    /** Delete's an organization. Administrator privileges required. */
    organizationDelete: OrganizationDeletePayload
    /** Cancels the deletion of an organization. Administrator privileges required. */
    organizationCancelDelete: OrganizationCancelDeletePayload
    /** Starts a trial for the organization on the specified plan type. Administrator privileges required. */
    organizationStartTrialForPlan: OrganizationStartTrialPayload
    /**
     * @deprecated Use organizationStartTrialForPlan
     * [DEPRECATED] Starts a trial for the organization. Administrator privileges required.
     */
    organizationStartTrial: OrganizationStartTrialPayload
    /** Creates a new organization invite. */
    organizationInviteCreate: OrganizationInvitePayload
    /** Updates an organization invite. */
    organizationInviteUpdate: OrganizationInvitePayload
    /** Re-send an organization invite. */
    resendOrganizationInvite: DeletePayload
    /** Re-send an organization invite tied to an email address. */
    resendOrganizationInviteByEmail: DeletePayload
    /** Deletes an organization invite. */
    organizationInviteDelete: DeletePayload
    /** [INTERNAL] Verifies a domain claim. */
    organizationDomainClaim: OrganizationDomainSimplePayload
    /** [INTERNAL] Verifies a domain to be added to an organization. */
    organizationDomainVerify: OrganizationDomainPayload
    /** [INTERNAL] Adds a domain to be allowed for an organization. */
    organizationDomainCreate: OrganizationDomainPayload
    /** [INTERNAL] Updates an organization domain settings. */
    organizationDomainUpdate: OrganizationDomainPayload
    /** Deletes a domain. */
    organizationDomainDelete: DeletePayload
    /** Creates a new notification subscription for a cycle, custom view, label, project or team. */
    notificationSubscriptionCreate: NotificationSubscriptionPayload
    /** Updates a notification subscription. */
    notificationSubscriptionUpdate: NotificationSubscriptionPayload
    /**
     * @deprecated Update `notificationSubscription.active` to `false` instead.
     * Deletes a notification subscription reference.
     */
    notificationSubscriptionDelete: DeletePayload
    /** Updates a notification. */
    notificationUpdate: NotificationPayload
    /** Marks notification and all related notifications as read. */
    notificationMarkReadAll: NotificationBatchActionPayload
    /** Marks notification and all related notifications as unread. */
    notificationMarkUnreadAll: NotificationBatchActionPayload
    /** Snoozes a notification and all related notifications. */
    notificationSnoozeAll: NotificationBatchActionPayload
    /** Unsnoozes a notification and all related notifications. */
    notificationUnsnoozeAll: NotificationBatchActionPayload
    /** Archives a notification. */
    notificationArchive: NotificationArchivePayload
    /** Archives a notification and all related notifications. */
    notificationArchiveAll: NotificationBatchActionPayload
    /** Unarchives a notification. */
    notificationUnarchive: NotificationArchivePayload
    /** Creates a new issue. */
    issueCreate: IssuePayload
    /** Creates a list of issues in one transaction. */
    issueBatchCreate: IssueBatchPayload
    /** Updates an issue. */
    issueUpdate: IssuePayload
    /** Updates multiple issues at once. */
    issueBatchUpdate: IssueBatchPayload
    /** Archives an issue. */
    issueArchive: IssueArchivePayload
    /** Unarchives an issue. */
    issueUnarchive: IssueArchivePayload
    /** Deletes (trashes) an issue. */
    issueDelete: IssueArchivePayload
    /** Adds a label to an issue. */
    issueAddLabel: IssuePayload
    /** Removes a label from an issue. */
    issueRemoveLabel: IssuePayload
    /** Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached. */
    issueReminder: IssuePayload
    /** Subscribes a user to an issue. */
    issueSubscribe: IssuePayload
    /** Unsubscribes a user from an issue. */
    issueUnsubscribe: IssuePayload
    /** [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly. */
    issueDescriptionUpdateFromFront: IssuePayload
    /** [INTERNAL] Updates the summary of an issue. */
    updateIssueSummary: IssuePayload
    /** Creates a new issue relation. */
    issueRelationCreate: IssueRelationPayload
    /** Updates an issue relation. */
    issueRelationUpdate: IssueRelationPayload
    /** Deletes an issue relation. */
    issueRelationDelete: DeletePayload
    /** Creates a new label. */
    issueLabelCreate: IssueLabelPayload
    /** Updates an label. */
    issueLabelUpdate: IssueLabelPayload
    /** Deletes an issue label. */
    issueLabelDelete: DeletePayload
    /** Kicks off a GitHub import job. */
    issueImportCreateGithub: IssueImportPayload
    /** Kicks off a Jira import job. */
    issueImportCreateJira: IssueImportPayload
    /** Kicks off a Jira import job from a CSV. */
    issueImportCreateCSVJira: IssueImportPayload
    /** Kicks off a Shortcut (formerly Clubhouse) import job. */
    issueImportCreateClubhouse: IssueImportPayload
    /** Kicks off an Asana import job. */
    issueImportCreateAsana: IssueImportPayload
    /** [INTERNAL] Kicks off a Linear to Linear import job. */
    issueImportCreateLinearV2: IssueImportPayload
    /** Deletes an import job. */
    issueImportDelete: IssueImportDeletePayload
    /** Kicks off import processing. */
    issueImportProcess: IssueImportPayload
    /** Updates the mapping for the issue import. */
    issueImportUpdate: IssueImportPayload
    /** Creates new settings for one or more integrations. */
    integrationsSettingsCreate: IntegrationsSettingsPayload
    /** Updates settings related to integrations for a project or a team. */
    integrationsSettingsUpdate: IntegrationsSettingsPayload
    /** Creates a new integrationTemplate join. */
    integrationTemplateCreate: IntegrationTemplatePayload
    /** Deletes a integrationTemplate. */
    integrationTemplateDelete: DeletePayload
    /** [INTERNAL] Updates the integration. */
    integrationUpdate: IntegrationPayload
    /**
     * @deprecated Use integrationUpdate instead.
     * [INTERNAL] Updates the integration settings.
     */
    integrationSettingsUpdate: IntegrationPayload
    /** Generates a webhook for the GitHub commit integration. */
    integrationGithubCommitCreate: GitHubCommitIntegrationPayload
    /** Connects the organization with the GitHub App. */
    integrationGithubConnect: IntegrationPayload
    /** Connects the organization with the GitHub Import App. */
    integrationGithubImportConnect: IntegrationPayload
    /** Refreshes the data for a GitHub import integration. */
    integrationGithubImportRefresh: IntegrationPayload
    /** Connects the organization with a GitHub Enterprise Server. */
    integrationGitHubEnterpriseServerConnect: GitHubEnterpriseServerPayload
    /** Connects the organization with a GitLab Access Token. */
    integrationGitlabConnect: GitLabIntegrationCreatePayload
    /** Creates an integration api key for Airbyte to connect with Linear. */
    airbyteIntegrationConnect: IntegrationPayload
    /** [Internal] Connects the Google Calendar to the user to this Linear account via OAuth2. */
    integrationGoogleCalendarPersonalConnect: IntegrationPayload
    /** [INTERNAL] Integrates the organization with LaunchDarkly. */
    integrationLaunchDarklyConnect: IntegrationPayload
    /** [INTERNAL] Integrates your personal account with LaunchDarkly. */
    integrationLaunchDarklyPersonalConnect: IntegrationPayload
    /** [INTERNAL] Connects the organization with a Jira Personal Access Token. */
    jiraIntegrationConnect: IntegrationPayload
    /** [INTERNAL] Updates a Jira Integration. */
    integrationJiraUpdate: IntegrationPayload
    /** Connect your Jira account to Linear. */
    integrationJiraPersonal: IntegrationPayload
    /** Connect your GitHub account to Linear. */
    integrationGitHubPersonal: IntegrationPayload
    /** Integrates the organization with Intercom. */
    integrationIntercom: IntegrationPayload
    /** Disconnects the organization from Intercom. */
    integrationIntercomDelete: IntegrationPayload
    /** [INTERNAL] Refreshes the customer data attributes from the specified integration service. */
    integrationCustomerDataAttributesRefresh: IntegrationPayload
    /**
     * @deprecated This mutation is deprecated, please use `integrationSettingsUpdate` instead
     * [DEPRECATED] Updates settings on the Intercom integration.
     */
    integrationIntercomSettingsUpdate: IntegrationPayload
    /** Integrates the organization with Discord. */
    integrationDiscord: IntegrationPayload
    /** [INTERNAL] Integrates the organization with Opsgenie. */
    integrationOpsgenieConnect: IntegrationPayload
    /** [INTERNAL] Refresh Opsgenie schedule mappings. */
    integrationOpsgenieRefreshScheduleMappings: IntegrationPayload
    /** [INTERNAL] Integrates the organization with PagerDuty. */
    integrationPagerDutyConnect: IntegrationPayload
    /** [INTERNAL] Refresh PagerDuty schedule mappings. */
    integrationPagerDutyRefreshScheduleMappings: IntegrationPayload
    /** [Internal] Updates existing Slack integration scopes. */
    updateIntegrationSlackScopes: IntegrationPayload
    /** Integrates the organization with Slack. */
    integrationSlack: IntegrationPayload
    /** Integrates the organization with the Slack Asks app. */
    integrationSlackAsks: IntegrationPayload
    /** Integrates your personal notifications with Slack. */
    integrationSlackPersonal: IntegrationPayload
    /** Connect a Slack channel to Asks. */
    integrationAsksConnectChannel: AsksChannelConnectPayload
    /** Slack integration for team notifications. */
    integrationSlackPost: SlackChannelConnectPayload
    /** Slack integration for project notifications. */
    integrationSlackProjectPost: SlackChannelConnectPayload
    /** [Internal] Slack integration for initiative notifications. */
    integrationSlackInitiativePost: SlackChannelConnectPayload
    /** Slack integration for custom view notifications. */
    integrationSlackCustomViewNotifications: SlackChannelConnectPayload
    /** Integrates a Slack Asks channel with a Customer. */
    integrationSlackCustomerChannelLink: SuccessPayload
    /** Slack integration for organization level project update notifications. */
    integrationSlackOrgProjectUpdatesPost: SlackChannelConnectPayload
    /** [Internal] Slack integration for organization level initiative update notifications. */
    integrationSlackOrgInitiativeUpdatesPost: SlackChannelConnectPayload
    /** Imports custom emojis from your Slack workspace. */
    integrationSlackImportEmojis: IntegrationPayload
    /** Integrates the organization with Figma. */
    integrationFigma: IntegrationPayload
    /** Integrates the organization with Google Sheets. */
    integrationGoogleSheets: IntegrationPayload
    /** Manually update Google Sheets data. */
    refreshGoogleSheetsData: IntegrationPayload
    /** Integrates the organization with Sentry. */
    integrationSentryConnect: IntegrationPayload
    /** Integrates the organization with Front. */
    integrationFront: IntegrationPayload
    /** Integrates the organization with Zendesk. */
    integrationZendesk: IntegrationPayload
    /**
     * @deprecated Not available.
     * Enables Loom integration for the organization.
     */
    integrationLoom: IntegrationPayload
    /** Integrates the organization with Salesforce. */
    integrationSalesforce: IntegrationPayload
    /** [INTERNAL] Refreshes the Salesforce integration metadata. */
    integrationSalesforceMetadataRefresh: IntegrationPayload
    /** Deletes an integration. */
    integrationDelete: DeletePayload
    /** Archives an integration. */
    integrationArchive: DeletePayload
    /** Requests a currently unavailable integration. */
    integrationRequest: IntegrationRequestPayload
    /** Creates a initiative update. */
    initiativeUpdateCreate: InitiativeUpdatePayload
    /** Updates an update. */
    initiativeUpdateUpdate: InitiativeUpdatePayload
    /** Archives an initiative update. */
    initiativeUpdateArchive: InitiativeUpdateArchivePayload
    /** Create a notification to remind a user about an initiative update. */
    createInitiativeUpdateReminder: InitiativeUpdateReminderPayload
    /** Unarchives an initiative update. */
    initiativeUpdateUnarchive: InitiativeUpdateArchivePayload
    /** Creates a new initiativeToProject join. */
    initiativeToProjectCreate: InitiativeToProjectPayload
    /** Updates a initiativeToProject. */
    initiativeToProjectUpdate: InitiativeToProjectPayload
    /** Deletes a initiativeToProject. */
    initiativeToProjectDelete: DeletePayload
    /** Creates a new initiative. */
    initiativeCreate: InitiativePayload
    /** Updates a initiative. */
    initiativeUpdate: InitiativePayload
    /** Archives a initiative. */
    initiativeArchive: InitiativeArchivePayload
    /** Unarchives a initiative. */
    initiativeUnarchive: InitiativeArchivePayload
    /** Deletes (trashes) an initiative. */
    initiativeDelete: DeletePayload
    /** Creates a new initiative relation. */
    initiativeRelationCreate: InitiativeRelationPayload
    /** Updates an initiative relation. */
    initiativeRelationUpdate: DeletePayload
    /** Deletes an initiative relation. */
    initiativeRelationDelete: DeletePayload
    /** Creates a Git target branch automation. */
    gitAutomationTargetBranchCreate: GitAutomationTargetBranchPayload
    /** Updates an existing Git target branch automation. */
    gitAutomationTargetBranchUpdate: GitAutomationTargetBranchPayload
    /** Archives a Git target branch automation. */
    gitAutomationTargetBranchDelete: DeletePayload
    /** Creates a new automation state. */
    gitAutomationStateCreate: GitAutomationStatePayload
    /** Updates an existing state. */
    gitAutomationStateUpdate: GitAutomationStatePayload
    /** Archives an automation state. */
    gitAutomationStateDelete: DeletePayload
    /** XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage. */
    fileUpload: UploadPayload
    /** XHR request payload to upload a file for import, directly to Linear's cloud storage. */
    importFileUpload: UploadPayload
    /** Upload an image from an URL to Linear. */
    imageUploadFromUrl: ImageUploadFromUrlPayload
    /** Creates a new favorite (project, cycle etc). */
    favoriteCreate: FavoritePayload
    /** Updates a favorite. */
    favoriteUpdate: FavoritePayload
    /** Deletes a favorite reference. */
    favoriteDelete: DeletePayload
    /** Creates a new entity link. */
    entityExternalLinkCreate: EntityExternalLinkPayload
    /** Updates an entity link. */
    entityExternalLinkUpdate: EntityExternalLinkPayload
    /** Deletes an entity link. */
    entityExternalLinkDelete: DeletePayload
    /** Creates a custom emoji. */
    emojiCreate: EmojiPayload
    /** Deletes an emoji. */
    emojiDelete: DeletePayload
    /** Unsubscribes the user from one type of email. */
    emailUnsubscribe: EmailUnsubscribePayload
    /** Creates a new email intake address. */
    emailIntakeAddressCreate: EmailIntakeAddressPayload
    /** Rotates an existing email intake address. */
    emailIntakeAddressRotate: EmailIntakeAddressPayload
    /** Updates an existing email intake address. */
    emailIntakeAddressUpdate: EmailIntakeAddressPayload
    /** Deletes an email intake address object. */
    emailIntakeAddressDelete: DeletePayload
    /** Creates a new document. */
    documentCreate: DocumentPayload
    /** Updates a document. */
    documentUpdate: DocumentPayload
    /** Deletes (trashes) a document. */
    documentDelete: DocumentArchivePayload
    /** Restores a document. */
    documentUnarchive: DocumentArchivePayload
    /** Creates a new cycle. */
    cycleCreate: CyclePayload
    /** Updates a cycle. */
    cycleUpdate: CyclePayload
    /** Archives a cycle. */
    cycleArchive: CycleArchivePayload
    /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
    cycleShiftAll: CyclePayload
    /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
    cycleStartUpcomingCycleToday: CyclePayload
    /** Creates a new customer tier. */
    customerTierCreate: CustomerTierPayload
    /** Updates a customer tier. */
    customerTierUpdate: CustomerTierPayload
    /** Deletes a customer tier. */
    customerTierDelete: DeletePayload
    /** Creates a new customer status. */
    customerStatusCreate: CustomerStatusPayload
    /** Updates a customer status. */
    customerStatusUpdate: CustomerStatusPayload
    /** Deletes a customer status. */
    customerStatusDelete: DeletePayload
    /** Creates a new customer. */
    customerCreate: CustomerPayload
    /** Updates a customer */
    customerUpdate: CustomerPayload
    /** Deletes a customer. */
    customerDelete: DeletePayload
    /** Merges two customers. */
    customerMerge: CustomerPayload
    /** Upserts a customer, creating it if it doesn't exists, updating it otherwise. Matches against an existing customer with `id` or `externalId` */
    customerUpsert: CustomerPayload
    /** Creates a new customer need. */
    customerNeedCreate: CustomerNeedPayload
    /** Creates a new customer need out of an attachment */
    customerNeedCreateFromAttachment: CustomerNeedPayload
    /** Updates a customer need */
    customerNeedUpdate: CustomerNeedUpdatePayload
    /** Deletes a customer need. */
    customerNeedDelete: DeletePayload
    /** Archives a customer need. */
    customerNeedArchive: CustomerNeedArchivePayload
    /** Unarchives a customer need. */
    customerNeedUnarchive: CustomerNeedArchivePayload
    /** Creates a new custom view. */
    customViewCreate: CustomViewPayload
    /** Updates a custom view. */
    customViewUpdate: CustomViewPayload
    /** Deletes a custom view. */
    customViewDelete: DeletePayload
    /** Saves user message. */
    contactCreate: ContactPayload
    /** [INTERNAL] Saves sales pricing inquiry to Front. */
    contactSalesCreate: ContactPayload
    /** Creates a new comment. */
    commentCreate: CommentPayload
    /** Updates a comment. */
    commentUpdate: CommentPayload
    /** Deletes a comment. */
    commentDelete: DeletePayload
    /** Resolves a comment. */
    commentResolve: CommentPayload
    /** Unresolves a comment. */
    commentUnresolve: CommentPayload
    /** Finds or creates a new user account by email and sends an email with token. */
    emailUserAccountAuthChallenge: EmailUserAccountAuthChallengeResponse
    /** Authenticates a user account via email and authentication token. */
    emailTokenUserAccountAuth: AuthResolverResponse
    /** Authenticates a user account via email and authentication token for SAML. */
    samlTokenUserAccountAuth: AuthResolverResponse
    /** Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow. */
    googleUserAccountAuth: AuthResolverResponse
    /** [INTERNAL] Starts passkey login process. */
    passkeyLoginStart: PasskeyLoginStartResponse
    /** [INTERNAL] Finish passkey login process. */
    passkeyLoginFinish: AuthResolverResponse
    /** Creates an organization from onboarding. */
    createOrganizationFromOnboarding: CreateOrJoinOrganizationResponse
    /** Join an organization from onboarding. */
    joinOrganizationFromOnboarding: CreateOrJoinOrganizationResponse
    /** Leave an organization. */
    leaveOrganization: CreateOrJoinOrganizationResponse
    /** Logout the client. */
    logout: LogoutResponse
    /** Logout an individual session with its ID. */
    logoutSession: LogoutResponse
    /** Logout all of user's sessions including the active one. */
    logoutAllSessions: LogoutResponse
    /** Logout all of user's sessions excluding the current one. */
    logoutOtherSessions: LogoutResponse
    /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
    attachmentCreate: AttachmentPayload
    /** Updates an existing issue attachment. */
    attachmentUpdate: AttachmentPayload
    /** Link any url to an issue. */
    attachmentLinkURL: AttachmentPayload
    /** Link an existing GitLab MR to an issue. */
    attachmentLinkGitLabMR: AttachmentPayload
    /** Link a GitHub issue to a Linear issue. */
    attachmentLinkGitHubIssue: AttachmentPayload
    /** Link a GitHub pull request to an issue. */
    attachmentLinkGitHubPR: AttachmentPayload
    /** Link an existing Zendesk ticket to an issue. */
    attachmentLinkZendesk: AttachmentPayload
    /** Link an existing Discord message to an issue. */
    attachmentLinkDiscord: AttachmentPayload
    /** Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue. */
    attachmentSyncToSlack: AttachmentPayload
    /** Link an existing Slack message to an issue. */
    attachmentLinkSlack: AttachmentPayload
    /** Link an existing Front conversation to an issue. */
    attachmentLinkFront: FrontAttachmentPayload
    /** Link an existing Intercom conversation to an issue. */
    attachmentLinkIntercom: AttachmentPayload
    /** Link an existing Jira issue to an issue. */
    attachmentLinkJiraIssue: AttachmentPayload
    /** Link an existing Salesforce case to an issue. */
    attachmentLinkSalesforce: AttachmentPayload
    /** Deletes an issue attachment. */
    attachmentDelete: DeletePayload
    /** [INTERNAL] Creates a new API key. */
    apiKeyCreate: ApiKeyPayload
    /** [INTERNAL] Deletes an API key. */
    apiKeyDelete: DeletePayload
    /** [INTERNAL] Updates an API key's allowed teams. */
    apiKeyUpdate: ApiKeyPayload
    /** Creates an agent context. */
    agentContextCreate: AgentContextPayload
    /** Updates an agent context. */
    agentContextUpdate: AgentContextPayload
    /** Creates an agent activity. */
    agentActivityCreate: AgentActivityPayload
    __typename: 'Mutation'
}

export interface WorkflowStatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The state that was created or updated. */
    workflowState: WorkflowState
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'WorkflowStatePayload'
}


/** A generic payload return from entity archive mutations. */
export interface WorkflowStateArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (WorkflowState | null)
    __typename: 'WorkflowStateArchivePayload'
}


/** A generic payload return from entity archive or deletion mutations. */
export type ArchivePayload = (WorkflowStateArchivePayload | DeletePayload | ProjectArchivePayload | TeamArchivePayload | RoadmapArchivePayload | ProjectUpdateArchivePayload | ProjectStatusArchivePayload | NotificationArchivePayload | IssueArchivePayload | InitiativeUpdateArchivePayload | InitiativeArchivePayload | DocumentArchivePayload | CycleArchivePayload | CustomerNeedArchivePayload) & { __isUnion?: true }

export interface WebhookPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The webhook entity being mutated. */
    webhook: Webhook
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'WebhookPayload'
}


/** A generic payload return from entity deletion mutations. */
export interface DeletePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The identifier of the deleted entity. */
    entityId: Scalars['String']
    __typename: 'DeletePayload'
}

export interface ViewPreferencesPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The view preferences entity being mutated. */
    viewPreferences: ViewPreferences
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ViewPreferencesPayload'
}


/** The type of view preferences (either user or organization level preferences). */
export type ViewPreferencesType = 'organization' | 'user'


/** The client view this custom view is targeting. */
export type ViewType = 'inbox' | 'myIssues' | 'myIssuesCreatedByMe' | 'myIssuesSubscribedTo' | 'myIssuesActivity' | 'userProfile' | 'userProfileCreatedByUser' | 'board' | 'completedCycle' | 'cycle' | 'project' | 'projectDocuments' | 'label' | 'triage' | 'activeIssues' | 'backlog' | 'subIssues' | 'allIssues' | 'dashboards' | 'customView' | 'customViews' | 'roadmapAll' | 'initiative' | 'initiativeOverview' | 'initiativeOverviewSubInitiatives' | 'initiatives' | 'initiativesPlanned' | 'initiativesCompleted' | 'projects' | 'projectsAll' | 'projectsBacklog' | 'projectsClosed' | 'projectLabel' | 'search' | 'splitSearch' | 'teams' | 'archive' | 'quickView' | 'issueIdentifiers' | 'customers' | 'customer' | 'embeddedCustomerNeeds' | 'projectCustomerNeeds' | 'reviews' | 'myReviews' | 'feedAll' | 'feedCreated' | 'feedFollowing' | 'feedPopular' | 'workspaceMembers' | 'customRoadmap' | 'roadmap' | 'roadmaps' | 'roadmapClosed' | 'roadmapBacklog'

export interface UserSettingsPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The user's settings. */
    userSettings: UserSettings
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UserSettingsPayload'
}

export interface UserSettingsFlagsResetPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UserSettingsFlagsResetPayload'
}


/** The types of flags that the user can have. */
export type UserFlagType = 'updatedSlackThreadSyncIntegration' | 'completedOnboarding' | 'desktopInstalled' | 'teamsPageIntroductionDismissed' | 'joinTeamIntroductionDismissed' | 'desktopDownloadToastDismissed' | 'emptyBacklogDismissed' | 'emptyCustomViewsDismissed' | 'emptyActiveIssuesDismissed' | 'emptyMyIssuesDismissed' | 'triageWelcomeDismissed' | 'cycleWelcomeDismissed' | 'projectWelcomeDismissed' | 'projectBacklogWelcomeDismissed' | 'projectUpdatesWelcomeDismissed' | 'pulseWelcomeDismissed' | 'analyticsWelcomeDismissed' | 'insightsWelcomeDismissed' | 'insightsHelpDismissed' | 'figmaPromptDismissed' | 'issueMovePromptCompleted' | 'migrateThemePreference' | 'listSelectionTip' | 'emptyParagraphSlashCommandTip' | 'editorSlashCommandUsed' | 'canPlaySnake' | 'canPlayTetris' | 'importBannerDismissed' | 'tryInvitePeopleDismissed' | 'tryRoadmapsDismissed' | 'tryCyclesDismissed' | 'tryTriageDismissed' | 'tryGithubDismissed' | 'rewindBannerDismissed' | 'helpIslandFeatureInsightsDismissed' | 'dueDateShortcutMigration' | 'slackCommentReactionTipShown' | 'issueLabelSuggestionUsed' | 'threadedCommentsNudgeIsSeen' | 'desktopTabsOnboardingDismissed' | 'milestoneOnboardingIsSeenAndDismissed' | 'projectBoardOnboardingIsSeenAndDismissed' | 'figmaPluginBannerDismissed' | 'initiativesBannerDismissed' | 'commandMenuClearShortcutTip' | 'all'

export interface UserSettingsFlagPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The flag key which was updated. */
    flag: (Scalars['String'] | null)
    /** The flag value after update. */
    value: (Scalars['Int'] | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UserSettingsFlagPayload'
}


/** Operations that can be applied to UserFlagType. */
export type UserFlagUpdateOperation = 'incr' | 'decr' | 'clear' | 'lock'


/** The delivery channels a user can receive notifications in. */
export type NotificationChannel = 'desktop' | 'mobile' | 'email' | 'slack'


/** The categories of notifications a user can subscribe to. */
export type NotificationCategory = 'assignments' | 'statusChanges' | 'commentsAndReplies' | 'mentions' | 'reactions' | 'subscriptions' | 'documentChanges' | 'postsAndUpdates' | 'reminders' | 'reviews' | 'appsAndIntegrations' | 'triage' | 'customers' | 'system'

export interface UserPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The user that was created or updated. */
    user: (User | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UserPayload'
}

export interface UserAdminPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UserAdminPayload'
}

export interface TriageResponsibilityPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    triageResponsibility: TriageResponsibility
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'TriageResponsibilityPayload'
}

export interface TimeSchedulePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    timeSchedule: TimeSchedule
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'TimeSchedulePayload'
}

export interface TemplatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The template that was created or updated. */
    template: Template
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'TemplatePayload'
}

export interface ProjectPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project that was created or updated. */
    project: (Project | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectPayload'
}

export interface SuccessPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'SuccessPayload'
}


/** A generic payload return from entity archive mutations. */
export interface ProjectArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Project | null)
    __typename: 'ProjectArchivePayload'
}

export interface TeamPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The team that was created or updated. */
    team: (Team | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'TeamPayload'
}


/** [Internal] The scope of product intelligence suggestion data for a team. */
export type ProductIntelligenceScope = 'workspace' | 'teamHierarchy' | 'team' | 'none'


/** A generic payload return from entity archive mutations. */
export interface TeamArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Team | null)
    __typename: 'TeamArchivePayload'
}

export interface TeamMembershipPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The team membership that was created or updated. */
    teamMembership: (TeamMembership | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'TeamMembershipPayload'
}

export interface RoadmapToProjectPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The roadmapToProject that was created or updated. */
    roadmapToProject: RoadmapToProject
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'RoadmapToProjectPayload'
}

export interface RoadmapPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The roadmap that was created or updated. */
    roadmap: Roadmap
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'RoadmapPayload'
}


/** A generic payload return from entity archive mutations. */
export interface RoadmapArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Roadmap | null)
    __typename: 'RoadmapArchivePayload'
}

export interface CreateCsvExportReportPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CreateCsvExportReportPayload'
}

export interface ReactionPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    reaction: Reaction
    success: Scalars['Boolean']
    __typename: 'ReactionPayload'
}

export interface PushSubscriptionPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The push subscription that was created or updated. */
    entity: PushSubscription
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'PushSubscriptionPayload'
}


/** A user's web or mobile push notification subscription. */
export interface PushSubscription {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    __typename: 'PushSubscription'
}


/** The different push subscription types. */
export type PushSubscriptionType = 'web' | 'apple' | 'appleDevelopment' | 'firebase'

export interface ProjectUpdatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project update that was created or updated. */
    projectUpdate: ProjectUpdate
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectUpdatePayload'
}


/** A generic payload return from entity archive mutations. */
export interface ProjectUpdateArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (ProjectUpdate | null)
    __typename: 'ProjectUpdateArchivePayload'
}

export interface ProjectUpdateReminderPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectUpdateReminderPayload'
}

export interface ProjectStatusPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project status that was created or updated. */
    status: ProjectStatus
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectStatusPayload'
}


/** A generic payload return from entity archive mutations. */
export interface ProjectStatusArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (ProjectStatus | null)
    __typename: 'ProjectStatusArchivePayload'
}

export interface ProjectRelationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project relation that was created or updated. */
    projectRelation: ProjectRelation
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectRelationPayload'
}

export interface ProjectMilestonePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project milestone that was created or updated. */
    projectMilestone: ProjectMilestone
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ProjectMilestonePayload'
}

export interface ProjectMilestoneMovePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The project milestone that was created or updated. */
    projectMilestone: ProjectMilestone
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** A snapshot of the issues that were moved to new teams, if the user selected to do it, containing an array of mappings between an issue and its previous team. Store on the client to use for undoing a previous milestone move. */
    previousIssueTeamIds: (ProjectMilestoneMoveIssueToTeam[] | null)
    /** A snapshot of the project that had new teams added to it, if the user selected to do it, containing an array of mappings between a project and its previous teams. Store on the client to use for undoing a previous milestone move. */
    previousProjectTeamIds: (ProjectMilestoneMoveProjectTeams | null)
    __typename: 'ProjectMilestoneMovePayload'
}

export interface ProjectMilestoneMoveIssueToTeam {
    /** The issue id in this relationship, you can use * as wildcard if all issues are being moved to the same team */
    issueId: Scalars['String']
    /** The team id in this relationship */
    teamId: Scalars['String']
    __typename: 'ProjectMilestoneMoveIssueToTeam'
}

export interface ProjectMilestoneMoveProjectTeams {
    /** The project id */
    projectId: Scalars['String']
    /** The team ids for the project */
    teamIds: Scalars['String'][]
    __typename: 'ProjectMilestoneMoveProjectTeams'
}

export interface OrganizationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The organization that was created or updated. */
    organization: (Organization | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationPayload'
}

export interface OrganizationDeletePayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationDeletePayload'
}

export interface OrganizationCancelDeletePayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationCancelDeletePayload'
}

export interface OrganizationStartTrialPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationStartTrialPayload'
}

export interface OrganizationInvitePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The organization invite that was created or updated. */
    organizationInvite: OrganizationInvite
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationInvitePayload'
}


/** [INTERNAL] Organization domain operation response. */
export interface OrganizationDomainSimplePayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationDomainSimplePayload'
}


/** [INTERNAL] Organization domain operation response. */
export interface OrganizationDomainPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The organization domain that was created or updated. */
    organizationDomain: OrganizationDomain
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'OrganizationDomainPayload'
}


/** Defines the use of a domain by an organization. */
export interface OrganizationDomain {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Domain name. */
    name: Scalars['String']
    /** Is this domain verified. */
    verified: Scalars['Boolean']
    /** E-mail used to verify this domain. */
    verificationEmail: (Scalars['String'] | null)
    /** The user who added the domain. */
    creator: (User | null)
    /** What type of auth is the domain used for. */
    authType: OrganizationDomainAuthType
    /** Whether the domains was claimed by the organization through DNS verification. */
    claimed: (Scalars['Boolean'] | null)
    /** Prevent users with this domain to create new workspaces. */
    disableOrganizationCreation: (Scalars['Boolean'] | null)
    __typename: 'OrganizationDomain'
}


/** What type of auth is the domain used for. */
export type OrganizationDomainAuthType = 'saml' | 'general'

export interface NotificationSubscriptionPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The notification subscription that was created or updated. */
    notificationSubscription: NotificationSubscription
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'NotificationSubscriptionPayload'
}

export interface NotificationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The notification that was created or updated. */
    notification: Notification
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'NotificationPayload'
}

export interface NotificationBatchActionPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The notifications that were updated. */
    notifications: Notification[]
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'NotificationBatchActionPayload'
}


/** A generic payload return from entity archive mutations. */
export interface NotificationArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Notification | null)
    __typename: 'NotificationArchivePayload'
}

export interface IssuePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The issue that was created or updated. */
    issue: (Issue | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssuePayload'
}

export interface IssueBatchPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The issues that were updated. */
    issues: Issue[]
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueBatchPayload'
}


/** A generic payload return from entity archive mutations. */
export interface IssueArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Issue | null)
    __typename: 'IssueArchivePayload'
}

export interface IssueRelationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The issue relation that was created or updated. */
    issueRelation: IssueRelation
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueRelationPayload'
}


/** The type of the issue relation. */
export type IssueRelationType = 'blocks' | 'duplicate' | 'related' | 'similar'

export interface IssueLabelPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The label that was created or updated. */
    issueLabel: IssueLabel
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueLabelPayload'
}

export interface IssueImportPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The import job that was created or updated. */
    issueImport: (IssueImport | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueImportPayload'
}

export interface IssueImportDeletePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The import job that was deleted. */
    issueImport: (IssueImport | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IssueImportDeletePayload'
}

export interface IntegrationsSettingsPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The settings that were created or updated. */
    integrationsSettings: IntegrationsSettings
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IntegrationsSettingsPayload'
}

export interface IntegrationTemplatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The IntegrationTemplate that was created or updated. */
    integrationTemplate: IntegrationTemplate
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IntegrationTemplatePayload'
}

export interface IntegrationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IntegrationPayload'
}

export type SlackChannelType = 'DirectMessage' | 'MultiPersonDirectMessage' | 'Private' | 'Public'

export type PullRequestReviewTool = 'source' | 'graphite'

export type GithubOrgType = 'user' | 'organization'

export interface GitHubCommitIntegrationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The webhook secret to provide to GitHub. */
    webhookSecret: Scalars['String']
    __typename: 'GitHubCommitIntegrationPayload'
}

export interface GitHubEnterpriseServerPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The setup address. */
    setupUrl: Scalars['String']
    /** The app install address. */
    installUrl: Scalars['String']
    /** The webhook secret to provide to GitHub. */
    webhookSecret: Scalars['String']
    __typename: 'GitHubEnterpriseServerPayload'
}

export interface GitLabIntegrationCreatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The webhook secret to provide to GitLab. */
    webhookSecret: Scalars['String']
    __typename: 'GitLabIntegrationCreatePayload'
}

export interface AsksChannelConnectPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The new Asks Slack channel mapping for the connected channel. */
    mapping: SlackChannelNameMapping
    /** Whether the bot needs to be manually added to the channel. */
    addBot: Scalars['Boolean']
    __typename: 'AsksChannelConnectPayload'
}


/** Object for mapping Slack channel IDs to names and other settings. */
export interface SlackChannelNameMapping {
    /** The Slack channel ID. */
    id: Scalars['String']
    /** The Slack channel name. */
    name: Scalars['String']
    /** Whether or not the Slack channel is private. */
    isPrivate: (Scalars['Boolean'] | null)
    /** Whether or not the Slack channel is shared with an external org. */
    isShared: (Scalars['Boolean'] | null)
    /** Whether or not the Linear Asks bot has been added to this Slack channel. */
    botAdded: (Scalars['Boolean'] | null)
    /** Which teams are connected to the channel and settings for those teams. */
    teams: SlackAsksTeamSettings[]
    /** Whether or not top-level messages in this channel should automatically create Asks. */
    autoCreateOnMessage: (Scalars['Boolean'] | null)
    /** Whether or not using the :ticket: emoji in this channel should automatically create Asks. */
    autoCreateOnEmoji: (Scalars['Boolean'] | null)
    /** Whether or not @-mentioning the bot should automatically create an Ask with the message. */
    autoCreateOnBotMention: (Scalars['Boolean'] | null)
    /** The optional template ID to use for Asks auto-created in this channel. If not set, auto-created Asks won't use any template. */
    autoCreateTemplateId: (Scalars['String'] | null)
    /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is canceled. */
    postCancellationUpdates: (Scalars['Boolean'] | null)
    /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is completed. */
    postCompletionUpdates: (Scalars['Boolean'] | null)
    /** Whether or not synced Slack threads should be updated with a message when their Ask is accepted from triage. */
    postAcceptedFromTriageUpdates: (Scalars['Boolean'] | null)
    /** Whether or not to use AI to generate titles for Asks created in this channel. */
    aiTitles: (Scalars['Boolean'] | null)
    __typename: 'SlackChannelNameMapping'
}


/** Tuple for mapping Slack channel IDs to names. */
export interface SlackAsksTeamSettings {
    /** The Linear team ID. */
    id: Scalars['String']
    /** Whether the default Asks template is enabled in the given channel for this team. */
    hasDefaultAsk: Scalars['Boolean']
    __typename: 'SlackAsksTeamSettings'
}

export interface SlackChannelConnectPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The integration that was created or updated. */
    integration: (Integration | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** Whether the bot needs to be manually added to the channel. */
    addBot: Scalars['Boolean']
    /** Whether it's recommended to connect main Slack integration. */
    nudgeToConnectMainSlackIntegration: (Scalars['Boolean'] | null)
    /** Whether it's recommended to update main Slack integration. */
    nudgeToUpdateMainSlackIntegration: (Scalars['Boolean'] | null)
    __typename: 'SlackChannelConnectPayload'
}

export interface IntegrationRequestPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'IntegrationRequestPayload'
}

export interface InitiativeUpdatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The initiative update that was created. */
    initiativeUpdate: InitiativeUpdate
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'InitiativeUpdatePayload'
}


/** A generic payload return from entity archive mutations. */
export interface InitiativeUpdateArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (InitiativeUpdate | null)
    __typename: 'InitiativeUpdateArchivePayload'
}

export interface InitiativeUpdateReminderPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'InitiativeUpdateReminderPayload'
}


/** The result of a initiativeToProject mutation. */
export interface InitiativeToProjectPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The initiativeToProject that was created or updated. */
    initiativeToProject: InitiativeToProject
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'InitiativeToProjectPayload'
}


/** The payload returned by the initiative mutations. */
export interface InitiativePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The initiative that was created or updated. */
    initiative: Initiative
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'InitiativePayload'
}


/** A generic payload return from entity archive mutations. */
export interface InitiativeArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Initiative | null)
    __typename: 'InitiativeArchivePayload'
}

export interface InitiativeRelationPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The initiative relation that was created or updated. */
    initiativeRelation: InitiativeRelation
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'InitiativeRelationPayload'
}

export interface GitAutomationTargetBranchPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The Git target branch automation that was created or updated. */
    targetBranch: GitAutomationTargetBranch
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'GitAutomationTargetBranchPayload'
}

export interface GitAutomationStatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The automation state that was created or updated. */
    gitAutomationState: GitAutomationState
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'GitAutomationStatePayload'
}

export interface UploadPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Object describing the file to be uploaded. */
    uploadFile: (UploadFile | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'UploadPayload'
}


/** Object representing Google Cloud upload policy, plus additional data. */
export interface UploadFile {
    /** The filename. */
    filename: Scalars['String']
    /** The content type. */
    contentType: Scalars['String']
    /** The size of the uploaded file. */
    size: Scalars['Int']
    /** The signed URL the for the uploaded file. (assigned automatically). */
    uploadUrl: Scalars['String']
    /** The asset URL for the uploaded file. (assigned automatically). */
    assetUrl: Scalars['String']
    metaData: (Scalars['JSONObject'] | null)
    headers: UploadFileHeader[]
    __typename: 'UploadFile'
}

export interface UploadFileHeader {
    /** Upload file header key. */
    key: Scalars['String']
    /** Upload file header value. */
    value: Scalars['String']
    __typename: 'UploadFileHeader'
}

export interface ImageUploadFromUrlPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The URL containing the image. */
    url: (Scalars['String'] | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ImageUploadFromUrlPayload'
}

export interface FavoritePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The object that was added as a favorite. */
    favorite: Favorite
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'FavoritePayload'
}

export interface EntityExternalLinkPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The link that was created or updated. */
    entityExternalLink: EntityExternalLink
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'EntityExternalLinkPayload'
}

export interface EmojiPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The emoji that was created. */
    emoji: Emoji
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'EmojiPayload'
}

export interface EmailUnsubscribePayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'EmailUnsubscribePayload'
}

export interface EmailIntakeAddressPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The email address that was created or updated. */
    emailIntakeAddress: EmailIntakeAddress
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'EmailIntakeAddressPayload'
}


/** An email address that can be used for submitting issues. */
export interface EmailIntakeAddress {
    /** The unique identifier of the entity. */
    id: Scalars['ID']
    /** The time at which the entity was created. */
    createdAt: Scalars['DateTime']
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars['DateTime']
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt: (Scalars['DateTime'] | null)
    /** Unique email address user name (before @) used for incoming email. */
    address: Scalars['String']
    /** Whether the email address is enabled. */
    enabled: Scalars['Boolean']
    /** Whether email replies are enabled. */
    repliesEnabled: Scalars['Boolean']
    /** The template that the email address is associated with. */
    template: (Template | null)
    /** The team that the email address is associated with. */
    team: (Team | null)
    /** The organization that the email address is associated with. */
    organization: Organization
    /** The user who created the email intake address. */
    creator: (User | null)
    /** Whether issues created from that email address will be turned into customer requests. */
    customerRequestsEnabled: Scalars['Boolean']
    __typename: 'EmailIntakeAddress'
}

export interface DocumentPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The document that was created or updated. */
    document: Document
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'DocumentPayload'
}


/** A generic payload return from entity archive mutations. */
export interface DocumentArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Document | null)
    __typename: 'DocumentArchivePayload'
}

export interface CyclePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The Cycle that was created or updated. */
    cycle: (Cycle | null)
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CyclePayload'
}


/** A generic payload return from entity archive mutations. */
export interface CycleArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (Cycle | null)
    __typename: 'CycleArchivePayload'
}

export interface CustomerTierPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The customer tier that was created or updated. */
    tier: CustomerTier
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CustomerTierPayload'
}

export interface CustomerStatusPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The customer status that was created or updated. */
    status: CustomerStatus
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CustomerStatusPayload'
}

export interface CustomerPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The customer that was created or updated. */
    customer: Customer
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CustomerPayload'
}

export interface CustomerNeedPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The customer need that was created or updated. */
    need: CustomerNeed
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CustomerNeedPayload'
}

export interface CustomerNeedUpdatePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The customer need that was created or updated. */
    need: CustomerNeed
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The related customer needs that were updated. */
    updatedRelatedNeeds: CustomerNeed[]
    __typename: 'CustomerNeedUpdatePayload'
}


/** A generic payload return from entity archive mutations. */
export interface CustomerNeedArchivePayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity: (CustomerNeed | null)
    __typename: 'CustomerNeedArchivePayload'
}

export interface CustomViewPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The custom view that was created or updated. */
    customView: CustomView
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CustomViewPayload'
}

export interface ContactPayload {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ContactPayload'
}

export interface CommentPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The comment that was created or updated. */
    comment: Comment
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'CommentPayload'
}

export interface EmailUserAccountAuthChallengeResponse {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    /** Supported challenge for this user account. Can be either verificationCode or password. */
    authType: Scalars['String']
    __typename: 'EmailUserAccountAuthChallengeResponse'
}

export interface PasskeyLoginStartResponse {
    success: Scalars['Boolean']
    options: Scalars['JSONObject']
    __typename: 'PasskeyLoginStartResponse'
}

export interface CreateOrJoinOrganizationResponse {
    organization: AuthOrganization
    user: AuthUser
    __typename: 'CreateOrJoinOrganizationResponse'
}

export interface LogoutResponse {
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'LogoutResponse'
}

export interface AttachmentPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The issue attachment that was created. */
    attachment: Attachment
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'AttachmentPayload'
}


/** [Internal] The kind of link between an issue and a pull request. */
export type GitLinkKind = 'closes' | 'contributes' | 'links'

export interface FrontAttachmentPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The issue attachment that was created. */
    attachment: Attachment
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'FrontAttachmentPayload'
}

export interface ApiKeyPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The API key that was created. */
    apiKey: ApiKey
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'ApiKeyPayload'
}

export interface AgentContextPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The agent context that was created or updated. */
    agentContext: AgentContext
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'AgentContextPayload'
}

export interface AgentActivityPayload {
    /** The identifier of the last sync operation. */
    lastSyncId: Scalars['Float']
    /** The agent activity that was created or updated. */
    agentActivity: AgentActivity
    /** Whether the operation was successful. */
    success: Scalars['Boolean']
    __typename: 'AgentActivityPayload'
}


/** A customer notification subscription. */
export interface CustomerNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer subscribed to. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Notification subscriptions for models. */
export interface NotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    on_CustomerNotificationSubscription?: CustomerNotificationSubscriptionGenqlSelection
    on_CustomViewNotificationSubscription?: CustomViewNotificationSubscriptionGenqlSelection
    on_CycleNotificationSubscription?: CycleNotificationSubscriptionGenqlSelection
    on_LabelNotificationSubscription?: LabelNotificationSubscriptionGenqlSelection
    on_ProjectNotificationSubscription?: ProjectNotificationSubscriptionGenqlSelection
    on_InitiativeNotificationSubscription?: InitiativeNotificationSubscriptionGenqlSelection
    on_TeamNotificationSubscription?: TeamNotificationSubscriptionGenqlSelection
    on_UserNotificationSubscription?: UserNotificationSubscriptionGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A basic entity. */
export interface EntityGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    on_CustomerNotificationSubscription?: CustomerNotificationSubscriptionGenqlSelection
    on_CustomViewNotificationSubscription?: CustomViewNotificationSubscriptionGenqlSelection
    on_CycleNotificationSubscription?: CycleNotificationSubscriptionGenqlSelection
    on_LabelNotificationSubscription?: LabelNotificationSubscriptionGenqlSelection
    on_ProjectNotificationSubscription?: ProjectNotificationSubscriptionGenqlSelection
    on_InitiativeNotificationSubscription?: InitiativeNotificationSubscriptionGenqlSelection
    on_TeamNotificationSubscription?: TeamNotificationSubscriptionGenqlSelection
    on_UserNotificationSubscription?: UserNotificationSubscriptionGenqlSelection
    on_IssueNotification?: IssueNotificationGenqlSelection
    on_ProjectNotification?: ProjectNotificationGenqlSelection
    on_InitiativeNotification?: InitiativeNotificationGenqlSelection
    on_OauthClientApprovalNotification?: OauthClientApprovalNotificationGenqlSelection
    on_DocumentNotification?: DocumentNotificationGenqlSelection
    on_PostNotification?: PostNotificationGenqlSelection
    on_CustomerNeedNotification?: CustomerNeedNotificationGenqlSelection
    on_PullRequestNotification?: PullRequestNotificationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NodeGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    on_CustomerNotificationSubscription?: CustomerNotificationSubscriptionGenqlSelection
    on_User?: UserGenqlSelection
    on_Organization?: OrganizationGenqlSelection
    on_Facet?: FacetGenqlSelection
    on_Team?: TeamGenqlSelection
    on_WorkflowState?: WorkflowStateGenqlSelection
    on_Issue?: IssueGenqlSelection
    on_DocumentContent?: DocumentContentGenqlSelection
    on_Project?: ProjectGenqlSelection
    on_ProjectStatus?: ProjectStatusGenqlSelection
    on_Template?: TemplateGenqlSelection
    on_ProjectUpdate?: ProjectUpdateGenqlSelection
    on_Reaction?: ReactionGenqlSelection
    on_Comment?: CommentGenqlSelection
    on_InitiativeUpdate?: InitiativeUpdateGenqlSelection
    on_Initiative?: InitiativeGenqlSelection
    on_EntityExternalLink?: EntityExternalLinkGenqlSelection
    on_IntegrationsSettings?: IntegrationsSettingsGenqlSelection
    on_InitiativeHistory?: InitiativeHistoryGenqlSelection
    on_Post?: PostGenqlSelection
    on_ExternalUser?: ExternalUserGenqlSelection
    on_Favorite?: FavoriteGenqlSelection
    on_Cycle?: CycleGenqlSelection
    on_CustomView?: CustomViewGenqlSelection
    on_ViewPreferences?: ViewPreferencesGenqlSelection
    on_Document?: DocumentGenqlSelection
    on_Roadmap?: RoadmapGenqlSelection
    on_IssueLabel?: IssueLabelGenqlSelection
    on_ProjectLabel?: ProjectLabelGenqlSelection
    on_Customer?: CustomerGenqlSelection
    on_CustomerStatus?: CustomerStatusGenqlSelection
    on_CustomerTier?: CustomerTierGenqlSelection
    on_Integration?: IntegrationGenqlSelection
    on_Dashboard?: DashboardGenqlSelection
    on_ProjectMilestone?: ProjectMilestoneGenqlSelection
    on_ProjectHistory?: ProjectHistoryGenqlSelection
    on_ProjectRelation?: ProjectRelationGenqlSelection
    on_CustomerNeed?: CustomerNeedGenqlSelection
    on_Attachment?: AttachmentGenqlSelection
    on_ProjectAttachment?: ProjectAttachmentGenqlSelection
    on_Meeting?: MeetingGenqlSelection
    on_IssueHistory?: IssueHistoryGenqlSelection
    on_IssueImport?: IssueImportGenqlSelection
    on_IssueRelation?: IssueRelationGenqlSelection
    on_IssueSuggestion?: IssueSuggestionGenqlSelection
    on_TriageResponsibility?: TriageResponsibilityGenqlSelection
    on_TimeSchedule?: TimeScheduleGenqlSelection
    on_TeamMembership?: TeamMembershipGenqlSelection
    on_GitAutomationState?: GitAutomationStateGenqlSelection
    on_GitAutomationTargetBranch?: GitAutomationTargetBranchGenqlSelection
    on_Webhook?: WebhookGenqlSelection
    on_PaidSubscription?: PaidSubscriptionGenqlSelection
    on_IssueDraft?: IssueDraftGenqlSelection
    on_Draft?: DraftGenqlSelection
    on_CustomViewNotificationSubscription?: CustomViewNotificationSubscriptionGenqlSelection
    on_CycleNotificationSubscription?: CycleNotificationSubscriptionGenqlSelection
    on_LabelNotificationSubscription?: LabelNotificationSubscriptionGenqlSelection
    on_ProjectNotificationSubscription?: ProjectNotificationSubscriptionGenqlSelection
    on_InitiativeNotificationSubscription?: InitiativeNotificationSubscriptionGenqlSelection
    on_TeamNotificationSubscription?: TeamNotificationSubscriptionGenqlSelection
    on_UserNotificationSubscription?: UserNotificationSubscriptionGenqlSelection
    on_IssueNotification?: IssueNotificationGenqlSelection
    on_ProjectNotification?: ProjectNotificationGenqlSelection
    on_InitiativeNotification?: InitiativeNotificationGenqlSelection
    on_OauthClientApprovalNotification?: OauthClientApprovalNotificationGenqlSelection
    on_OauthClientApproval?: OauthClientApprovalGenqlSelection
    on_DocumentNotification?: DocumentNotificationGenqlSelection
    on_PostNotification?: PostNotificationGenqlSelection
    on_CustomerNeedNotification?: CustomerNeedNotificationGenqlSelection
    on_PullRequestNotification?: PullRequestNotificationGenqlSelection
    on_PullRequest?: PullRequestGenqlSelection
    on_UserSettings?: UserSettingsGenqlSelection
    on_SemanticSearchResult?: SemanticSearchResultGenqlSelection
    on_DocumentSearchResult?: DocumentSearchResultGenqlSelection
    on_ProjectSearchResult?: ProjectSearchResultGenqlSelection
    on_IssueSearchResult?: IssueSearchResultGenqlSelection
    on_RoadmapToProject?: RoadmapToProjectGenqlSelection
    on_OrganizationInvite?: OrganizationInviteGenqlSelection
    on_IntegrationTemplate?: IntegrationTemplateGenqlSelection
    on_InitiativeToProject?: InitiativeToProjectGenqlSelection
    on_InitiativeRelation?: InitiativeRelationGenqlSelection
    on_Emoji?: EmojiGenqlSelection
    on_AuditEntry?: AuditEntryGenqlSelection
    on_ApiKey?: ApiKeyGenqlSelection
    on_AgentContext?: AgentContextGenqlSelection
    on_AgentActivity?: AgentActivityGenqlSelection
    on_PushSubscription?: PushSubscriptionGenqlSelection
    on_OrganizationDomain?: OrganizationDomainGenqlSelection
    on_EmailIntakeAddress?: EmailIntakeAddressGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user that has access to the the resources of an organization. */
export interface UserGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user's full name. */
    name?: boolean | number
    /** The user's display (nick) name. Unique within each organization. */
    displayName?: boolean | number
    /** The user's email address. */
    email?: boolean | number
    /** An URL to the user's avatar image. */
    avatarUrl?: boolean | number
    /** Reason why is the account disabled. */
    disableReason?: boolean | number
    /** [DEPRECATED] Hash for the user to be used in calendar URLs. */
    calendarHash?: boolean | number
    /** A short description of the user, either its title or bio. */
    description?: boolean | number
    /** The emoji to represent the user current status. */
    statusEmoji?: boolean | number
    /** The label of the user current status. */
    statusLabel?: boolean | number
    /** A date at which the user current status should be cleared. */
    statusUntilAt?: boolean | number
    /** The local timezone of the user. */
    timezone?: boolean | number
    /** Organization the user belongs to. */
    organization?: OrganizationGenqlSelection
    /** The last time the user was seen online. */
    lastSeen?: boolean | number
    /** The initials of the user. */
    initials?: boolean | number
    /** The background color of the avatar for users without set avatar. */
    avatarBackgroundColor?: boolean | number
    /** Whether the user is a guest in the workspace and limited to accessing a subset of teams. */
    guest?: boolean | number
    /** Whether the user is an app. */
    app?: boolean | number
    /** Whether the user account is active or disabled (suspended). */
    active?: boolean | number
    /** The user's issue drafts */
    issueDrafts?: (IssueDraftConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The user's drafts */
    drafts?: (DraftConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** User's profile URL. */
    url?: boolean | number
    /** Issues assigned to the user. */
    assignedIssues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Issues delegated to an agent by the user. */
    supervisedIssues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Issues created by the user. */
    createdIssues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Number of issues created. */
    createdIssueCount?: boolean | number
    /** Teams the user is part of. */
    teams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
    teamMemberships?: (TeamMembershipConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Whether the user is the currently authenticated user. */
    isMe?: boolean | number
    /** Whether the user is an organization administrator. */
    admin?: boolean | number
    /**
     * @deprecated This hash is not in use anymore, this value will always be empty.
     * [DEPRECATED] Unique hash for the user to be used in invite URLs.
     */
    inviteHash?: boolean | number
    /** The user's GitHub user ID. */
    gitHubUserId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export interface OrganizationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The organization's name. */
    name?: boolean | number
    /** The organization's unique URL key. */
    urlKey?: boolean | number
    /** The organization's logo URL. */
    logoUrl?: boolean | number
    /** Rolling 30-day total upload volume for the organization, in megabytes. */
    periodUploadVolume?: boolean | number
    /** [Internal] Facets associated with the organization. */
    facets?: FacetGenqlSelection
    /** How git branches are formatted. If null, default formatting will be used. */
    gitBranchFormat?: boolean | number
    /** Whether the Git integration linkback messages should be sent to private repositories. */
    gitLinkbackMessagesEnabled?: boolean | number
    /** Whether the Git integration linkback messages should be sent to public repositories. */
    gitPublicLinkbackMessagesEnabled?: boolean | number
    /** Whether the organization is using a roadmap. */
    roadmapEnabled?: boolean | number
    /** The n-weekly frequency at which to prompt for project updates. When not set, reminders are off. */
    projectUpdateReminderFrequencyInWeeks?: boolean | number
    /** The day at which to prompt for project updates. */
    projectUpdateRemindersDay?: boolean | number
    /** The hour at which to prompt for project updates. */
    projectUpdateRemindersHour?: boolean | number
    /** The n-weekly frequency at which to prompt for initiative updates. When not set, reminders are off. */
    initiativeUpdateReminderFrequencyInWeeks?: boolean | number
    /** The day at which to prompt for initiative updates. */
    initiativeUpdateRemindersDay?: boolean | number
    /** The hour at which to prompt for initiative updates. */
    initiativeUpdateRemindersHour?: boolean | number
    /** The month at which the fiscal year starts. Defaults to January (0). */
    fiscalYearStartMonth?: boolean | number
    /** [Internal] The list of working days. Sunday is 0, Monday is 1, etc. */
    workingDays?: boolean | number
    /** Whether SAML authentication is enabled for organization. */
    samlEnabled?: boolean | number
    /** [INTERNAL] SAML settings. */
    samlSettings?: boolean | number
    /** Whether SCIM provisioning is enabled for organization. */
    scimEnabled?: boolean | number
    /** [INTERNAL] SCIM settings. */
    scimSettings?: boolean | number
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices?: boolean | number
    /** IP restriction configurations. */
    ipRestrictions?: OrganizationIpRestrictionGenqlSelection
    /** The time at which deletion of the organization was requested. */
    deletionRequestedAt?: boolean | number
    /** The time at which the trial will end. */
    trialEndsAt?: boolean | number
    /** Previously used URL keys for the organization (last 3 are kept and redirected). */
    previousUrlKeys?: boolean | number
    /** Whether member users are allowed to send invites. */
    allowMembersToInvite?: boolean | number
    /** Whether team creation is restricted to admins. */
    restrictTeamCreationToAdmins?: boolean | number
    /** Whether workspace label creation, update, and deletion is restricted to admins. */
    restrictLabelManagementToAdmins?: boolean | number
    /** [ALPHA] Theme settings for the organization. */
    themeSettings?: boolean | number
    /** The feature release channel the organization belongs to. */
    releaseChannel?: boolean | number
    /** Configuration settings for the Customers feature. */
    customersConfiguration?: boolean | number
    /** Default schedule for how often feed summaries are generated. */
    defaultFeedSummarySchedule?: boolean | number
    /** Whether the organization has enabled the feed feature. */
    feedEnabled?: boolean | number
    /** [INTERNAL] Whether the organization has enabled the AI add-on. */
    aiAddonEnabled?: boolean | number
    /**
     * @deprecated No longer in use
     * [DEPRECATED] Which day count to use for SLA calculations.
     */
    slaDayCount?: boolean | number
    /**
     * @deprecated Use organization.projectUpdatesReminderFrequencyInWeeks instead
     * [DEPRECATED] The frequency at which to prompt for project updates.
     */
    projectUpdatesReminderFrequency?: boolean | number
    /** Users associated with the organization. */
    users?: (UserConnectionGenqlSelection & { __args: {
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Teams associated with the organization. */
    teams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The organization's project statuses. */
    projectStatuses?: ProjectStatusGenqlSelection
    /** Integrations associated with the organization. */
    integrations?: (IntegrationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The organization's subscription to a paid plan. */
    subscription?: PaidSubscriptionGenqlSelection
    /** Number of active users in the organization. */
    userCount?: boolean | number
    /** Number of issues in the organization. */
    createdIssueCount?: boolean | number
    /** Templates associated with the organization. */
    templates?: (TemplateConnectionGenqlSelection & { __args: {
    /** Filter returned templates. */
    filter?: (NullableTemplateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Labels associated with the organization. */
    labels?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] Project labels associated with the organization. */
    projectLabels?: (ProjectLabelConnectionGenqlSelection & { __args: {
    /** Filter returned project labels. */
    filter?: (ProjectLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Number of customers in the organization. */
    customerCount?: boolean | number
    /** Whether the organization is using Customers. */
    customersEnabled?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A facet. Facets are joins between entities. A facet can tie a custom view to a project, or a a project to a roadmap for example. */
export interface FacetGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The sort order of the facet. */
    sortOrder?: boolean | number
    /** The owning organization. */
    sourceOrganization?: OrganizationGenqlSelection
    /** The owning team. */
    sourceTeam?: TeamGenqlSelection
    /** The owning project. */
    sourceProject?: ProjectGenqlSelection
    /** The owning initiative. */
    sourceInitiative?: InitiativeGenqlSelection
    /** The owning feed user. */
    sourceFeedUser?: UserGenqlSelection
    /** The owning page. */
    sourcePage?: boolean | number
    /** The targeted custom view. */
    targetCustomView?: CustomViewGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An organizational unit that contains issues. */
export interface TeamGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The team's name. */
    name?: boolean | number
    /** The team's unique key. The key is used in URLs. */
    key?: boolean | number
    /** The team's description. */
    description?: boolean | number
    /** The icon of the team. */
    icon?: boolean | number
    /** The team's color. */
    color?: boolean | number
    /** The organization that the team is associated with. */
    organization?: OrganizationGenqlSelection
    /** [Internal] The team's parent team. */
    parent?: TeamGenqlSelection
    /** [Internal] The team's sub-teams. */
    children?: TeamGenqlSelection
    /** Whether the team uses cycles. */
    cyclesEnabled?: boolean | number
    /** The day of the week that a new cycle starts. */
    cycleStartDay?: boolean | number
    /** The duration of a cycle in weeks. */
    cycleDuration?: boolean | number
    /** The cooldown time after each cycle in weeks. */
    cycleCooldownTime?: boolean | number
    /** Auto assign started issues to current cycle. */
    cycleIssueAutoAssignStarted?: boolean | number
    /** Auto assign completed issues to current cycle. */
    cycleIssueAutoAssignCompleted?: boolean | number
    /** Auto assign issues to current cycle if in active status. */
    cycleLockToActive?: boolean | number
    /** How many upcoming cycles to create. */
    upcomingCycleCount?: boolean | number
    /** The timezone of the team. Defaults to "America/Los_Angeles" */
    timezone?: boolean | number
    /** Unique hash for the team to be used in invite URLs. */
    inviteHash?: boolean | number
    /** Whether the team should inherit its workflow statuses from its parent. Only applies to sub-teams. */
    inheritWorkflowStatuses?: boolean | number
    /** Whether the team should inherit its estimation settings from its parent. Only applies to sub-teams. */
    inheritIssueEstimation?: boolean | number
    /** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
    issueEstimationType?: boolean | number
    /**
     * @deprecated This setting is no longer in use.
     * [DEPRECATED] Whether issues without priority should be sorted first.
     */
    issueOrderingNoPriorityFirst?: boolean | number
    /** Whether to allow zeros in issues estimates. */
    issueEstimationAllowZero?: boolean | number
    /** Where to move issues when changing state. */
    setIssueSortOrderOnStateChange?: boolean | number
    /** Whether to add additional points to the estimate scale. */
    issueEstimationExtended?: boolean | number
    /** What to use as a default estimate for unestimated issues. */
    defaultIssueEstimate?: boolean | number
    /** Whether triage mode is enabled for the team or not. */
    triageEnabled?: boolean | number
    /** Whether an issue needs to have a priority set before leaving triage. */
    requirePriorityToLeaveTriage?: boolean | number
    /** The default workflow state into which issues are set when they are opened by team members. */
    defaultIssueState?: WorkflowStateGenqlSelection
    /** The default template to use for new issues created by members of the team. */
    defaultTemplateForMembers?: TemplateGenqlSelection
    /**
     * @deprecated Use defaultTemplateForMembers instead
     * The id of the default template to use for new issues created by members of the team.
     */
    defaultTemplateForMembersId?: boolean | number
    /** The default template to use for new issues created by non-members of the team. */
    defaultTemplateForNonMembers?: TemplateGenqlSelection
    /**
     * @deprecated Use defaultTemplateForNonMembers instead
     * The id of the default template to use for new issues created by non-members of the team.
     */
    defaultTemplateForNonMembersId?: boolean | number
    /** The default template to use for new projects created for the team. */
    defaultProjectTemplate?: TemplateGenqlSelection
    /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
    triageIssueState?: WorkflowStateGenqlSelection
    /** Whether the team is private or not. */
    private?: boolean | number
    /** [Internal] Facets associated with the team. */
    facets?: FacetGenqlSelection
    /** [Internal] Posts associated with the team. */
    posts?: PostGenqlSelection
    /** Whether the team is managed by SCIM integration. */
    scimManaged?: boolean | number
    /** The SCIM group name for the team. */
    scimGroupName?: boolean | number
    /** [Internal] The progress history of the team. */
    progressHistory?: boolean | number
    /** [Internal] The current progress of the team. */
    currentProgress?: boolean | number
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been opened as draft.
     */
    draftWorkflowState?: WorkflowStateGenqlSelection
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been opened.
     */
    startWorkflowState?: WorkflowStateGenqlSelection
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a review has been requested for the PR.
     */
    reviewWorkflowState?: WorkflowStateGenqlSelection
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR is ready to be merged.
     */
    mergeableWorkflowState?: WorkflowStateGenqlSelection
    /**
     * @deprecated Use team.gitAutomationStates instead.
     * The workflow state into which issues are moved when a PR has been merged.
     */
    mergeWorkflowState?: WorkflowStateGenqlSelection
    /** Whether to group recent issue history entries. */
    groupIssueHistory?: boolean | number
    /** Whether to enable resolved thread AI summaries. */
    aiThreadSummariesEnabled?: boolean | number
    /**
     * @deprecated No longer is use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses?: boolean | number
    /** Period after which issues are automatically closed in months. Null/undefined means disabled. */
    autoClosePeriod?: boolean | number
    /** The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state. */
    autoCloseStateId?: boolean | number
    /** Period after which automatically closed and completed issues are automatically archived in months. */
    autoArchivePeriod?: boolean | number
    /** Whether parent issues should automatically close when all child issues are closed */
    autoCloseParentIssues?: boolean | number
    /** Whether child issues should automatically close when their parent issue is closed */
    autoCloseChildIssues?: boolean | number
    /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
    markedAsDuplicateWorkflowState?: WorkflowStateGenqlSelection
    /** [Internal] Whether new users should join this team by default. */
    joinByDefault?: boolean | number
    /** Calendar feed URL (iCal) for cycles. */
    cycleCalenderUrl?: boolean | number
    /** The name of the team including it's parent team name if it has one. */
    displayName?: boolean | number
    /** Issues associated with the team. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Include issues from sub-teams. */
    includeSubTeams?: (Scalars['Boolean'] | null), 
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Number of issues in the team. */
    issueCount?: { __args: {
    /** Include archived issues in the count. */
    includeArchived?: (Scalars['Boolean'] | null)} } | boolean | number
    /** Cycles associated with the team. */
    cycles?: (CycleConnectionGenqlSelection & { __args: {
    /** Filter returned cycles. */
    filter?: (CycleFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Team's currently active cycle. */
    activeCycle?: CycleGenqlSelection
    /** Team's triage responsibility. */
    triageResponsibility?: TriageResponsibilityGenqlSelection
    /** Users who are members of this team. */
    members?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned users. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [ALPHA] The membership of the given user in the team. */
    membership?: (TeamMembershipGenqlSelection & { __args: {
    /** The user ID. */
    userId: Scalars['String']} })
    /** Memberships associated with the team. For easier access of the same data, use `members` query. */
    memberships?: (TeamMembershipConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Projects associated with the team. */
    projects?: (ProjectConnectionGenqlSelection & { __args: {
    /** Include projects from sub-teams. */
    includeSubTeams?: (Scalars['Boolean'] | null), 
    /** Filter returned projects. */
    filter?: (ProjectFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned projects. */
    sort?: (ProjectSortInput[] | null)} })
    /** The states that define the workflow associated with the team. */
    states?: (WorkflowStateConnectionGenqlSelection & { __args: {
    /** Filter returned workflow states. */
    filter?: (WorkflowStateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The Git automation states for the team. */
    gitAutomationStates?: (GitAutomationStateConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Templates associated with the team. */
    templates?: (TemplateConnectionGenqlSelection & { __args: {
    /** Filter returned templates. */
    filter?: (NullableTemplateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Labels associated with the team. */
    labels?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Webhooks associated with the team. */
    webhooks?: (WebhookConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Settings for all integrations associated with that team. */
    integrationsSettings?: IntegrationsSettingsGenqlSelection
    /**
     * @deprecated Use setIssueSortOrderOnStateChange instead.
     * [DEPRECATED] Whether to move issues to bottom of the column when changing state.
     */
    issueSortOrderDefaultToBottom?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A state in a team workflow. */
export interface WorkflowStateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The state's name. */
    name?: boolean | number
    /** The state's UI color as a HEX string. */
    color?: boolean | number
    /** Description of the state. */
    description?: boolean | number
    /** The position of the state in the team flow. */
    position?: boolean | number
    /** The type of the state. One of "triage", "backlog", "unstarted", "started", "completed", "canceled". */
    type?: boolean | number
    /** The team to which this state belongs to. */
    team?: TeamGenqlSelection
    /** The state inherited from */
    inheritedFrom?: WorkflowStateGenqlSelection
    /** Issues belonging in this state. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueConnectionGenqlSelection{
    edges?: IssueEdgeGenqlSelection
    nodes?: IssueGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueEdgeGenqlSelection{
    node?: IssueGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An issue. */
export interface IssueGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The issue's unique number. */
    number?: boolean | number
    /** The issue's title. */
    title?: boolean | number
    /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority?: boolean | number
    /** The estimate of the complexity of the issue.. */
    estimate?: boolean | number
    /**
     * @deprecated Will be removed in near future, please use `sortOrder` instead
     * The order of the item in its column on the board.
     */
    boardOrder?: boolean | number
    /** The order of the item in relation to other items in the organization. */
    sortOrder?: boolean | number
    /** The order of the item in relation to other items in the organization, when ordered by priority. */
    prioritySortOrder?: boolean | number
    /** The time at which the issue was moved into started state. */
    startedAt?: boolean | number
    /** The time at which the issue was moved into completed state. */
    completedAt?: boolean | number
    /** The time at which the issue entered triage. */
    startedTriageAt?: boolean | number
    /** The time at which the issue left triage. */
    triagedAt?: boolean | number
    /** The time at which the issue was moved into canceled state. */
    canceledAt?: boolean | number
    /** The time at which the issue was automatically closed by the auto pruning process. */
    autoClosedAt?: boolean | number
    /** The time at which the issue was automatically archived by the auto pruning process. */
    autoArchivedAt?: boolean | number
    /** The date at which the issue is due. */
    dueDate?: boolean | number
    /** The time at which the issue's SLA began. */
    slaStartedAt?: boolean | number
    /** The time at which the issue's SLA will enter medium risk state. */
    slaMediumRiskAt?: boolean | number
    /** The time at which the issue's SLA will enter high risk state. */
    slaHighRiskAt?: boolean | number
    /** The time at which the issue's SLA will breach. */
    slaBreachesAt?: boolean | number
    /** The type of SLA set on the issue. Calendar days or business days. */
    slaType?: boolean | number
    /** The time at which the issue was added to a project. */
    addedToProjectAt?: boolean | number
    /** The time at which the issue was added to a cycle. */
    addedToCycleAt?: boolean | number
    /** The time at which the issue was added to a team. */
    addedToTeamAt?: boolean | number
    /** A flag that indicates whether the issue is in the trash bin. */
    trashed?: boolean | number
    /** The time until an issue will be snoozed in Triage view. */
    snoozedUntilAt?: boolean | number
    /** [Internal] The time at which the most recent suggestions for this issue were generated. */
    suggestionsGeneratedAt?: boolean | number
    /** [Internal] The activity summary information for this issue. */
    activitySummary?: boolean | number
    /** [ALPHA] The document content representing this issue description. */
    documentContent?: DocumentContentGenqlSelection
    /** Id of the labels associated with this issue. */
    labelIds?: boolean | number
    /** The team that the issue is associated with. */
    team?: TeamGenqlSelection
    /** The cycle that the issue is associated with. */
    cycle?: CycleGenqlSelection
    /** The project that the issue is associated with. */
    project?: ProjectGenqlSelection
    /** The projectMilestone that the issue is associated with. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** The last template that was applied to this issue. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The recurring issue template that created this issue. */
    recurringIssueTemplate?: TemplateGenqlSelection
    /** Previous identifiers of the issue if it has been moved between teams. */
    previousIdentifiers?: boolean | number
    /** The user who created the issue. */
    creator?: UserGenqlSelection
    /** The external user who created the issue. */
    externalUserCreator?: ExternalUserGenqlSelection
    /** The user to whom the issue is assigned to. */
    assignee?: UserGenqlSelection
    /** The user who has delegated this issue to be completed by an agent. */
    supervisor?: UserGenqlSelection
    /** The user who snoozed the issue. */
    snoozedBy?: UserGenqlSelection
    /** The workflow state that the issue is associated with. */
    state?: WorkflowStateGenqlSelection
    /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
    subIssueSortOrder?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** Label for the priority. */
    priorityLabel?: boolean | number
    /** The comment that this issue was created from. */
    sourceComment?: CommentGenqlSelection
    /** Integration type that created this issue, if applicable. */
    integrationSourceType?: boolean | number
    /** The bot that created the issue, if applicable. */
    botActor?: ActorBotGenqlSelection
    /** The users favorite associated with this issue. */
    favorite?: FavoriteGenqlSelection
    /** Issue's human readable identifier (e.g. ENG-123). */
    identifier?: boolean | number
    /** Issue URL. */
    url?: boolean | number
    /** Suggested branch name for the issue. */
    branchName?: boolean | number
    /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
    customerTicketCount?: boolean | number
    /** Users who are subscribed to the issue. */
    subscribers?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned subscribers. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The parent of the issue. */
    parent?: IssueGenqlSelection
    /** Children of the issue. */
    children?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Comments associated with the issue. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** History entries associated with the issue. */
    history?: (IssueHistoryConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Labels associated with this issue. */
    labels?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Relations associated with this issue. */
    relations?: (IssueRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Inverse relations associated with this issue. */
    inverseRelations?: (IssueRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Attachments associated with the issue. */
    attachments?: (AttachmentConnectionGenqlSelection & { __args: {
    /** Filter returned attachments. */
    filter?: (AttachmentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Attachments previously associated with the issue before being moved to another issue. */
    formerAttachments?: (AttachmentConnectionGenqlSelection & { __args: {
    /** Filter returned attachments. */
    filter?: (AttachmentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The issue's description in markdown format. */
    description?: boolean | number
    /** [Internal] The issue's description content as YJS state. */
    descriptionState?: boolean | number
    /** Reactions associated with the issue. */
    reactions?: ReactionGenqlSelection
    /** Customer needs associated with the issue. */
    needs?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Customer needs previously associated with the issue before being moved to another issue. */
    formerNeeds?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The external services the issue is synced with. */
    syncedWith?: ExternalEntityInfoGenqlSelection
    /** [Internal] Product intelligence suggestions for the issue. */
    suggestions?: (IssueSuggestionConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] Incoming product intelligence relation suggestions for the issue. */
    incomingSuggestions?: (IssueSuggestionConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A document content for a project. */
export interface DocumentContentGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The document content in markdown format. */
    content?: boolean | number
    /** The document content state as a base64 encoded string. */
    contentState?: boolean | number
    /** The issue that the content is associated with. */
    issue?: IssueGenqlSelection
    /** The project that the content is associated with. */
    project?: ProjectGenqlSelection
    /** The initiative that the content is associated with. */
    initiative?: InitiativeGenqlSelection
    /** The project milestone that the content is associated with. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** The document that the content is associated with. */
    document?: DocumentGenqlSelection
    /** [ALPHA] The meeting that the content is associated with. */
    meeting?: MeetingGenqlSelection
    /** The time at which the document content was restored from a previous version. */
    restoredAt?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A project. */
export interface ProjectGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks?: boolean | number
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency?: boolean | number
    /** The resolution of the reminder frequency. */
    frequencyResolution?: boolean | number
    /** The day at which to prompt for updates. */
    updateRemindersDay?: boolean | number
    /** The hour at which to prompt for updates. */
    updateRemindersHour?: boolean | number
    /** The project's name. */
    name?: boolean | number
    /** The project's description. */
    description?: boolean | number
    /** The content of the project description. */
    documentContent?: DocumentContentGenqlSelection
    /** The project's unique URL slug. */
    slugId?: boolean | number
    /** The icon of the project. */
    icon?: boolean | number
    /** The project's color. */
    color?: boolean | number
    /** The status that the project is associated with. */
    status?: ProjectStatusGenqlSelection
    /** The user who created the project. */
    creator?: UserGenqlSelection
    /** The project lead. */
    lead?: UserGenqlSelection
    /** [Internal] Facets associated with the project. */
    facets?: FacetGenqlSelection
    /** The time until which project update reminders are paused. */
    projectUpdateRemindersPausedUntilAt?: boolean | number
    /** The estimated start date of the project. */
    startDate?: boolean | number
    /** The resolution of the project's start date. */
    startDateResolution?: boolean | number
    /** The estimated completion date of the project. */
    targetDate?: boolean | number
    /** The resolution of the project's estimated completion date. */
    targetDateResolution?: boolean | number
    /** The time at which the project was moved into started state. */
    startedAt?: boolean | number
    /** The time at which the project was moved into completed state. */
    completedAt?: boolean | number
    /** The time at which the project was moved into canceled state. */
    canceledAt?: boolean | number
    /** The time at which the project was automatically archived by the auto pruning process. */
    autoArchivedAt?: boolean | number
    /** A flag that indicates whether the project is in the trash bin. */
    trashed?: boolean | number
    /** The sort order for the project within the organization. */
    sortOrder?: boolean | number
    /** The sort order for the project within the organization, when ordered by priority. */
    prioritySortOrder?: boolean | number
    /** The project was created based on this issue. */
    convertedFromIssue?: IssueGenqlSelection
    /** The last template that was applied to this project. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority?: boolean | number
    /** The last project update posted for this project. */
    lastUpdate?: ProjectUpdateGenqlSelection
    /** The health of the project. */
    health?: boolean | number
    /** The time at which the project health was updated. */
    healthUpdatedAt?: boolean | number
    /** The total number of issues in the project after each week. */
    issueCountHistory?: boolean | number
    /** The number of completed issues in the project after each week. */
    completedIssueCountHistory?: boolean | number
    /** The total number of estimation points after each week. */
    scopeHistory?: boolean | number
    /** The number of completed estimation points after each week. */
    completedScopeHistory?: boolean | number
    /** The number of in progress estimation points after each week. */
    inProgressScopeHistory?: boolean | number
    /** [INTERNAL] The progress history of the project. */
    progressHistory?: boolean | number
    /** [INTERNAL] The current progress of the project. */
    currentProgress?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments?: boolean | number
    /**
     * @deprecated No longer is use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses?: boolean | number
    /** Id of the labels associated with this project. */
    labelIds?: boolean | number
    /** The user's favorite associated with this project. */
    favorite?: FavoriteGenqlSelection
    /** Project URL. */
    url?: boolean | number
    /** Initiatives that this project belongs to. */
    initiatives?: (InitiativeConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Teams associated with this project. */
    teams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Users that are members of the project. */
    members?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned users. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Project updates associated with the project. */
    projectUpdates?: (ProjectUpdateConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Documents associated with the project. */
    documents?: (DocumentConnectionGenqlSelection & { __args: {
    /** Filter returned documents. */
    filter?: (DocumentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Milestones associated with the project. */
    projectMilestones?: (ProjectMilestoneConnectionGenqlSelection & { __args: {
    /** Filter returned milestones. */
    filter?: (ProjectMilestoneFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Issues associated with the project. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** External links associated with the project. */
    externalLinks?: (EntityExternalLinkConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** History entries associated with the project. */
    history?: (ProjectHistoryConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] Labels associated with this project. */
    labels?: (ProjectLabelConnectionGenqlSelection & { __args: {
    /** Filter returned project labels. */
    filter?: (ProjectLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress?: boolean | number
    /** The overall scope (total estimate points) of the project. */
    scope?: boolean | number
    /** Settings for all integrations associated with that project. */
    integrationsSettings?: IntegrationsSettingsGenqlSelection
    /** The project's content in markdown format. */
    content?: boolean | number
    /** [Internal] The project's content as YJS state. */
    contentState?: boolean | number
    /** Comments associated with the project overview. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Relations associated with this project. */
    relations?: (ProjectRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Inverse relations associated with this project. */
    inverseRelations?: (ProjectRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Customer needs associated with the project. */
    needs?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /**
     * @deprecated Use project.status instead
     * [DEPRECATED] The type of the state.
     */
    state?: boolean | number
    /** The priority of the project as a label. */
    priorityLabel?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A project status. */
export interface ProjectStatusGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the status. */
    name?: boolean | number
    /** The UI color of the status as a HEX string. */
    color?: boolean | number
    /** Description of the status. */
    description?: boolean | number
    /** The position of the status in the workspace's project flow. */
    position?: boolean | number
    /** The type of the project status. */
    type?: boolean | number
    /** Whether or not a project can be in this status indefinitely. */
    indefinite?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A template object used for creating entities faster. */
export interface TemplateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The entity type this template is for. */
    type?: boolean | number
    /** The name of the template. */
    name?: boolean | number
    /** Template description. */
    description?: boolean | number
    /** Template data. */
    templateData?: boolean | number
    /** The sort order of the template. */
    sortOrder?: boolean | number
    /** The organization that the template is associated with. If null, the template is associated with a particular team. */
    organization?: OrganizationGenqlSelection
    /** The team that the template is associated with. If null, the template is global to the workspace. */
    team?: TeamGenqlSelection
    /** The user who created the template. */
    creator?: UserGenqlSelection
    /** The user who last updated the template. */
    lastUpdatedBy?: UserGenqlSelection
    /** The original template inherited from. */
    inheritedFrom?: TemplateGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An update associated with a project. */
export interface ProjectUpdateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The update content in markdown format. */
    body?: boolean | number
    /** The time the update was edited. */
    editedAt?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** [Internal] The content of the update as a Prosemirror document. */
    bodyData?: boolean | number
    /** The update's unique URL slug. */
    slugId?: boolean | number
    /** The project that the update is associated with. */
    project?: ProjectGenqlSelection
    /** The health of the project at the time of the update. */
    health?: boolean | number
    /** The user who wrote the update. */
    user?: UserGenqlSelection
    /** [Internal] Serialized JSON representing current state of the project properties when posting the project update. */
    infoSnapshot?: boolean | number
    /** Whether project update diff should be hidden. */
    isDiffHidden?: boolean | number
    /** The URL to the project update. */
    url?: boolean | number
    /** Whether the project update is stale. */
    isStale?: boolean | number
    /** The diff between the current update and the previous one. */
    diff?: boolean | number
    /** The diff between the current update and the previous one, formatted as markdown. */
    diffMarkdown?: boolean | number
    /** Reactions associated with the project update. */
    reactions?: ReactionGenqlSelection
    /** Comments associated with the project update. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A reaction associated with a comment or a project update. */
export interface ReactionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Name of the reaction's emoji. */
    emoji?: boolean | number
    /** The issue that the reaction is associated with. */
    issue?: IssueGenqlSelection
    /** The comment that the reaction is associated with. */
    comment?: CommentGenqlSelection
    /** The project update that the reaction is associated with. */
    projectUpdate?: ProjectUpdateGenqlSelection
    /** The initiative update that the reaction is associated with. */
    initiativeUpdate?: InitiativeUpdateGenqlSelection
    /** The post that the reaction is associated with. */
    post?: PostGenqlSelection
    /** The user that created the reaction. */
    user?: UserGenqlSelection
    /** The external user that created the reaction. */
    externalUser?: ExternalUserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A comment associated with an issue. */
export interface CommentGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The comment content in markdown format. */
    body?: boolean | number
    /** The issue that the comment is associated with. */
    issue?: IssueGenqlSelection
    /** The document content that the comment is associated with. */
    documentContent?: DocumentContentGenqlSelection
    /** The project update that the comment is associated with. */
    projectUpdate?: ProjectUpdateGenqlSelection
    /** The initiative update that the comment is associated with. */
    initiativeUpdate?: InitiativeUpdateGenqlSelection
    /** The post that the comment is associated with. */
    post?: PostGenqlSelection
    /** The parent comment under which the current comment is nested. */
    parent?: CommentGenqlSelection
    /** The user that resolved the thread. */
    resolvingUser?: UserGenqlSelection
    /** The time the resolvingUser resolved the thread. */
    resolvedAt?: boolean | number
    /** The comment that resolved the thread. */
    resolvingComment?: CommentGenqlSelection
    /** The user who wrote the comment. */
    user?: UserGenqlSelection
    /** The external user who wrote the comment. */
    externalUser?: ExternalUserGenqlSelection
    /** The time user edited the comment. */
    editedAt?: boolean | number
    /** [Internal] The comment content as a Prosemirror document. */
    bodyData?: boolean | number
    /** The text that this comment references. Only defined for inline comments. */
    quotedText?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** [Internal] A generated summary of the comment thread. */
    threadSummary?: boolean | number
    /** Comment's URL. */
    url?: boolean | number
    /** The children of the comment. */
    children?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The bot that created the comment. */
    botActor?: ActorBotGenqlSelection
    /** The external thread that the comment is synced with. */
    externalThread?: SyncedExternalThreadGenqlSelection
    /** Reactions associated with the comment. */
    reactions?: ReactionGenqlSelection
    /** The external services the comment is synced with. */
    syncedWith?: ExternalEntityInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An initiative update. */
export interface InitiativeUpdateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The update content in markdown format. */
    body?: boolean | number
    /** The time the update was edited. */
    editedAt?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** [Internal] The content of the update as a Prosemirror document. */
    bodyData?: boolean | number
    /** The update's unique URL slug. */
    slugId?: boolean | number
    /** The initiative that the update is associated with. */
    initiative?: InitiativeGenqlSelection
    /** The user who wrote the update. */
    user?: UserGenqlSelection
    /** The health at the time of the update. */
    health?: boolean | number
    /** [Internal] Serialized JSON representing current state of the initiative properties when posting the initiative update. */
    infoSnapshot?: boolean | number
    /** Whether initiative update diff should be hidden. */
    isDiffHidden?: boolean | number
    /** The URL to the initiative update. */
    url?: boolean | number
    /** Whether the initiative update is stale. */
    isStale?: boolean | number
    /** The diff between the current update and the previous one. */
    diff?: boolean | number
    /** The diff between the current update and the previous one, formatted as markdown. */
    diffMarkdown?: boolean | number
    /** Reactions associated with the initiative update. */
    reactions?: ReactionGenqlSelection
    /** Comments associated with the initiative update. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An initiative to group projects. */
export interface InitiativeGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks?: boolean | number
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency?: boolean | number
    /** The resolution of the reminder frequency. */
    frequencyResolution?: boolean | number
    /** The day at which to prompt for updates. */
    updateRemindersDay?: boolean | number
    /** The hour at which to prompt for updates. */
    updateRemindersHour?: boolean | number
    /** The name of the initiative. */
    name?: boolean | number
    /** The description of the initiative. */
    description?: boolean | number
    /** The organization of the initiative. */
    organization?: OrganizationGenqlSelection
    /** The user who created the initiative. */
    creator?: UserGenqlSelection
    /** The user who owns the initiative. */
    owner?: UserGenqlSelection
    /** The initiative's unique URL slug. */
    slugId?: boolean | number
    /** The sort order of the initiative within the organization. */
    sortOrder?: boolean | number
    /** The initiative's color. */
    color?: boolean | number
    /** The icon of the initiative. */
    icon?: boolean | number
    /** A flag that indicates whether the initiative is in the trash bin. */
    trashed?: boolean | number
    /** [Internal] Facets associated with the initiative. */
    facets?: FacetGenqlSelection
    /** The estimated completion date of the initiative. */
    targetDate?: boolean | number
    /** The resolution of the initiative's estimated completion date. */
    targetDateResolution?: boolean | number
    /** The status of the initiative. One of Planned, Active, Completed */
    status?: boolean | number
    /** The last initiative update posted for this initiative. */
    lastUpdate?: InitiativeUpdateGenqlSelection
    /** The health of the initiative. */
    health?: boolean | number
    /** The time at which the initiative health was updated. */
    healthUpdatedAt?: boolean | number
    /** The time at which the initiative was moved into active status. */
    startedAt?: boolean | number
    /** The time at which the initiative was moved into completed status. */
    completedAt?: boolean | number
    /** Initiative URL. */
    url?: boolean | number
    /** Projects associated with the initiative. */
    projects?: (ProjectConnectionGenqlSelection & { __args: {
    /** [ALPHA] Whether to include projects from sub-initiatives. Defaults to true. */
    includeSubInitiatives?: (Scalars['Boolean'] | null), 
    /** Filter returned projects. */
    filter?: (ProjectFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned projects. */
    sort?: (ProjectSortInput[] | null)} })
    /** Links associated with the initiative. */
    links?: (EntityExternalLinkConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Settings for all integrations associated with that initiative. */
    integrationsSettings?: IntegrationsSettingsGenqlSelection
    /** History entries associated with the initiative. */
    history?: (InitiativeHistoryConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [ALPHA] Sub-initiatives associated with the initiative. */
    subInitiatives?: (InitiativeConnectionGenqlSelection & { __args: {
    /** Filter returned sub-initiatives. */
    filter?: (InitiativeFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The initiative's content in markdown format. */
    content?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectConnectionGenqlSelection{
    edges?: ProjectEdgeGenqlSelection
    nodes?: ProjectGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectEdgeGenqlSelection{
    node?: ProjectGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface PageInfoGenqlSelection{
    /** Indicates if there are more results when paginating backward. */
    hasPreviousPage?: boolean | number
    /** Indicates if there are more results when paginating forward. */
    hasNextPage?: boolean | number
    /** Cursor representing the first result in the paginated results. */
    startCursor?: boolean | number
    /** Cursor representing the last result in the paginated results. */
    endCursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Project filtering options. */
export interface ProjectFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project name. */
name?: (StringComparator | null),
/** Comparator for the project slug ID. */
slugId?: (StringComparator | null),
/** [DEPRECATED] Comparator for the project state. */
state?: (StringComparator | null),
/** Filters that the project's status must satisfy. */
status?: (ProjectStatusFilter | null),
/** Comparator for the projects priority. */
priority?: (NullableNumberComparator | null),
/** [Internal] Filters that project labels must satisfy. */
labels?: (ProjectLabelCollectionFilter | null),
/** [Internal] Comparator for the project's content. */
searchableContent?: (ContentComparator | null),
/** Comparator for the project completion date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the project cancelation date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the project start date. */
startDate?: (NullableDateComparator | null),
/** Comparator for the project target date. */
targetDate?: (NullableDateComparator | null),
/** Comparator for the project health: onTrack, atRisk, offTrack */
health?: (StringComparator | null),
/** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
healthWithAge?: (StringComparator | null),
/** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
activityType?: (StringComparator | null),
/** Comparator for filtering projects with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** [Deprecated] Comparator for filtering projects which this is depended on by. */
hasDependedOnByRelations?: (RelationExistsComparator | null),
/** [Deprecated]Comparator for filtering projects which this depends on. */
hasDependsOnRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects with violated dependencies. */
hasViolatedRelations?: (RelationExistsComparator | null),
/** Comparator for the project updates. */
projectUpdates?: (ProjectUpdatesCollectionFilter | null),
/** Filters that the projects creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the projects lead must satisfy. */
lead?: (NullableUserFilter | null),
/** Filters that the projects members must satisfy. */
members?: (UserCollectionFilter | null),
/** Filters that the projects issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filters that the projects roadmaps must satisfy. */
roadmaps?: (RoadmapCollectionFilter | null),
/** Filters that the projects initiatives must satisfy. */
initiatives?: (InitiativeCollectionFilter | null),
/** Filters that the project's milestones must satisfy. */
projectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's completed milestones must satisfy. */
completedProjectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's next milestone must satisfy. */
nextProjectMilestone?: (ProjectMilestoneFilter | null),
/** Filters that the project's team must satisfy. */
accessibleTeams?: (TeamCollectionFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** Filters that the project's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** Compound filters, all of which need to be matched by the project. */
and?: (ProjectFilter[] | null),
/** Compound filters, one of which need to be matched by the project. */
or?: (ProjectFilter[] | null)}


/** Comparator for identifiers. */
export interface IDComparator {
/** Equals constraint. */
eq?: (Scalars['ID'] | null),
/** Not-equals constraint. */
neq?: (Scalars['ID'] | null),
/** In-array constraint. */
in?: (Scalars['ID'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['ID'][] | null)}


/** Comparator for dates. */
export interface DateComparator {
/** Equals constraint. */
eq?: (Scalars['DateTimeOrDuration'] | null),
/** Not-equals constraint. */
neq?: (Scalars['DateTimeOrDuration'] | null),
/** In-array constraint. */
in?: (Scalars['DateTimeOrDuration'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['DateTimeOrDuration'][] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['DateTimeOrDuration'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['DateTimeOrDuration'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['DateTimeOrDuration'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['DateTimeOrDuration'] | null)}


/** Comparator for strings. */
export interface StringComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Equals case insensitive. Matches any values that matches the given string case insensitive. */
eqIgnoreCase?: (Scalars['String'] | null),
/** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
neqIgnoreCase?: (Scalars['String'] | null),
/** Starts with constraint. Matches any values that start with the given string. */
startsWith?: (Scalars['String'] | null),
/** Starts with case insensitive constraint. Matches any values that start with the given string. */
startsWithIgnoreCase?: (Scalars['String'] | null),
/** Doesn't start with constraint. Matches any values that don't start with the given string. */
notStartsWith?: (Scalars['String'] | null),
/** Ends with constraint. Matches any values that end with the given string. */
endsWith?: (Scalars['String'] | null),
/** Doesn't end with constraint. Matches any values that don't end with the given string. */
notEndsWith?: (Scalars['String'] | null),
/** Contains constraint. Matches any values that contain the given string. */
contains?: (Scalars['String'] | null),
/** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
containsIgnoreCase?: (Scalars['String'] | null),
/** Doesn't contain constraint. Matches any values that don't contain the given string. */
notContains?: (Scalars['String'] | null),
/** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
notContainsIgnoreCase?: (Scalars['String'] | null),
/** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
containsIgnoreCaseAndAccent?: (Scalars['String'] | null)}


/** Project status filtering options. */
export interface ProjectStatusFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project status name. */
name?: (StringComparator | null),
/** Comparator for the project status description. */
description?: (StringComparator | null),
/** Comparator for the project status position. */
position?: (NumberComparator | null),
/** Comparator for the project status type. */
type?: (StringComparator | null),
/** Filters that the project status projects must satisfy. */
projects?: (ProjectCollectionFilter | null),
/** Compound filters, all of which need to be matched by the project status. */
and?: (ProjectStatusFilter[] | null),
/** Compound filters, one of which needs to be matched by the project status. */
or?: (ProjectStatusFilter[] | null)}


/** Comparator for numbers. */
export interface NumberComparator {
/** Equals constraint. */
eq?: (Scalars['Float'] | null),
/** Not-equals constraint. */
neq?: (Scalars['Float'] | null),
/** In-array constraint. */
in?: (Scalars['Float'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['Float'][] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['Float'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['Float'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['Float'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['Float'] | null)}


/** Project filtering options. */
export interface ProjectCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project name. */
name?: (StringComparator | null),
/** Comparator for the project slug ID. */
slugId?: (StringComparator | null),
/** [DEPRECATED] Comparator for the project state. */
state?: (StringComparator | null),
/** Filters that the project's status must satisfy. */
status?: (ProjectStatusFilter | null),
/** Comparator for the projects priority. */
priority?: (NullableNumberComparator | null),
/** [Internal] Filters that project labels must satisfy. */
labels?: (ProjectLabelCollectionFilter | null),
/** [Internal] Comparator for the project's content. */
searchableContent?: (ContentComparator | null),
/** Comparator for the project completion date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the project cancelation date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the project start date. */
startDate?: (NullableDateComparator | null),
/** Comparator for the project target date. */
targetDate?: (NullableDateComparator | null),
/** Comparator for the project health: onTrack, atRisk, offTrack */
health?: (StringComparator | null),
/** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
healthWithAge?: (StringComparator | null),
/** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
activityType?: (StringComparator | null),
/** Comparator for filtering projects with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** [Deprecated] Comparator for filtering projects which this is depended on by. */
hasDependedOnByRelations?: (RelationExistsComparator | null),
/** [Deprecated]Comparator for filtering projects which this depends on. */
hasDependsOnRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects with violated dependencies. */
hasViolatedRelations?: (RelationExistsComparator | null),
/** Comparator for the project updates. */
projectUpdates?: (ProjectUpdatesCollectionFilter | null),
/** Filters that the projects creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the projects lead must satisfy. */
lead?: (NullableUserFilter | null),
/** Filters that the projects members must satisfy. */
members?: (UserCollectionFilter | null),
/** Filters that the projects issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filters that the projects roadmaps must satisfy. */
roadmaps?: (RoadmapCollectionFilter | null),
/** Filters that the projects initiatives must satisfy. */
initiatives?: (InitiativeCollectionFilter | null),
/** Filters that the project's milestones must satisfy. */
projectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's completed milestones must satisfy. */
completedProjectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's next milestone must satisfy. */
nextProjectMilestone?: (ProjectMilestoneFilter | null),
/** Filters that the project's team must satisfy. */
accessibleTeams?: (TeamCollectionFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** Filters that the project's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** Compound filters, all of which need to be matched by the project. */
and?: (ProjectCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the project. */
or?: (ProjectCollectionFilter[] | null),
/** Filters that needs to be matched by some projects. */
some?: (ProjectFilter | null),
/** Filters that needs to be matched by all projects. */
every?: (ProjectFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Comparator for optional numbers. */
export interface NullableNumberComparator {
/** Equals constraint. */
eq?: (Scalars['Float'] | null),
/** Not-equals constraint. */
neq?: (Scalars['Float'] | null),
/** In-array constraint. */
in?: (Scalars['Float'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['Float'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['Float'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['Float'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['Float'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['Float'] | null)}


/** Project label filtering options. */
export interface ProjectLabelCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the name. */
name?: (StringComparator | null),
/** Comparator for whether the label is a group label. */
isGroup?: (BooleanComparator | null),
/** Filters that the project labels creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the project label's parent label must satisfy. */
parent?: (ProjectLabelFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the label. */
and?: (ProjectLabelCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the label. */
or?: (ProjectLabelCollectionFilter[] | null),
/** Filters that needs to be matched by some project labels. */
some?: (ProjectLabelCollectionFilter | null),
/** Filters that needs to be matched by all project labels. */
every?: (ProjectLabelFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Comparator for booleans. */
export interface BooleanComparator {
/** Equals constraint. */
eq?: (Scalars['Boolean'] | null),
/** Not equals constraint. */
neq?: (Scalars['Boolean'] | null)}


/** User filtering options. */
export interface NullableUserFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the user's name. */
name?: (StringComparator | null),
/** Comparator for the user's display name. */
displayName?: (StringComparator | null),
/** Comparator for the user's email. */
email?: (StringComparator | null),
/** Comparator for the user's activity status. */
active?: (BooleanComparator | null),
/** Filters that the users assigned issues must satisfy. */
assignedIssues?: (IssueCollectionFilter | null),
/** Comparator for the user's admin status. */
admin?: (BooleanComparator | null),
/** Comparator for the user's invited status. */
invited?: (BooleanComparator | null),
/** Comparator for the user's app status. */
app?: (BooleanComparator | null),
/** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
isMe?: (BooleanComparator | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the user. */
and?: (NullableUserFilter[] | null),
/** Compound filters, one of which need to be matched by the user. */
or?: (NullableUserFilter[] | null)}


/** Issue filtering options. */
export interface IssueCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the issues number. */
number?: (NumberComparator | null),
/** Comparator for the issues title. */
title?: (StringComparator | null),
/** Comparator for the issues description. */
description?: (NullableStringComparator | null),
/** Comparator for the issues priority. */
priority?: (NullableNumberComparator | null),
/** Comparator for the issues estimate. */
estimate?: (EstimateComparator | null),
/** Comparator for the issues started at date. */
startedAt?: (NullableDateComparator | null),
/** Comparator for the issues triaged at date. */
triagedAt?: (NullableDateComparator | null),
/** Comparator for the issues completed at date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the issues canceled at date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the issues archived at date. */
archivedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto closed at date. */
autoClosedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto archived at date. */
autoArchivedAt?: (NullableDateComparator | null),
/** Comparator for the issues added to cycle at date. */
addedToCycleAt?: (NullableDateComparator | null),
/** Comparator for the period when issue was added to a cycle. */
addedToCyclePeriod?: (CyclePeriodComparator | null),
/** Comparator for the issues due date. */
dueDate?: (NullableTimelessDateComparator | null),
/** Comparator for the issues snoozed until date. */
snoozedUntilAt?: (NullableDateComparator | null),
/** Filters that the issues assignee must satisfy. */
assignee?: (NullableUserFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** [ALPHA] Filters that the recurring issue template must satisfy. */
recurringIssueTemplate?: (NullableTemplateFilter | null),
/** Filters that the source must satisfy. */
sourceMetadata?: (SourceMetadataComparator | null),
/** Filters that the issues creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the issue parent must satisfy. */
parent?: (NullableIssueFilter | null),
/** Filters that the issues snoozer must satisfy. */
snoozedBy?: (NullableUserFilter | null),
/** Filters that issue labels must satisfy. */
labels?: (IssueLabelCollectionFilter | null),
/** Filters that issue subscribers must satisfy. */
subscribers?: (UserCollectionFilter | null),
/** Filters that the issues team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the issues project milestone must satisfy. */
projectMilestone?: (NullableProjectMilestoneFilter | null),
/** Filters that the issues comments must satisfy. */
comments?: (CommentCollectionFilter | null),
/** Filters that the issues cycle must satisfy. */
cycle?: (NullableCycleFilter | null),
/** Filters that the issues project must satisfy. */
project?: (NullableProjectFilter | null),
/** Filters that the issues state must satisfy. */
state?: (WorkflowStateFilter | null),
/** Filters that the child issues must satisfy. */
children?: (IssueCollectionFilter | null),
/** Filters that the issues attachments must satisfy. */
attachments?: (AttachmentCollectionFilter | null),
/** [Internal] Comparator for the issues content. */
searchableContent?: (ContentComparator | null),
/** Comparator for filtering issues with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are duplicates. */
hasDuplicateRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested related issues. */
hasSuggestedRelatedIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested similar issues. */
hasSuggestedSimilarIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested assignees. */
hasSuggestedAssignees?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested projects. */
hasSuggestedProjects?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested labels. */
hasSuggestedLabels?: (RelationExistsComparator | null),
/** Comparator for the issues sla status. */
slaStatus?: (SlaStatusComparator | null),
/** Filters that the issues reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the issue's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** [Internal] Lead time (created -> completed) comparator. */
leadTime?: (NullableDurationComparator | null),
/** [Internal] Cycle time (started -> completed) comparator. */
cycleTime?: (NullableDurationComparator | null),
/** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
ageTime?: (NullableDurationComparator | null),
/** [Internal] Triage time (entered triaged -> triaged) comparator. */
triageTime?: (NullableDurationComparator | null),
/** Compound filters, all of which need to be matched by the issue. */
and?: (IssueCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the issue. */
or?: (IssueCollectionFilter[] | null),
/** Filters that needs to be matched by some issues. */
some?: (IssueFilter | null),
/** Filters that needs to be matched by all issues. */
every?: (IssueFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Comparator for optional strings. */
export interface NullableStringComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Equals case insensitive. Matches any values that matches the given string case insensitive. */
eqIgnoreCase?: (Scalars['String'] | null),
/** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
neqIgnoreCase?: (Scalars['String'] | null),
/** Starts with constraint. Matches any values that start with the given string. */
startsWith?: (Scalars['String'] | null),
/** Starts with case insensitive constraint. Matches any values that start with the given string. */
startsWithIgnoreCase?: (Scalars['String'] | null),
/** Doesn't start with constraint. Matches any values that don't start with the given string. */
notStartsWith?: (Scalars['String'] | null),
/** Ends with constraint. Matches any values that end with the given string. */
endsWith?: (Scalars['String'] | null),
/** Doesn't end with constraint. Matches any values that don't end with the given string. */
notEndsWith?: (Scalars['String'] | null),
/** Contains constraint. Matches any values that contain the given string. */
contains?: (Scalars['String'] | null),
/** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
containsIgnoreCase?: (Scalars['String'] | null),
/** Doesn't contain constraint. Matches any values that don't contain the given string. */
notContains?: (Scalars['String'] | null),
/** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
notContainsIgnoreCase?: (Scalars['String'] | null),
/** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
containsIgnoreCaseAndAccent?: (Scalars['String'] | null)}


/** Comparator for estimates. */
export interface EstimateComparator {
/** Equals constraint. */
eq?: (Scalars['Float'] | null),
/** Not-equals constraint. */
neq?: (Scalars['Float'] | null),
/** In-array constraint. */
in?: (Scalars['Float'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['Float'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['Float'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['Float'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['Float'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['Float'] | null),
/** Compound filters, all of which need to be matched by the estimate. */
or?: (NullableNumberComparator[] | null),
/** Compound filters, one of which need to be matched by the estimate. */
and?: (NullableNumberComparator[] | null)}


/** Comparator for optional dates. */
export interface NullableDateComparator {
/** Equals constraint. */
eq?: (Scalars['DateTimeOrDuration'] | null),
/** Not-equals constraint. */
neq?: (Scalars['DateTimeOrDuration'] | null),
/** In-array constraint. */
in?: (Scalars['DateTimeOrDuration'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['DateTimeOrDuration'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['DateTimeOrDuration'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['DateTimeOrDuration'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['DateTimeOrDuration'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['DateTimeOrDuration'] | null)}


/** Comparator for period when issue was added to a cycle. */
export interface CyclePeriodComparator {
/** Equals constraint. */
eq?: (CyclePeriod | null),
/** Not-equals constraint. */
neq?: (CyclePeriod | null),
/** In-array constraint. */
in?: (CyclePeriod[] | null),
/** Not-in-array constraint. */
nin?: (CyclePeriod[] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null)}


/** Comparator for optional timeless dates. */
export interface NullableTimelessDateComparator {
/** Equals constraint. */
eq?: (Scalars['TimelessDateOrDuration'] | null),
/** Not-equals constraint. */
neq?: (Scalars['TimelessDateOrDuration'] | null),
/** In-array constraint. */
in?: (Scalars['TimelessDateOrDuration'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['TimelessDateOrDuration'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['TimelessDateOrDuration'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['TimelessDateOrDuration'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['TimelessDateOrDuration'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['TimelessDateOrDuration'] | null)}


/** Template filtering options. */
export interface NullableTemplateFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the template's name. */
name?: (StringComparator | null),
/** Comparator for the template's type. */
type?: (StringComparator | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the template. */
and?: (NullableTemplateFilter[] | null),
/** Compound filters, one of which need to be matched by the template. */
or?: (NullableTemplateFilter[] | null)}


/** Comparator for issue source type. */
export interface SourceMetadataComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the sub type. */
subType?: (SubTypeComparator | null)}


/** Comparator for source type. */
export interface SubTypeComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null)}


/** Issue filtering options. */
export interface NullableIssueFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the issues number. */
number?: (NumberComparator | null),
/** Comparator for the issues title. */
title?: (StringComparator | null),
/** Comparator for the issues description. */
description?: (NullableStringComparator | null),
/** Comparator for the issues priority. */
priority?: (NullableNumberComparator | null),
/** Comparator for the issues estimate. */
estimate?: (EstimateComparator | null),
/** Comparator for the issues started at date. */
startedAt?: (NullableDateComparator | null),
/** Comparator for the issues triaged at date. */
triagedAt?: (NullableDateComparator | null),
/** Comparator for the issues completed at date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the issues canceled at date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the issues archived at date. */
archivedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto closed at date. */
autoClosedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto archived at date. */
autoArchivedAt?: (NullableDateComparator | null),
/** Comparator for the issues added to cycle at date. */
addedToCycleAt?: (NullableDateComparator | null),
/** Comparator for the period when issue was added to a cycle. */
addedToCyclePeriod?: (CyclePeriodComparator | null),
/** Comparator for the issues due date. */
dueDate?: (NullableTimelessDateComparator | null),
/** Comparator for the issues snoozed until date. */
snoozedUntilAt?: (NullableDateComparator | null),
/** Filters that the issues assignee must satisfy. */
assignee?: (NullableUserFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** [ALPHA] Filters that the recurring issue template must satisfy. */
recurringIssueTemplate?: (NullableTemplateFilter | null),
/** Filters that the source must satisfy. */
sourceMetadata?: (SourceMetadataComparator | null),
/** Filters that the issues creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the issue parent must satisfy. */
parent?: (NullableIssueFilter | null),
/** Filters that the issues snoozer must satisfy. */
snoozedBy?: (NullableUserFilter | null),
/** Filters that issue labels must satisfy. */
labels?: (IssueLabelCollectionFilter | null),
/** Filters that issue subscribers must satisfy. */
subscribers?: (UserCollectionFilter | null),
/** Filters that the issues team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the issues project milestone must satisfy. */
projectMilestone?: (NullableProjectMilestoneFilter | null),
/** Filters that the issues comments must satisfy. */
comments?: (CommentCollectionFilter | null),
/** Filters that the issues cycle must satisfy. */
cycle?: (NullableCycleFilter | null),
/** Filters that the issues project must satisfy. */
project?: (NullableProjectFilter | null),
/** Filters that the issues state must satisfy. */
state?: (WorkflowStateFilter | null),
/** Filters that the child issues must satisfy. */
children?: (IssueCollectionFilter | null),
/** Filters that the issues attachments must satisfy. */
attachments?: (AttachmentCollectionFilter | null),
/** [Internal] Comparator for the issues content. */
searchableContent?: (ContentComparator | null),
/** Comparator for filtering issues with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are duplicates. */
hasDuplicateRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested related issues. */
hasSuggestedRelatedIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested similar issues. */
hasSuggestedSimilarIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested assignees. */
hasSuggestedAssignees?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested projects. */
hasSuggestedProjects?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested labels. */
hasSuggestedLabels?: (RelationExistsComparator | null),
/** Comparator for the issues sla status. */
slaStatus?: (SlaStatusComparator | null),
/** Filters that the issues reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the issue's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** [Internal] Lead time (created -> completed) comparator. */
leadTime?: (NullableDurationComparator | null),
/** [Internal] Cycle time (started -> completed) comparator. */
cycleTime?: (NullableDurationComparator | null),
/** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
ageTime?: (NullableDurationComparator | null),
/** [Internal] Triage time (entered triaged -> triaged) comparator. */
triageTime?: (NullableDurationComparator | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the issue. */
and?: (NullableIssueFilter[] | null),
/** Compound filters, one of which need to be matched by the issue. */
or?: (NullableIssueFilter[] | null)}


/** Issue label filtering options. */
export interface IssueLabelCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the name. */
name?: (StringComparator | null),
/** Comparator for whether the label is a group label. */
isGroup?: (BooleanComparator | null),
/** Filters that the issue labels creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the issue labels team must satisfy. */
team?: (NullableTeamFilter | null),
/** Filters that the issue label's parent label must satisfy. */
parent?: (IssueLabelFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the label. */
and?: (IssueLabelCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the label. */
or?: (IssueLabelCollectionFilter[] | null),
/** Filters that needs to be matched by some issue labels. */
some?: (IssueLabelFilter | null),
/** Filters that needs to be matched by all issue labels. */
every?: (IssueLabelFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Team filtering options. */
export interface NullableTeamFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the team name. */
name?: (StringComparator | null),
/** Comparator for the team key. */
key?: (StringComparator | null),
/** Comparator for the team description. */
description?: (NullableStringComparator | null),
/** Filters that the teams issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filters that the teams parent must satisfy. */
parent?: (NullableTeamFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the team. */
and?: (NullableTeamFilter[] | null),
/** Compound filters, one of which need to be matched by the team. */
or?: (NullableTeamFilter[] | null)}


/** Issue label filtering options. */
export interface IssueLabelFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the name. */
name?: (StringComparator | null),
/** Comparator for whether the label is a group label. */
isGroup?: (BooleanComparator | null),
/** Filters that the issue labels creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the issue labels team must satisfy. */
team?: (NullableTeamFilter | null),
/** Filters that the issue label's parent label must satisfy. */
parent?: (IssueLabelFilter | null),
/** Compound filters, all of which need to be matched by the label. */
and?: (IssueLabelFilter[] | null),
/** Compound filters, one of which need to be matched by the label. */
or?: (IssueLabelFilter[] | null)}


/** User filtering options. */
export interface UserCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the user's name. */
name?: (StringComparator | null),
/** Comparator for the user's display name. */
displayName?: (StringComparator | null),
/** Comparator for the user's email. */
email?: (StringComparator | null),
/** Comparator for the user's activity status. */
active?: (BooleanComparator | null),
/** Filters that the users assigned issues must satisfy. */
assignedIssues?: (IssueCollectionFilter | null),
/** Comparator for the user's admin status. */
admin?: (BooleanComparator | null),
/** Comparator for the user's invited status. */
invited?: (BooleanComparator | null),
/** Comparator for the user's app status. */
app?: (BooleanComparator | null),
/** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
isMe?: (BooleanComparator | null),
/** Compound filters, all of which need to be matched by the user. */
and?: (UserCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the user. */
or?: (UserCollectionFilter[] | null),
/** Filters that needs to be matched by some users. */
some?: (UserFilter | null),
/** Filters that needs to be matched by all users. */
every?: (UserFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** User filtering options. */
export interface UserFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the user's name. */
name?: (StringComparator | null),
/** Comparator for the user's display name. */
displayName?: (StringComparator | null),
/** Comparator for the user's email. */
email?: (StringComparator | null),
/** Comparator for the user's activity status. */
active?: (BooleanComparator | null),
/** Filters that the users assigned issues must satisfy. */
assignedIssues?: (IssueCollectionFilter | null),
/** Comparator for the user's admin status. */
admin?: (BooleanComparator | null),
/** Comparator for the user's invited status. */
invited?: (BooleanComparator | null),
/** Comparator for the user's app status. */
app?: (BooleanComparator | null),
/** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
isMe?: (BooleanComparator | null),
/** Compound filters, all of which need to be matched by the user. */
and?: (UserFilter[] | null),
/** Compound filters, one of which need to be matched by the user. */
or?: (UserFilter[] | null)}


/** Team filtering options. */
export interface TeamFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the team name. */
name?: (StringComparator | null),
/** Comparator for the team key. */
key?: (StringComparator | null),
/** Comparator for the team description. */
description?: (NullableStringComparator | null),
/** Filters that the teams issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filters that the teams parent must satisfy. */
parent?: (NullableTeamFilter | null),
/** Compound filters, all of which need to be matched by the team. */
and?: (TeamFilter[] | null),
/** Compound filters, one of which need to be matched by the team. */
or?: (TeamFilter[] | null)}


/** Project milestone filtering options. */
export interface NullableProjectMilestoneFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project milestone name. */
name?: (NullableStringComparator | null),
/** Comparator for the project milestone target date. */
targetDate?: (NullableDateComparator | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the project milestone. */
and?: (NullableProjectMilestoneFilter[] | null),
/** Compound filters, one of which need to be matched by the project milestone. */
or?: (NullableProjectMilestoneFilter[] | null)}


/** Comment filtering options. */
export interface CommentCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the comment's body. */
body?: (StringComparator | null),
/** Filters that the comment's creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the comment's issue must satisfy. */
issue?: (NullableIssueFilter | null),
/** Filters that the comment's project update must satisfy. */
projectUpdate?: (NullableProjectUpdateFilter | null),
/** Filters that the comment parent must satisfy. */
parent?: (NullableCommentFilter | null),
/** Filters that the comment's document content must satisfy. */
documentContent?: (NullableDocumentContentFilter | null),
/** Filters that the comment's reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the comment's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Compound filters, all of which need to be matched by the comment. */
and?: (CommentCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the comment. */
or?: (CommentCollectionFilter[] | null),
/** Filters that needs to be matched by some comments. */
some?: (CommentFilter | null),
/** Filters that needs to be matched by all comments. */
every?: (CommentFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Nullable project update filtering options. */
export interface NullableProjectUpdateFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Filters that the project update creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the project update project must satisfy. */
project?: (ProjectFilter | null),
/** Filters that the project updates reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the project update. */
and?: (NullableProjectUpdateFilter[] | null),
/** Compound filters, one of which need to be matched by the project update. */
or?: (NullableProjectUpdateFilter[] | null)}


/** Reaction filtering options. */
export interface ReactionCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the reactions emoji. */
emoji?: (StringComparator | null),
/** Comparator for the reactions custom emoji. */
customEmojiId?: (IDComparator | null),
/** Compound filters, all of which need to be matched by the reaction. */
and?: (ReactionCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the reaction. */
or?: (ReactionCollectionFilter[] | null),
/** Filters that needs to be matched by some reactions. */
some?: (ReactionFilter | null),
/** Filters that needs to be matched by all reactions. */
every?: (ReactionFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Reaction filtering options. */
export interface ReactionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the reactions emoji. */
emoji?: (StringComparator | null),
/** Comparator for the reactions custom emoji. */
customEmojiId?: (IDComparator | null),
/** Compound filters, all of which need to be matched by the reaction. */
and?: (ReactionFilter[] | null),
/** Compound filters, one of which need to be matched by the reaction. */
or?: (ReactionFilter[] | null)}


/** Comment filtering options. */
export interface NullableCommentFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the comment's body. */
body?: (StringComparator | null),
/** Filters that the comment's creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the comment's issue must satisfy. */
issue?: (NullableIssueFilter | null),
/** Filters that the comment's project update must satisfy. */
projectUpdate?: (NullableProjectUpdateFilter | null),
/** Filters that the comment parent must satisfy. */
parent?: (NullableCommentFilter | null),
/** Filters that the comment's document content must satisfy. */
documentContent?: (NullableDocumentContentFilter | null),
/** Filters that the comment's reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the comment's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the comment. */
and?: (NullableCommentFilter[] | null),
/** Compound filters, one of which need to be matched by the comment. */
or?: (NullableCommentFilter[] | null)}


/** Document content filtering options. */
export interface NullableDocumentContentFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Filters that the document content project must satisfy. */
project?: (ProjectFilter | null),
/** Filters that the document content document must satisfy. */
document?: (DocumentFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the user. */
and?: (NullableDocumentContentFilter[] | null),
/** Compound filters, one of which need to be matched by the user. */
or?: (NullableDocumentContentFilter[] | null)}


/** Document filtering options. */
export interface DocumentFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the document title. */
title?: (StringComparator | null),
/** Comparator for the document slug ID. */
slugId?: (StringComparator | null),
/** Filters that the document's creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the document's project must satisfy. */
project?: (ProjectFilter | null),
/** Filters that the document's initiative must satisfy. */
initiative?: (InitiativeFilter | null),
/** Compound filters, all of which need to be matched by the document. */
and?: (DocumentFilter[] | null),
/** Compound filters, one of which need to be matched by the document. */
or?: (DocumentFilter[] | null)}


/** Initiative filtering options. */
export interface InitiativeFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the initiative name. */
name?: (StringComparator | null),
/** Comparator for the initiative slug ID. */
slugId?: (StringComparator | null),
/** Comparator for the initiative status: Planned, Active, Completed */
status?: (StringComparator | null),
/** Filters that the initiative creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the initiative owner must satisfy. */
owner?: (UserFilter | null),
/** Comparator for the initiative health: onTrack, atRisk, offTrack */
health?: (StringComparator | null),
/** Comparator for the initiative health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
healthWithAge?: (StringComparator | null),
/** Filters that the initiative must be an ancestor of. */
ancestors?: (InitiativeCollectionFilter | null),
/** Compound filters, all of which need to be matched by the initiative. */
and?: (InitiativeFilter[] | null),
/** Compound filters, one of which need to be matched by the initiative. */
or?: (InitiativeFilter[] | null)}


/** Initiative collection filtering options. */
export interface InitiativeCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the initiative name. */
name?: (StringComparator | null),
/** Comparator for the initiative slug ID. */
slugId?: (StringComparator | null),
/** Comparator for the initiative status: Planned, Active, Completed */
status?: (StringComparator | null),
/** Filters that the initiative creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the initiative owner must satisfy. */
owner?: (UserFilter | null),
/** Comparator for the initiative health: onTrack, atRisk, offTrack */
health?: (StringComparator | null),
/** Comparator for the initiative health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
healthWithAge?: (StringComparator | null),
/** Filters that the initiative must be an ancestor of. */
ancestors?: (InitiativeCollectionFilter | null),
/** Compound filters, all of which need to be matched by the initiative. */
and?: (InitiativeCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the initiative. */
or?: (InitiativeCollectionFilter[] | null),
/** Filters that needs to be matched by some initiatives. */
some?: (InitiativeFilter | null),
/** Filters that needs to be matched by all initiatives. */
every?: (InitiativeFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Customer needs filtering options. */
export interface CustomerNeedCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer need priority. */
priority?: (NumberComparator | null),
/** Filters that the need's project must satisfy. */
project?: (NullableProjectFilter | null),
/** Filters that the need's issue must satisfy. */
issue?: (NullableIssueFilter | null),
/** Filters that the need's comment must satisfy. */
comment?: (NullableCommentFilter | null),
/** Filters that the need's customer must satisfy. */
customer?: (NullableCustomerFilter | null),
/** Compound filters, all of which need to be matched by the customer needs. */
and?: (CustomerNeedCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the customer needs. */
or?: (CustomerNeedCollectionFilter[] | null),
/** Filters that needs to be matched by some customer needs. */
some?: (CustomerNeedFilter | null),
/** Filters that needs to be matched by all customer needs. */
every?: (CustomerNeedFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Project filtering options. */
export interface NullableProjectFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project name. */
name?: (StringComparator | null),
/** Comparator for the project slug ID. */
slugId?: (StringComparator | null),
/** [DEPRECATED] Comparator for the project state. */
state?: (StringComparator | null),
/** Filters that the project's status must satisfy. */
status?: (ProjectStatusFilter | null),
/** Comparator for the projects priority. */
priority?: (NullableNumberComparator | null),
/** [Internal] Filters that project labels must satisfy. */
labels?: (ProjectLabelCollectionFilter | null),
/** [Internal] Comparator for the project's content. */
searchableContent?: (ContentComparator | null),
/** Comparator for the project completion date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the project cancelation date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the project start date. */
startDate?: (NullableDateComparator | null),
/** Comparator for the project target date. */
targetDate?: (NullableDateComparator | null),
/** Comparator for the project health: onTrack, atRisk, offTrack */
health?: (StringComparator | null),
/** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
healthWithAge?: (StringComparator | null),
/** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
activityType?: (StringComparator | null),
/** Comparator for filtering projects with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** [Deprecated] Comparator for filtering projects which this is depended on by. */
hasDependedOnByRelations?: (RelationExistsComparator | null),
/** [Deprecated]Comparator for filtering projects which this depends on. */
hasDependsOnRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** Comparator for filtering projects with violated dependencies. */
hasViolatedRelations?: (RelationExistsComparator | null),
/** Comparator for the project updates. */
projectUpdates?: (ProjectUpdatesCollectionFilter | null),
/** Filters that the projects creator must satisfy. */
creator?: (UserFilter | null),
/** Filters that the projects lead must satisfy. */
lead?: (NullableUserFilter | null),
/** Filters that the projects members must satisfy. */
members?: (UserCollectionFilter | null),
/** Filters that the projects issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filters that the projects roadmaps must satisfy. */
roadmaps?: (RoadmapCollectionFilter | null),
/** Filters that the projects initiatives must satisfy. */
initiatives?: (InitiativeCollectionFilter | null),
/** Filters that the project's milestones must satisfy. */
projectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's completed milestones must satisfy. */
completedProjectMilestones?: (ProjectMilestoneCollectionFilter | null),
/** Filters that the project's next milestone must satisfy. */
nextProjectMilestone?: (ProjectMilestoneFilter | null),
/** Filters that the project's team must satisfy. */
accessibleTeams?: (TeamCollectionFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** Filters that the project's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the project. */
and?: (NullableProjectFilter[] | null),
/** Compound filters, one of which need to be matched by the project. */
or?: (NullableProjectFilter[] | null)}


/** [Internal] Comparator for content. */
export interface ContentComparator {
/** [Internal] Contains constraint. */
contains?: (Scalars['String'] | null),
/** [Internal] Not-contains constraint. */
notContains?: (Scalars['String'] | null)}


/** Comparator for relation existence. */
export interface RelationExistsComparator {
/** Equals constraint. */
eq?: (Scalars['Boolean'] | null),
/** Not equals constraint. */
neq?: (Scalars['Boolean'] | null)}


/** Collection filtering options for filtering projects by project updates. */
export interface ProjectUpdatesCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project update health. */
health?: (StringComparator | null),
/** Compound filters, all of which need to be matched by the project update. */
and?: (ProjectUpdatesCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the update. */
or?: (ProjectUpdatesCollectionFilter[] | null),
/** Filters that needs to be matched by some updates. */
some?: (ProjectUpdatesFilter | null),
/** Filters that needs to be matched by all updates. */
every?: (ProjectUpdatesFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Options for filtering projects by project updates. */
export interface ProjectUpdatesFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project update health. */
health?: (StringComparator | null),
/** Compound filters, all of which need to be matched by the project updates. */
and?: (ProjectUpdatesFilter[] | null),
/** Compound filters, one of which need to be matched by the project updates. */
or?: (ProjectUpdatesFilter[] | null)}


/** Roadmap collection filtering options. */
export interface RoadmapCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the roadmap name. */
name?: (StringComparator | null),
/** Comparator for the roadmap slug ID. */
slugId?: (StringComparator | null),
/** Filters that the roadmap creator must satisfy. */
creator?: (UserFilter | null),
/** Compound filters, all of which need to be matched by the roadmap. */
and?: (RoadmapCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the roadmap. */
or?: (RoadmapCollectionFilter[] | null),
/** Filters that needs to be matched by some roadmaps. */
some?: (RoadmapFilter | null),
/** Filters that needs to be matched by all roadmaps. */
every?: (RoadmapFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Roadmap filtering options. */
export interface RoadmapFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the roadmap name. */
name?: (StringComparator | null),
/** Comparator for the roadmap slug ID. */
slugId?: (StringComparator | null),
/** Filters that the roadmap creator must satisfy. */
creator?: (UserFilter | null),
/** Compound filters, all of which need to be matched by the roadmap. */
and?: (RoadmapFilter[] | null),
/** Compound filters, one of which need to be matched by the roadmap. */
or?: (RoadmapFilter[] | null)}


/** Milestone collection filtering options. */
export interface ProjectMilestoneCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project milestone name. */
name?: (NullableStringComparator | null),
/** Comparator for the project milestone target date. */
targetDate?: (NullableDateComparator | null),
/** Compound filters, all of which need to be matched by the milestone. */
and?: (ProjectMilestoneCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the milestone. */
or?: (ProjectMilestoneCollectionFilter[] | null),
/** Filters that needs to be matched by some milestones. */
some?: (ProjectMilestoneFilter | null),
/** Filters that needs to be matched by all milestones. */
every?: (ProjectMilestoneFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Project milestone filtering options. */
export interface ProjectMilestoneFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the project milestone name. */
name?: (NullableStringComparator | null),
/** Comparator for the project milestone target date. */
targetDate?: (NullableDateComparator | null),
/** Compound filters, all of which need to be matched by the project milestone. */
and?: (ProjectMilestoneFilter[] | null),
/** Compound filters, one of which need to be matched by the project milestone. */
or?: (ProjectMilestoneFilter[] | null)}


/** Team collection filtering options. */
export interface TeamCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Compound filters, all of which need to be matched by the team. */
and?: (TeamCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the team. */
or?: (TeamCollectionFilter[] | null),
/** Filters that needs to be matched by some teams. */
some?: (TeamFilter | null),
/** Filters that needs to be matched by all teams. */
every?: (TeamFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Customer filtering options. */
export interface NullableCustomerFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer name. */
name?: (StringComparator | null),
/** Comparator for the customer slack channel ID. */
slackChannelId?: (StringComparator | null),
/** Comparator for the customer's domains. */
domains?: (StringArrayComparator | null),
/** Comparator for the customer's external IDs. */
externalIds?: (StringArrayComparator | null),
/** Filters that the customer owner must satisfy. */
owner?: (NullableUserFilter | null),
/** Filters that the customer's needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Comparator for the customer generated revenue. */
revenue?: (NumberComparator | null),
/** Comparator for the customer size. */
size?: (NumberComparator | null),
/** Filters that the customer's status must satisfy. */
status?: (CustomerStatusFilter | null),
/** Filters that the customer's tier must satisfy. */
tier?: (CustomerTierFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the customer. */
and?: (NullableCustomerFilter[] | null),
/** Compound filters, one of which need to be matched by the customer. */
or?: (NullableCustomerFilter[] | null)}


/** Comparator for strings. */
export interface StringArrayComparator {
/** Length of the array. Matches any values that have the given length. */
length?: (NumberComparator | null),
/** Compound filters, all of which need to be matched. */
every?: (StringItemComparator | null),
/** Compound filters, one of which needs to be matched. */
some?: (StringItemComparator | null)}


/** Comparator for strings in arrays. */
export interface StringItemComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Equals case insensitive. Matches any values that matches the given string case insensitive. */
eqIgnoreCase?: (Scalars['String'] | null),
/** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
neqIgnoreCase?: (Scalars['String'] | null),
/** Starts with constraint. Matches any values that start with the given string. */
startsWith?: (Scalars['String'] | null),
/** Starts with case insensitive constraint. Matches any values that start with the given string. */
startsWithIgnoreCase?: (Scalars['String'] | null),
/** Doesn't start with constraint. Matches any values that don't start with the given string. */
notStartsWith?: (Scalars['String'] | null),
/** Ends with constraint. Matches any values that end with the given string. */
endsWith?: (Scalars['String'] | null),
/** Doesn't end with constraint. Matches any values that don't end with the given string. */
notEndsWith?: (Scalars['String'] | null),
/** Contains constraint. Matches any values that contain the given string. */
contains?: (Scalars['String'] | null),
/** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
containsIgnoreCase?: (Scalars['String'] | null),
/** Doesn't contain constraint. Matches any values that don't contain the given string. */
notContains?: (Scalars['String'] | null),
/** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
notContainsIgnoreCase?: (Scalars['String'] | null),
/** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
containsIgnoreCaseAndAccent?: (Scalars['String'] | null)}


/** Customer status filtering options. */
export interface CustomerStatusFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer status name. */
name?: (StringComparator | null),
/** Comparator for the customer status description. */
description?: (StringComparator | null),
/** Comparator for the customer status position. */
position?: (NumberComparator | null),
/** Comparator for the customer status type. */
type?: (StringComparator | null),
/** Comparator for the customer status color. */
color?: (StringComparator | null),
/** Compound filters, all of which need to be matched by the customer status. */
and?: (CustomerStatusFilter[] | null),
/** Compound filters, one of which needs to be matched by the customer status. */
or?: (CustomerStatusFilter[] | null)}


/** Customer tier filtering options. */
export interface CustomerTierFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer tier name. */
name?: (StringComparator | null),
/** Comparator for the customer tier description. */
description?: (StringComparator | null),
/** Comparator for the customer tier position. */
position?: (NumberComparator | null),
/** Comparator for the customer tier color. */
color?: (StringComparator | null),
/** Compound filters, all of which need to be matched by the customer tier. */
and?: (CustomerTierFilter[] | null),
/** Compound filters, one of which needs to be matched by the customer tier. */
or?: (CustomerTierFilter[] | null)}


/** Customer filtering options. */
export interface CustomerNeedFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer need priority. */
priority?: (NumberComparator | null),
/** Filters that the need's project must satisfy. */
project?: (NullableProjectFilter | null),
/** Filters that the need's issue must satisfy. */
issue?: (NullableIssueFilter | null),
/** Filters that the need's comment must satisfy. */
comment?: (NullableCommentFilter | null),
/** Filters that the need's customer must satisfy. */
customer?: (NullableCustomerFilter | null),
/** Compound filters, all of which need to be matched by the customer need. */
and?: (CustomerNeedFilter[] | null),
/** Compound filters, one of which need to be matched by the customer need. */
or?: (CustomerNeedFilter[] | null)}


/** Comment filtering options. */
export interface CommentFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the comment's body. */
body?: (StringComparator | null),
/** Filters that the comment's creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the comment's issue must satisfy. */
issue?: (NullableIssueFilter | null),
/** Filters that the comment's project update must satisfy. */
projectUpdate?: (NullableProjectUpdateFilter | null),
/** Filters that the comment parent must satisfy. */
parent?: (NullableCommentFilter | null),
/** Filters that the comment's document content must satisfy. */
documentContent?: (NullableDocumentContentFilter | null),
/** Filters that the comment's reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the comment's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Compound filters, all of which need to be matched by the comment. */
and?: (CommentFilter[] | null),
/** Compound filters, one of which need to be matched by the comment. */
or?: (CommentFilter[] | null)}


/** Cycle filtering options. */
export interface NullableCycleFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the cycle number. */
number?: (NumberComparator | null),
/** Comparator for the cycle name. */
name?: (StringComparator | null),
/** Comparator for the cycle start date. */
startsAt?: (DateComparator | null),
/** Comparator for the cycle ends at date. */
endsAt?: (DateComparator | null),
/** Comparator for the cycle completed at date. */
completedAt?: (DateComparator | null),
/** Comparator for the filtering active cycle. */
isActive?: (BooleanComparator | null),
/** Comparator for filtering for whether the cycle is currently in cooldown. */
isInCooldown?: (BooleanComparator | null),
/** Comparator for the filtering next cycle. */
isNext?: (BooleanComparator | null),
/** Comparator for the filtering previous cycle. */
isPrevious?: (BooleanComparator | null),
/** Comparator for the filtering future cycles. */
isFuture?: (BooleanComparator | null),
/** Comparator for the filtering past cycles. */
isPast?: (BooleanComparator | null),
/** Filters that the cycles team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the cycles issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Filter based on the existence of the relation. */
null?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the cycle. */
and?: (NullableCycleFilter[] | null),
/** Compound filters, one of which need to be matched by the cycle. */
or?: (NullableCycleFilter[] | null)}


/** Workflow state filtering options. */
export interface WorkflowStateFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the workflow state name. */
name?: (StringComparator | null),
/** Comparator for the workflow state description. */
description?: (StringComparator | null),
/** Comparator for the workflow state position. */
position?: (NumberComparator | null),
/** Comparator for the workflow state type. */
type?: (StringComparator | null),
/** Filters that the workflow states team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the workflow states issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Compound filters, all of which need to be matched by the workflow state. */
and?: (WorkflowStateFilter[] | null),
/** Compound filters, one of which need to be matched by the workflow state. */
or?: (WorkflowStateFilter[] | null)}


/** Attachment collection filtering options. */
export interface AttachmentCollectionFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the title. */
title?: (StringComparator | null),
/** Comparator for the subtitle. */
subtitle?: (NullableStringComparator | null),
/** Comparator for the url. */
url?: (StringComparator | null),
/** Filters that the attachments creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Comparator for the source type. */
sourceType?: (SourceTypeComparator | null),
/** Compound filters, all of which need to be matched by the attachment. */
and?: (AttachmentCollectionFilter[] | null),
/** Compound filters, one of which need to be matched by the attachment. */
or?: (AttachmentCollectionFilter[] | null),
/** Filters that needs to be matched by some attachments. */
some?: (AttachmentFilter | null),
/** Filters that needs to be matched by all attachments. */
every?: (AttachmentFilter | null),
/** Comparator for the collection length. */
length?: (NumberComparator | null)}


/** Comparator for `sourceType` field. */
export interface SourceTypeComparator {
/** Equals constraint. */
eq?: (Scalars['String'] | null),
/** Not-equals constraint. */
neq?: (Scalars['String'] | null),
/** In-array constraint. */
in?: (Scalars['String'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['String'][] | null),
/** Equals case insensitive. Matches any values that matches the given string case insensitive. */
eqIgnoreCase?: (Scalars['String'] | null),
/** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
neqIgnoreCase?: (Scalars['String'] | null),
/** Starts with constraint. Matches any values that start with the given string. */
startsWith?: (Scalars['String'] | null),
/** Starts with case insensitive constraint. Matches any values that start with the given string. */
startsWithIgnoreCase?: (Scalars['String'] | null),
/** Doesn't start with constraint. Matches any values that don't start with the given string. */
notStartsWith?: (Scalars['String'] | null),
/** Ends with constraint. Matches any values that end with the given string. */
endsWith?: (Scalars['String'] | null),
/** Doesn't end with constraint. Matches any values that don't end with the given string. */
notEndsWith?: (Scalars['String'] | null),
/** Contains constraint. Matches any values that contain the given string. */
contains?: (Scalars['String'] | null),
/** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
containsIgnoreCase?: (Scalars['String'] | null),
/** Doesn't contain constraint. Matches any values that don't contain the given string. */
notContains?: (Scalars['String'] | null),
/** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
notContainsIgnoreCase?: (Scalars['String'] | null),
/** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
containsIgnoreCaseAndAccent?: (Scalars['String'] | null)}


/** Attachment filtering options. */
export interface AttachmentFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the title. */
title?: (StringComparator | null),
/** Comparator for the subtitle. */
subtitle?: (NullableStringComparator | null),
/** Comparator for the url. */
url?: (StringComparator | null),
/** Filters that the attachments creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Comparator for the source type. */
sourceType?: (SourceTypeComparator | null),
/** Compound filters, all of which need to be matched by the attachment. */
and?: (AttachmentFilter[] | null),
/** Compound filters, one of which need to be matched by the attachment. */
or?: (AttachmentFilter[] | null)}


/** Comparator for sla status. */
export interface SlaStatusComparator {
/** Equals constraint. */
eq?: (SlaStatus | null),
/** Not-equals constraint. */
neq?: (SlaStatus | null),
/** In-array constraint. */
in?: (SlaStatus[] | null),
/** Not-in-array constraint. */
nin?: (SlaStatus[] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null)}


/** Nullable comparator for optional durations. */
export interface NullableDurationComparator {
/** Equals constraint. */
eq?: (Scalars['Duration'] | null),
/** Not-equals constraint. */
neq?: (Scalars['Duration'] | null),
/** In-array constraint. */
in?: (Scalars['Duration'][] | null),
/** Not-in-array constraint. */
nin?: (Scalars['Duration'][] | null),
/** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
null?: (Scalars['Boolean'] | null),
/** Less-than constraint. Matches any values that are less than the given value. */
lt?: (Scalars['Duration'] | null),
/** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
lte?: (Scalars['Duration'] | null),
/** Greater-than constraint. Matches any values that are greater than the given value. */
gt?: (Scalars['Duration'] | null),
/** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
gte?: (Scalars['Duration'] | null)}


/** Issue filtering options. */
export interface IssueFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the issues number. */
number?: (NumberComparator | null),
/** Comparator for the issues title. */
title?: (StringComparator | null),
/** Comparator for the issues description. */
description?: (NullableStringComparator | null),
/** Comparator for the issues priority. */
priority?: (NullableNumberComparator | null),
/** Comparator for the issues estimate. */
estimate?: (EstimateComparator | null),
/** Comparator for the issues started at date. */
startedAt?: (NullableDateComparator | null),
/** Comparator for the issues triaged at date. */
triagedAt?: (NullableDateComparator | null),
/** Comparator for the issues completed at date. */
completedAt?: (NullableDateComparator | null),
/** Comparator for the issues canceled at date. */
canceledAt?: (NullableDateComparator | null),
/** Comparator for the issues archived at date. */
archivedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto closed at date. */
autoClosedAt?: (NullableDateComparator | null),
/** Comparator for the issues auto archived at date. */
autoArchivedAt?: (NullableDateComparator | null),
/** Comparator for the issues added to cycle at date. */
addedToCycleAt?: (NullableDateComparator | null),
/** Comparator for the period when issue was added to a cycle. */
addedToCyclePeriod?: (CyclePeriodComparator | null),
/** Comparator for the issues due date. */
dueDate?: (NullableTimelessDateComparator | null),
/** Comparator for the issues snoozed until date. */
snoozedUntilAt?: (NullableDateComparator | null),
/** Filters that the issues assignee must satisfy. */
assignee?: (NullableUserFilter | null),
/** Filters that the last applied template must satisfy. */
lastAppliedTemplate?: (NullableTemplateFilter | null),
/** [ALPHA] Filters that the recurring issue template must satisfy. */
recurringIssueTemplate?: (NullableTemplateFilter | null),
/** Filters that the source must satisfy. */
sourceMetadata?: (SourceMetadataComparator | null),
/** Filters that the issues creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the issue parent must satisfy. */
parent?: (NullableIssueFilter | null),
/** Filters that the issues snoozer must satisfy. */
snoozedBy?: (NullableUserFilter | null),
/** Filters that issue labels must satisfy. */
labels?: (IssueLabelCollectionFilter | null),
/** Filters that issue subscribers must satisfy. */
subscribers?: (UserCollectionFilter | null),
/** Filters that the issues team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the issues project milestone must satisfy. */
projectMilestone?: (NullableProjectMilestoneFilter | null),
/** Filters that the issues comments must satisfy. */
comments?: (CommentCollectionFilter | null),
/** Filters that the issues cycle must satisfy. */
cycle?: (NullableCycleFilter | null),
/** Filters that the issues project must satisfy. */
project?: (NullableProjectFilter | null),
/** Filters that the issues state must satisfy. */
state?: (WorkflowStateFilter | null),
/** Filters that the child issues must satisfy. */
children?: (IssueCollectionFilter | null),
/** Filters that the issues attachments must satisfy. */
attachments?: (AttachmentCollectionFilter | null),
/** [Internal] Comparator for the issues content. */
searchableContent?: (ContentComparator | null),
/** Comparator for filtering issues with relations. */
hasRelatedRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are duplicates. */
hasDuplicateRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocked. */
hasBlockedByRelations?: (RelationExistsComparator | null),
/** Comparator for filtering issues which are blocking. */
hasBlockingRelations?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested related issues. */
hasSuggestedRelatedIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested similar issues. */
hasSuggestedSimilarIssues?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested assignees. */
hasSuggestedAssignees?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested projects. */
hasSuggestedProjects?: (RelationExistsComparator | null),
/** [Internal] Comparator for filtering issues which have suggested labels. */
hasSuggestedLabels?: (RelationExistsComparator | null),
/** Comparator for the issues sla status. */
slaStatus?: (SlaStatusComparator | null),
/** Filters that the issues reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Filters that the issue's customer needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Count of customers */
customerCount?: (NumberComparator | null),
/** [Internal] Lead time (created -> completed) comparator. */
leadTime?: (NullableDurationComparator | null),
/** [Internal] Cycle time (started -> completed) comparator. */
cycleTime?: (NullableDurationComparator | null),
/** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
ageTime?: (NullableDurationComparator | null),
/** [Internal] Triage time (entered triaged -> triaged) comparator. */
triageTime?: (NullableDurationComparator | null),
/** Compound filters, all of which need to be matched by the issue. */
and?: (IssueFilter[] | null),
/** Compound filters, one of which need to be matched by the issue. */
or?: (IssueFilter[] | null)}


/** [Internal] Project label filtering options. */
export interface ProjectLabelFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the name. */
name?: (StringComparator | null),
/** Comparator for whether the label is a group label. */
isGroup?: (BooleanComparator | null),
/** Filters that the project labels creator must satisfy. */
creator?: (NullableUserFilter | null),
/** Filters that the project label's parent label must satisfy. */
parent?: (ProjectLabelFilter | null),
/** Compound filters, all of which need to be matched by the label. */
and?: (ProjectLabelFilter[] | null),
/** Compound filters, one of which need to be matched by the label. */
or?: (ProjectLabelFilter[] | null)}


/** Project sorting options. */
export interface ProjectSortInput {
/** Sort by project name */
name?: (ProjectNameSort | null),
/** Sort by project status */
status?: (ProjectStatusSort | null),
/** Sort by project priority */
priority?: (ProjectPrioritySort | null),
/** Sort by manual order */
manual?: (ProjectManualSort | null),
/** Sort by project target date */
targetDate?: (TargetDateSort | null),
/** Sort by project start date */
startDate?: (StartDateSort | null)}


/** Project name sorting options. */
export interface ProjectNameSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Project status sorting options. */
export interface ProjectStatusSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Project priority sorting options. */
export interface ProjectPrioritySort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** Whether to consider no priority as the highest or lowest priority */
noPriorityFirst?: (Scalars['Boolean'] | null)}


/** Project manual order sorting options. */
export interface ProjectManualSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Project target date sorting options. */
export interface TargetDateSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Project start date sorting options. */
export interface StartDateSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}

export interface EntityExternalLinkConnectionGenqlSelection{
    edges?: EntityExternalLinkEdgeGenqlSelection
    nodes?: EntityExternalLinkGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EntityExternalLinkEdgeGenqlSelection{
    node?: EntityExternalLinkGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An external link for an entity like initiative, etc... */
export interface EntityExternalLinkGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The link's URL. */
    url?: boolean | number
    /** The link's label. */
    label?: boolean | number
    /** The order of the item in the resources list. */
    sortOrder?: boolean | number
    /** The user who created the link. */
    creator?: UserGenqlSelection
    /** The initiative that the link is associated with. */
    initiative?: InitiativeGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The configuration of all integrations for different entities. */
export interface IntegrationsSettingsGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The type of view to which the integration settings context is associated with. */
    contextViewType?: boolean | number
    /**
     * @deprecated No longer in use. Use `slackIssueAddedToView` instead.
     * Whether to send a Slack message when a new issue is created for the project or the team.
     */
    slackIssueCreated?: boolean | number
    /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
    slackIssueNewComment?: boolean | number
    /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
    slackIssueStatusChangedDone?: boolean | number
    /** Whether to send a Slack message when an issue is added to the custom view. */
    slackIssueAddedToView?: boolean | number
    /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
    slackIssueStatusChangedAll?: boolean | number
    /** Whether to send a Slack message when a project update is created. */
    slackProjectUpdateCreated?: boolean | number
    /** Whether to send a new project update to team Slack channels. */
    slackProjectUpdateCreatedToTeam?: boolean | number
    /** Whether to send a new project update to workspace Slack channel. */
    slackProjectUpdateCreatedToWorkspace?: boolean | number
    /** Whether to send a Slack message when a initiate update is created. */
    slackInitiativeUpdateCreated?: boolean | number
    /** Whether to send a Slack message when a new issue is added to triage. */
    slackIssueAddedToTriage?: boolean | number
    /** Whether to send a Slack message when an SLA is at high risk. */
    slackIssueSlaHighRisk?: boolean | number
    /** Whether to send a Slack message when an SLA is breached. */
    slackIssueSlaBreached?: boolean | number
    /** Team which those settings apply to. */
    team?: TeamGenqlSelection
    /** Project which those settings apply to. */
    project?: ProjectGenqlSelection
    /** Initiative which those settings apply to. */
    initiative?: InitiativeGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeHistoryConnectionGenqlSelection{
    edges?: InitiativeHistoryEdgeGenqlSelection
    nodes?: InitiativeHistoryGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeHistoryEdgeGenqlSelection{
    node?: InitiativeHistoryGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A initiative history containing relevant change events. */
export interface InitiativeHistoryGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The events that happened while recording that history. */
    entries?: boolean | number
    /** The initiative that the history is associated with. */
    initiative?: InitiativeGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeConnectionGenqlSelection{
    edges?: InitiativeEdgeGenqlSelection
    nodes?: InitiativeGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeEdgeGenqlSelection{
    node?: InitiativeGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CommentConnectionGenqlSelection{
    edges?: CommentEdgeGenqlSelection
    nodes?: CommentGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CommentEdgeGenqlSelection{
    node?: CommentGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A generic post. */
export interface PostGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The update content in markdown format. */
    body?: boolean | number
    /** [Internal] The content of the post as a Prosemirror document. */
    bodyData?: boolean | number
    /** [Internal] The written update data used to compose the written post. */
    writtenSummaryData?: boolean | number
    /** The update content summarized for audio consumption. */
    audioSummary?: boolean | number
    /** The post's title. */
    title?: boolean | number
    /** The post's unique URL slug. */
    slugId?: boolean | number
    /** The user who wrote the post. */
    creator?: UserGenqlSelection
    /** The time the post was edited. */
    editedAt?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** A URL of the TTL (text-to-language) for the body. */
    ttlUrl?: boolean | number
    /** The user that the post is associated with. */
    user?: UserGenqlSelection
    /** The team that the post is associated with. */
    team?: TeamGenqlSelection
    /** The type of the post. */
    type?: boolean | number
    /** The log id of the ai response. */
    evalLogId?: boolean | number
    /** Schedule used to create a post summary. */
    feedSummaryScheduleAtCreate?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them. */
export interface ExternalUserGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The external user's full name. */
    name?: boolean | number
    /** The external user's display name. Unique within each organization. Can match the display name of an actual user. */
    displayName?: boolean | number
    /** The external user's email address. */
    email?: boolean | number
    /** An URL to the external user's avatar image. */
    avatarUrl?: boolean | number
    /** Organization the external user belongs to. */
    organization?: OrganizationGenqlSelection
    /** The last time the external user was seen interacting with Linear. */
    lastSeen?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A bot actor is an actor that is not a user, but an application or integration. */
export interface ActorBotGenqlSelection{
    id?: boolean | number
    /** The type of bot. */
    type?: boolean | number
    /** The sub type of the bot. */
    subType?: boolean | number
    /** The display name of the bot. */
    name?: boolean | number
    /** The display name of the external user on behalf of which the bot acted. */
    userDisplayName?: boolean | number
    /** A url pointing to the avatar representing this bot. */
    avatarUrl?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A comment thread that is synced with an external source. */
export interface SyncedExternalThreadGenqlSelection{
    id?: boolean | number
    /** The type of the external source. */
    type?: boolean | number
    /** The sub type of the external source. */
    subType?: boolean | number
    /** The display name of the source. */
    name?: boolean | number
    /** The display name of the thread. */
    displayName?: boolean | number
    /** The external url of the thread. */
    url?: boolean | number
    /** Whether this thread is syncing with the external service. */
    isConnected?: boolean | number
    /** Whether the current user has the corresponding personal integration connected for the external service. */
    isPersonalIntegrationConnected?: boolean | number
    /** Whether a connected personal integration is required to comment in this thread. */
    isPersonalIntegrationRequired?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Information about an external entity. */
export interface ExternalEntityInfoGenqlSelection{
    /** The id of the external entity. */
    id?: boolean | number
    /** The name of the service this entity is synced with. */
    service?: boolean | number
    /** Metadata about the external entity. */
    metadata?: ExternalEntityInfoMetadataGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ExternalEntityInfoMetadataGenqlSelection{
    on_ExternalEntityInfoGithubMetadata?:ExternalEntityInfoGithubMetadataGenqlSelection,
    on_ExternalEntityInfoJiraMetadata?:ExternalEntityInfoJiraMetadataGenqlSelection,
    on_ExternalEntitySlackMetadata?:ExternalEntitySlackMetadataGenqlSelection,
    __typename?: boolean | number
}


/** Metadata about the external GitHub entity. */
export interface ExternalEntityInfoGithubMetadataGenqlSelection{
    /** The repository name. */
    repo?: boolean | number
    /** The owner of the repository. */
    owner?: boolean | number
    /** The number of the issue. */
    number?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Metadata about the external Jira entity. */
export interface ExternalEntityInfoJiraMetadataGenqlSelection{
    /** The key of the Jira issue. */
    issueKey?: boolean | number
    /** The id of the Jira project. */
    projectId?: boolean | number
    /** The id of the Jira issue type. */
    issueTypeId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Metadata about the external Slack entity. */
export interface ExternalEntitySlackMetadataGenqlSelection{
    /** Whether the entity originated from Slack (not Linear). */
    isFromSlack?: boolean | number
    /** The id of the Slack channel. */
    channelId?: boolean | number
    /** The name of the Slack channel. */
    channelName?: boolean | number
    /** The URL of the Slack message. */
    messageUrl?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** User favorites presented in the sidebar. */
export interface FavoriteGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The type of the favorite. */
    type?: boolean | number
    /** The parent folder of the favorite. */
    parent?: FavoriteGenqlSelection
    /** The name of the folder. Only applies to favorites of type folder. */
    folderName?: boolean | number
    /** The targeted tab of the project. */
    projectTab?: boolean | number
    /** The type of favorited predefined view. */
    predefinedViewType?: boolean | number
    /** The targeted tab of the initiative. */
    initiativeTab?: boolean | number
    /** The owner of the favorite. */
    owner?: UserGenqlSelection
    /** The order of the item in the favorites list. */
    sortOrder?: boolean | number
    /** Children of the favorite. Only applies to favorites of type folder. */
    children?: (FavoriteConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The favorited issue. */
    issue?: IssueGenqlSelection
    /** The favorited project. */
    project?: ProjectGenqlSelection
    /** [INTERNAL] The favorited facet. */
    facet?: FacetGenqlSelection
    /** [DEPRECATED] The favorited team of the project. */
    projectTeam?: TeamGenqlSelection
    /** The favorited cycle. */
    cycle?: CycleGenqlSelection
    /** The favorited custom view. */
    customView?: CustomViewGenqlSelection
    /** The team of the favorited predefined view. */
    predefinedViewTeam?: TeamGenqlSelection
    /** The favorited document. */
    document?: DocumentGenqlSelection
    /** The favorited roadmap. */
    roadmap?: RoadmapGenqlSelection
    /** The favorited initiative. */
    initiative?: InitiativeGenqlSelection
    /** The favorited label. */
    label?: IssueLabelGenqlSelection
    /** [Internal] The favorited project label. */
    projectLabel?: ProjectLabelGenqlSelection
    /** The favorited user. */
    user?: UserGenqlSelection
    /** The favorited customer. */
    customer?: CustomerGenqlSelection
    /** The favorited dashboard. */
    dashboard?: DashboardGenqlSelection
    /** URL of the favorited entity. Folders return 'null' value. */
    url?: boolean | number
    /** [Internal] Favorite's title text (name of the favorite'd object or folder). */
    title?: boolean | number
    /** [Internal] Detail text for favorite's `title` (e.g. team's name for a project). */
    detail?: boolean | number
    /** [Internal] Returns the color of the favorite's icon. Unavailable for avatars and views with fixed icons (e.g. cycle). */
    color?: boolean | number
    /** [Internal] Name of the favorite's icon. Unavailable for standard views, issues, and avatars */
    icon?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface FavoriteConnectionGenqlSelection{
    edges?: FavoriteEdgeGenqlSelection
    nodes?: FavoriteGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface FavoriteEdgeGenqlSelection{
    node?: FavoriteGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A set of issues to be resolved in a specified amount of time. */
export interface CycleGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The number of the cycle. */
    number?: boolean | number
    /** The custom name of the cycle. */
    name?: boolean | number
    /** The cycle's description. */
    description?: boolean | number
    /** The start time of the cycle. */
    startsAt?: boolean | number
    /** The end time of the cycle. */
    endsAt?: boolean | number
    /** The completion time of the cycle. If null, the cycle hasn't been completed. */
    completedAt?: boolean | number
    /** The time at which the cycle was automatically archived by the auto pruning process. */
    autoArchivedAt?: boolean | number
    /** The total number of issues in the cycle after each day. */
    issueCountHistory?: boolean | number
    /** The number of completed issues in the cycle after each day. */
    completedIssueCountHistory?: boolean | number
    /** The total number of estimation points after each day. */
    scopeHistory?: boolean | number
    /** The number of completed estimation points after each day. */
    completedScopeHistory?: boolean | number
    /** The number of in progress estimation points after each day. */
    inProgressScopeHistory?: boolean | number
    /** The team that the cycle is associated with. */
    team?: TeamGenqlSelection
    /** [Internal] The progress history of the cycle. */
    progressHistory?: boolean | number
    /** [Internal] The current progress of the cycle. */
    currentProgress?: boolean | number
    /** The cycle inherited from. */
    inheritedFrom?: CycleGenqlSelection
    /** Issues associated with the cycle. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Issues that weren't completed when the cycle was closed. */
    uncompletedIssuesUponClose?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A custom view that has been saved by a user. */
export interface CustomViewGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the custom view. */
    name?: boolean | number
    /** The description of the custom view. */
    description?: boolean | number
    /** The icon of the custom view. */
    icon?: boolean | number
    /** The color of the icon of the custom view. */
    color?: boolean | number
    /** The organization of the custom view. */
    organization?: OrganizationGenqlSelection
    /** The user who created the custom view. */
    creator?: UserGenqlSelection
    /** The user who owns the custom view. */
    owner?: UserGenqlSelection
    /** The user who last updated the custom view. */
    updatedBy?: UserGenqlSelection
    /**
     * @deprecated Will be replaced by `filterData` in a future update
     * The filters applied to issues in the custom view.
     */
    filters?: boolean | number
    /** The filter applied to issues in the custom view. */
    filterData?: boolean | number
    /** The filter applied to projects in the custom view. */
    projectFilterData?: boolean | number
    /** The filter applied to feed items in the custom view. */
    feedItemFilterData?: boolean | number
    /** Whether the custom view is shared with everyone in the organization. */
    shared?: boolean | number
    /** The custom view's unique URL slug. */
    slugId?: boolean | number
    /** The model name of the custom view. */
    modelName?: boolean | number
    /** [INTERNAL] The facet associated with the custom view. */
    facet?: FacetGenqlSelection
    /** The team associated with the custom view. */
    team?: TeamGenqlSelection
    /** Projects associated with the custom view. */
    projects?: (ProjectConnectionGenqlSelection & { __args: {
    /** Filter returned projects. */
    filter?: (ProjectFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned projects. */
    sort?: (ProjectSortInput[] | null)} })
    /** Issues associated with the custom view. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned issues. */
    sort?: (IssueSortInput[] | null)} })
    /** The current users view preferences for this custom view. */
    userViewPreferences?: ViewPreferencesGenqlSelection
    /** The organizations default view preferences for this custom view. */
    organizationViewPreferences?: ViewPreferencesGenqlSelection
    /** The calculated view preferences values for this custom view. */
    viewPreferencesValues?: ViewPreferencesValuesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Issue sorting options. */
export interface IssueSortInput {
/** Sort by priority */
priority?: (PrioritySort | null),
/** Sort by estimate */
estimate?: (EstimateSort | null),
/** Sort by issue title */
title?: (TitleSort | null),
/** Sort by label */
label?: (LabelSort | null),
/** Sort by label group */
labelGroup?: (LabelGroupSort | null),
/** Sort by SLA status */
slaStatus?: (SlaStatusSort | null),
/** Sort by issue creation date */
createdAt?: (CreatedAtSort | null),
/** Sort by issue update date */
updatedAt?: (UpdatedAtSort | null),
/** Sort by issue completion date */
completedAt?: (CompletedAtSort | null),
/** Sort by issue due date */
dueDate?: (DueDateSort | null),
/** Sort by Cycle start date */
cycle?: (CycleSort | null),
/** Sort by Project Milestone target date */
milestone?: (MilestoneSort | null),
/** Sort by assignee name */
assignee?: (AssigneeSort | null),
/** Sort by Project name */
project?: (ProjectSort | null),
/** Sort by Team name */
team?: (TeamSort | null),
/** Sort by manual order */
manual?: (ManualSort | null),
/** Sort by workflow state type */
workflowState?: (WorkflowStateSort | null),
/** Sort by customer name */
customer?: (CustomerSort | null),
/** Sort by customer revenue */
customerRevenue?: (CustomerRevenueSort | null),
/** Sort by number of customers associated with the issue */
customerCount?: (CustomerCountSort | null),
/** Sort by number of important customers associated with the issue */
customerImportantCount?: (CustomerImportantCountSort | null),
/** Sort by the root issue */
rootIssue?: (RootIssueSort | null),
/** [ALPHA] Sort by number of links associated with the issue */
linkCount?: (LinkCountSort | null)}


/** Issue priority sorting options. */
export interface PrioritySort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** Whether to consider no priority as the highest or lowest priority */
noPriorityFirst?: (Scalars['Boolean'] | null)}


/** Issue estimate sorting options. */
export interface EstimateSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue title sorting options. */
export interface TitleSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue label sorting options. */
export interface LabelSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue label-group sorting options. */
export interface LabelGroupSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** The label-group id to sort by */
labelGroupId: Scalars['String']}


/** Issue SLA status sorting options. */
export interface SlaStatusSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue creation date sorting options. */
export interface CreatedAtSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue update date sorting options. */
export interface UpdatedAtSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue completion date sorting options. */
export interface CompletedAtSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue due date sorting options. */
export interface DueDateSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue cycle sorting options. */
export interface CycleSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** When set to true, cycles will be ordered with a custom order. Current cycle comes first, followed by upcoming cycles in ASC order, followed by previous cycles in DESC order. */
currentCycleFirst?: (Scalars['Boolean'] | null)}


/** Issue project milestone options. */
export interface MilestoneSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue assignee sorting options. */
export interface AssigneeSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue project sorting options. */
export interface ProjectSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue team sorting options. */
export interface TeamSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue manual sorting options. */
export interface ManualSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue workflow state sorting options. */
export interface WorkflowStateSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** Whether to sort closed issues by recency */
closedIssuesOrderedByRecency?: (Scalars['Boolean'] | null)}


/** Issue customer sorting options. */
export interface CustomerSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** [ALPHA] Issue customer revenue sorting options. */
export interface CustomerRevenueSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** [ALPHA] Issue customer count sorting options. */
export interface CustomerCountSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** [ALPHA] Issue customer important count sorting options. */
export interface CustomerImportantCountSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Issue root-issue sorting options. */
export interface RootIssueSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null),
/** The sort to apply to the root issues */
sort: IssueSortInput}


/** [ALPHA] Issue link count sorting options. */
export interface LinkCountSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** View preferences. */
export interface ViewPreferencesGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The view preference type. */
    type?: boolean | number
    /** The view type. */
    viewType?: boolean | number
    /** The view preferences */
    preferences?: ViewPreferencesValuesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ViewPreferencesValuesGenqlSelection{
    /** The issue ordering. */
    viewOrdering?: boolean | number
    /** The issue grouping. */
    issueGrouping?: boolean | number
    /** Whether to show completed issues. */
    showCompletedIssues?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A document that can be attached to different entities. */
export interface DocumentGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The document title. */
    title?: boolean | number
    /** The icon of the document. */
    icon?: boolean | number
    /** The color of the icon. */
    color?: boolean | number
    /** The user who created the document. */
    creator?: UserGenqlSelection
    /** The user who last updated the document. */
    updatedBy?: UserGenqlSelection
    /** The project that the document is associated with. */
    project?: ProjectGenqlSelection
    /** The initiative that the document is associated with. */
    initiative?: InitiativeGenqlSelection
    /** [Internal] The team that the document is associated with. */
    team?: TeamGenqlSelection
    /** The document's unique URL slug. */
    slugId?: boolean | number
    /** The last template that was applied to this document. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The time at which the document was hidden. Null if the entity has not been hidden. */
    hiddenAt?: boolean | number
    /** A flag that indicates whether the document is in the trash bin. */
    trashed?: boolean | number
    /** The order of the item in the resources list. */
    sortOrder?: boolean | number
    /** Comments associated with the document. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The documents content in markdown format. */
    content?: boolean | number
    /** [Internal] The documents content as YJS state. */
    contentState?: boolean | number
    /** The ID of the document content associated with the document. */
    documentContentId?: boolean | number
    /** The canonical url for the document. */
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A roadmap for projects. */
export interface RoadmapGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the roadmap. */
    name?: boolean | number
    /** The description of the roadmap. */
    description?: boolean | number
    /** The organization of the roadmap. */
    organization?: OrganizationGenqlSelection
    /** The user who created the roadmap. */
    creator?: UserGenqlSelection
    /** The user who owns the roadmap. */
    owner?: UserGenqlSelection
    /** The roadmap's unique URL slug. */
    slugId?: boolean | number
    /** The sort order of the roadmap within the organization. */
    sortOrder?: boolean | number
    /** The roadmap's color. */
    color?: boolean | number
    /** Projects associated with the roadmap. */
    projects?: (ProjectConnectionGenqlSelection & { __args: {
    /** Filter returned projects. */
    filter?: (ProjectFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The canonical url for the roadmap. */
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Labels that can be associated with issues. */
export interface IssueLabelGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The label's name. */
    name?: boolean | number
    /** The label's description. */
    description?: boolean | number
    /** The label's color as a HEX string. */
    color?: boolean | number
    /** Whether the label is a group. */
    isGroup?: boolean | number
    /** @deprecated Workspace labels are identified by their team being null. */
    organization?: OrganizationGenqlSelection
    /** The team that the label is associated with. If null, the label is associated with the global workspace. */
    team?: TeamGenqlSelection
    /** The user who created the label. */
    creator?: UserGenqlSelection
    /** The parent label. */
    parent?: IssueLabelGenqlSelection
    /** The original label inherited from. */
    inheritedFrom?: IssueLabelGenqlSelection
    /** Issues associated with the label. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Children of the label. */
    children?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueLabelConnectionGenqlSelection{
    edges?: IssueLabelEdgeGenqlSelection
    nodes?: IssueLabelGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueLabelEdgeGenqlSelection{
    node?: IssueLabelGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] Labels that can be associated with projects. */
export interface ProjectLabelGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The label's name. */
    name?: boolean | number
    /** The label's description. */
    description?: boolean | number
    /** The label's color as a HEX string. */
    color?: boolean | number
    /** Whether the label is a group. */
    isGroup?: boolean | number
    organization?: OrganizationGenqlSelection
    /** The user who created the label. */
    creator?: UserGenqlSelection
    /** The parent label. */
    parent?: ProjectLabelGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A customer whose needs will be tied to issues or projects. */
export interface CustomerGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The customer's name. */
    name?: boolean | number
    /** The customer's logo URL. */
    logoUrl?: boolean | number
    /** The domains associated with this customer. */
    domains?: boolean | number
    /** The ids of the customers in external systems. */
    externalIds?: boolean | number
    /** The ID of the Slack channel used to interact with the customer. */
    slackChannelId?: boolean | number
    /** The user who owns the customer. */
    owner?: UserGenqlSelection
    /** The current status of the customer. */
    status?: CustomerStatusGenqlSelection
    /** The annual revenue generated by the customer. */
    revenue?: boolean | number
    /** The size of the customer. */
    size?: boolean | number
    /** The tier of the customer. */
    tier?: CustomerTierGenqlSelection
    /** The approximate number of needs of the customer. */
    approximateNeedCount?: boolean | number
    /** The customer's unique URL slug. */
    slugId?: boolean | number
    /** The ID of the main source, when a customer has multiple sources. Must be one of externalIds. */
    mainSourceId?: boolean | number
    /** The integration that manages the Customer. */
    integration?: IntegrationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A customer status. */
export interface CustomerStatusGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the status. */
    name?: boolean | number
    /** The UI color of the status as a HEX string. */
    color?: boolean | number
    /** Description of the status. */
    description?: boolean | number
    /** The position of the status in the workspace's customers flow. */
    position?: boolean | number
    /** The display name of the status. */
    displayName?: boolean | number
    /**
     * @deprecated Customer statuses are no longer grouped by type.
     * The type of the customer status.
     */
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A customer tier. */
export interface CustomerTierGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the tier. */
    name?: boolean | number
    /** The UI color of the tier as a HEX string. */
    color?: boolean | number
    /** Description of the tier. */
    description?: boolean | number
    /** The position of the tier in the workspace's customers flow. */
    position?: boolean | number
    /** The display name of the tier. */
    displayName?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An integration with an external service. */
export interface IntegrationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The integration's type. */
    service?: boolean | number
    /** The organization that the integration is associated with. */
    organization?: OrganizationGenqlSelection
    /** The team that the integration is associated with. */
    team?: TeamGenqlSelection
    /** The user that added the integration. */
    creator?: UserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A dashboard, usually a collection of widgets to display several insights at once. */
export interface DashboardGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The dashboard's unique URL slug. */
    slugId?: boolean | number
    /** The name of the dashboard. */
    name?: boolean | number
    /** The description of the dashboard. */
    description?: boolean | number
    /** The icon of the dashboard. */
    icon?: boolean | number
    /** The color of the icon of the dashboard. */
    color?: boolean | number
    /** The sort order of the dashboard within the organization or its team. */
    sortOrder?: boolean | number
    /** Whether the dashboard is shared with everyone in the organization. */
    shared?: boolean | number
    /** The organization of the dashboard. */
    organization?: OrganizationGenqlSelection
    /** The user who created the dashboard. */
    creator?: UserGenqlSelection
    /** The user who last updated the dashboard. */
    updatedBy?: UserGenqlSelection
    /** The owner of the dashboard. */
    owner?: UserGenqlSelection
    /** The filter applied to all dashboard widgets showing issues data. */
    issueFilter?: boolean | number
    /** The filter applied to all dashboard widgets showing projects data. */
    projectFilter?: boolean | number
    /** The widgets on the dashboard. */
    widgets?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamConnectionGenqlSelection{
    edges?: TeamEdgeGenqlSelection
    nodes?: TeamGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamEdgeGenqlSelection{
    node?: TeamGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserConnectionGenqlSelection{
    edges?: UserEdgeGenqlSelection
    nodes?: UserGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserEdgeGenqlSelection{
    node?: UserGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectUpdateConnectionGenqlSelection{
    edges?: ProjectUpdateEdgeGenqlSelection
    nodes?: ProjectUpdateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectUpdateEdgeGenqlSelection{
    node?: ProjectUpdateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentConnectionGenqlSelection{
    edges?: DocumentEdgeGenqlSelection
    nodes?: DocumentGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentEdgeGenqlSelection{
    node?: DocumentGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneConnectionGenqlSelection{
    edges?: ProjectMilestoneEdgeGenqlSelection
    nodes?: ProjectMilestoneGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneEdgeGenqlSelection{
    node?: ProjectMilestoneGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A milestone for a project. */
export interface ProjectMilestoneGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the project milestone. */
    name?: boolean | number
    /** The content of the project milestone description. */
    documentContent?: DocumentContentGenqlSelection
    /** The planned completion date of the milestone. */
    targetDate?: boolean | number
    /** The project of the milestone. */
    project?: ProjectGenqlSelection
    /** [Internal] The progress history of the project milestone. */
    progressHistory?: boolean | number
    /** [Internal] The current progress of the project milestone. */
    currentProgress?: boolean | number
    /** The order of the milestone in relation to other milestones within a project. */
    sortOrder?: boolean | number
    /** The project milestone's description in markdown format. */
    description?: boolean | number
    /** The status of the project milestone. */
    status?: boolean | number
    /** The progress % of the project milestone. */
    progress?: boolean | number
    /** [Internal] The project milestone's description as YJS state. */
    descriptionState?: boolean | number
    /** Issues associated with the project milestone. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectHistoryConnectionGenqlSelection{
    edges?: ProjectHistoryEdgeGenqlSelection
    nodes?: ProjectHistoryGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectHistoryEdgeGenqlSelection{
    node?: ProjectHistoryGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An history associated with a project. */
export interface ProjectHistoryGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The events that happened while recording that history. */
    entries?: boolean | number
    /** The project that the history is associated with. */
    project?: ProjectGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectLabelConnectionGenqlSelection{
    edges?: ProjectLabelEdgeGenqlSelection
    nodes?: ProjectLabelGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectLabelEdgeGenqlSelection{
    node?: ProjectLabelGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectRelationConnectionGenqlSelection{
    edges?: ProjectRelationEdgeGenqlSelection
    nodes?: ProjectRelationGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectRelationEdgeGenqlSelection{
    node?: ProjectRelationGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A relation between two projects. */
export interface ProjectRelationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The relationship of the project with the related project. */
    type?: boolean | number
    /** The project whose relationship is being described. */
    project?: ProjectGenqlSelection
    /** The milestone within the project whose relationship is being described. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** The type of anchor on the project end of the relation. */
    anchorType?: boolean | number
    /** The related project. */
    relatedProject?: ProjectGenqlSelection
    /** The milestone within the related project whose relationship is being described. */
    relatedProjectMilestone?: ProjectMilestoneGenqlSelection
    /** The type of anchor on the relatedProject end of the relation. */
    relatedAnchorType?: boolean | number
    /** The last user who created or modified the relation. */
    user?: UserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerNeedConnectionGenqlSelection{
    edges?: CustomerNeedEdgeGenqlSelection
    nodes?: CustomerNeedGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerNeedEdgeGenqlSelection{
    node?: CustomerNeedGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A customer need, expressed through a reference to an issue, project, or comment. */
export interface CustomerNeedGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The customer that this need is attached to. */
    customer?: CustomerGenqlSelection
    /** The issue this need is referencing. */
    issue?: IssueGenqlSelection
    /** The project this need is referencing. */
    project?: ProjectGenqlSelection
    /** The comment this need is referencing. */
    comment?: CommentGenqlSelection
    /** The attachment this need is referencing. */
    attachment?: AttachmentGenqlSelection
    /** The project attachment this need is referencing. */
    projectAttachment?: ProjectAttachmentGenqlSelection
    /** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
    priority?: boolean | number
    /** The need content in markdown format. */
    body?: boolean | number
    /** [Internal] The content of the need as a Prosemirror document. */
    bodyData?: boolean | number
    /** The creator of the customer need. */
    creator?: UserGenqlSelection
    /** The issue this customer need was originally created on. Will be undefined if the customer need hasn't been moved. */
    originalIssue?: IssueGenqlSelection
    /** The URL of the underlying attachment, if any */
    url?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Issue attachment (e.g. support ticket, pull request). */
export interface AttachmentGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Content for the title line in the Linear attachment widget. */
    title?: boolean | number
    /** Content for the subtitle line in the Linear attachment widget. */
    subtitle?: boolean | number
    /** Location of the attachment which is also used as an identifier. */
    url?: boolean | number
    /** The creator of the attachment. */
    creator?: UserGenqlSelection
    /** The non-Linear user who created the attachment. */
    externalUserCreator?: ExternalUserGenqlSelection
    /** Custom metadata related to the attachment. */
    metadata?: boolean | number
    /** Information about the source which created the attachment. */
    source?: boolean | number
    /** An accessor helper to source.type, defines the source type of the attachment. */
    sourceType?: boolean | number
    /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
    groupBySource?: boolean | number
    /** The issue this attachment was originally created on. Will be undefined if the attachment hasn't been moved. */
    originalIssue?: IssueGenqlSelection
    /** The issue this attachment belongs to. */
    issue?: IssueGenqlSelection
    /** The body data of the attachment, if any. */
    bodyData?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Project attachment */
export interface ProjectAttachmentGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Title of the attachment. */
    title?: boolean | number
    /** Optional subtitle of the attachment */
    subtitle?: boolean | number
    /** URL of the attachment. */
    url?: boolean | number
    /** The creator of the attachment. */
    creator?: UserGenqlSelection
    /** Custom metadata related to the attachment. */
    metadata?: boolean | number
    /** Information about the external source which created the attachment. */
    source?: boolean | number
    /** An accessor helper to source.type, defines the source type of the attachment. */
    sourceType?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A meeting that can be attached to different entities. */
export interface MeetingGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The meeting title. */
    title?: boolean | number
    /** The location of the meeting. */
    location?: boolean | number
    /** The meeting link of the meeting. */
    meetingLink?: boolean | number
    /** Link to a recording of the meeting. */
    recordingLink?: boolean | number
    /** The icon of the meeting. */
    icon?: boolean | number
    /** The color of the icon. */
    color?: boolean | number
    /** The user who created the meeting. */
    creator?: UserGenqlSelection
    /** The user who last updated the meeting. */
    updatedBy?: UserGenqlSelection
    /** The project that the meeting is associated with. */
    project?: ProjectGenqlSelection
    /** [Internal] The initiative that the meeting is associated with. */
    initiative?: InitiativeGenqlSelection
    /** The time at which the meeting is set to start. */
    startsAt?: boolean | number
    /** The time at which the meeting is set to end. */
    endsAt?: boolean | number
    /** The time at which the meeting was hidden. Null if the entity has not been hidden. */
    hiddenAt?: boolean | number
    /** A flag that indicates whether the meeting is in the trash bin. */
    trashed?: boolean | number
    /** The order of the item in the resources list. */
    sortOrder?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueHistoryConnectionGenqlSelection{
    edges?: IssueHistoryEdgeGenqlSelection
    nodes?: IssueHistoryGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueHistoryEdgeGenqlSelection{
    node?: IssueHistoryGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A record of changes to an issue. */
export interface IssueHistoryGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The issue that was changed. */
    issue?: IssueGenqlSelection
    /** The id of user who made these changes. If null, possibly means that the change made by an integration. */
    actorId?: boolean | number
    /** Whether the issue's description was updated. */
    updatedDescription?: boolean | number
    /** What the title was changed from. */
    fromTitle?: boolean | number
    /** What the title was changed to. */
    toTitle?: boolean | number
    /** The id of user from whom the issue was re-assigned from. */
    fromAssigneeId?: boolean | number
    /** The id of user to whom the issue was assigned to. */
    toAssigneeId?: boolean | number
    /** What the priority was changed from. */
    fromPriority?: boolean | number
    /** What the priority was changed to. */
    toPriority?: boolean | number
    /** The id of team from which the issue was moved from. */
    fromTeamId?: boolean | number
    /** The id of team to which the issue was moved to. */
    toTeamId?: boolean | number
    /** The id of previous parent of the issue. */
    fromParentId?: boolean | number
    /** The id of new parent of the issue. */
    toParentId?: boolean | number
    /** The id of previous workflow state of the issue. */
    fromStateId?: boolean | number
    /** The id of new workflow state of the issue. */
    toStateId?: boolean | number
    /** The id of previous cycle of the issue. */
    fromCycleId?: boolean | number
    /** The id of new cycle of the issue. */
    toCycleId?: boolean | number
    /** The id of new project created from the issue. */
    toConvertedProjectId?: boolean | number
    /** The id of previous project of the issue. */
    fromProjectId?: boolean | number
    /** The id of new project of the issue. */
    toProjectId?: boolean | number
    /** What the estimate was changed from. */
    fromEstimate?: boolean | number
    /** What the estimate was changed to. */
    toEstimate?: boolean | number
    /** Whether the issue is archived at the time of this history entry. */
    archived?: boolean | number
    /** Whether the issue was trashed or un-trashed. */
    trashed?: boolean | number
    /** The id of linked attachment. */
    attachmentId?: boolean | number
    /** ID's of labels that were added. */
    addedLabelIds?: boolean | number
    /** ID's of labels that were removed. */
    removedLabelIds?: boolean | number
    /** Changed issue relationships. */
    relationChanges?: IssueRelationHistoryPayloadGenqlSelection
    /** Whether the issue was auto-closed. */
    autoClosed?: boolean | number
    /** Whether the issue was auto-archived. */
    autoArchived?: boolean | number
    /** What the due date was changed from. */
    fromDueDate?: boolean | number
    /** What the due date was changed to. */
    toDueDate?: boolean | number
    /** The id of linked customer need. */
    customerNeedId?: boolean | number
    /** [Internal] Serialized JSON representing changes for certain non-relational properties. */
    changes?: boolean | number
    /** The actor that performed the actions. This field may be empty in the case of integrations or automations. */
    actor?: UserGenqlSelection
    /**
     * @deprecated Use `actor` and `descriptionUpdatedBy` instead.
     * The actors that performed the actions. This field may be empty in the case of integrations or automations.
     */
    actors?: UserGenqlSelection
    /** The actors that edited the description of the issue, if any. */
    descriptionUpdatedBy?: UserGenqlSelection
    /** The user that was unassigned from the issue. */
    fromAssignee?: UserGenqlSelection
    /** The user that was assigned to the issue. */
    toAssignee?: UserGenqlSelection
    /** The cycle that the issue was moved from. */
    fromCycle?: CycleGenqlSelection
    /** The cycle that the issue was moved to. */
    toCycle?: CycleGenqlSelection
    /** The new project created from the issue. */
    toConvertedProject?: ProjectGenqlSelection
    /** The project that the issue was moved from. */
    fromProject?: ProjectGenqlSelection
    /** The project that the issue was moved to. */
    toProject?: ProjectGenqlSelection
    /** The state that the issue was moved from. */
    fromState?: WorkflowStateGenqlSelection
    /** The state that the issue was moved to. */
    toState?: WorkflowStateGenqlSelection
    /** The team that the issue was moved from. */
    fromTeam?: TeamGenqlSelection
    /** The team that the issue was moved to. */
    toTeam?: TeamGenqlSelection
    /** The parent issue that the issue was moved from. */
    fromParent?: IssueGenqlSelection
    /** The parent issue that the issue was moved to. */
    toParent?: IssueGenqlSelection
    /** The linked attachment. */
    attachment?: AttachmentGenqlSelection
    /** The import record. */
    issueImport?: IssueImportGenqlSelection
    /** The users that were notified of the issue. */
    triageResponsibilityNotifiedUsers?: UserGenqlSelection
    /** The bot that performed the action. */
    botActor?: ActorBotGenqlSelection
    /** The labels that were added to the issue. */
    addedLabels?: IssueLabelGenqlSelection
    /** The labels that were removed from the issue. */
    removedLabels?: IssueLabelGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Issue relation history's payload. */
export interface IssueRelationHistoryPayloadGenqlSelection{
    /** The identifier of the related issue. */
    identifier?: boolean | number
    /** The type of the change. */
    type?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An import job for data from an external service. */
export interface IssueImportGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** New team's name in cases when teamId not set. */
    teamName?: boolean | number
    /** The id for the user that started the job. */
    creatorId?: boolean | number
    /** The service from which data will be imported. */
    service?: boolean | number
    /** The status for the import job. */
    status?: boolean | number
    /** The data mapping configuration for the import job. */
    mapping?: boolean | number
    /** User readable error message, if one has occurred during the import. */
    error?: boolean | number
    /** Current step progress in % (0-100). */
    progress?: boolean | number
    /** File URL for the uploaded CSV for the import, if there is one. */
    csvFileUrl?: boolean | number
    /** Error code and metadata, if one has occurred during the import. */
    errorMetadata?: boolean | number
    /** Metadata related to import service. */
    serviceMetadata?: boolean | number
    /** The display name of the import service. */
    displayName?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueRelationConnectionGenqlSelection{
    edges?: IssueRelationEdgeGenqlSelection
    nodes?: IssueRelationGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueRelationEdgeGenqlSelection{
    node?: IssueRelationGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A relation between two issues. */
export interface IssueRelationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The relationship of the issue with the related issue. */
    type?: boolean | number
    /** The issue whose relationship is being described. */
    issue?: IssueGenqlSelection
    /** The related issue. */
    relatedIssue?: IssueGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AttachmentConnectionGenqlSelection{
    edges?: AttachmentEdgeGenqlSelection
    nodes?: AttachmentGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AttachmentEdgeGenqlSelection{
    node?: AttachmentGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSuggestionConnectionGenqlSelection{
    edges?: IssueSuggestionEdgeGenqlSelection
    nodes?: IssueSuggestionGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSuggestionEdgeGenqlSelection{
    node?: IssueSuggestionGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSuggestionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    issue?: IssueGenqlSelection
    issueId?: boolean | number
    type?: boolean | number
    state?: boolean | number
    stateChangedAt?: boolean | number
    metadata?: IssueSuggestionMetadataGenqlSelection
    suggestedIssue?: IssueGenqlSelection
    suggestedIssueId?: boolean | number
    suggestedTeam?: TeamGenqlSelection
    suggestedProject?: ProjectGenqlSelection
    suggestedUser?: UserGenqlSelection
    suggestedUserId?: boolean | number
    suggestedLabel?: IssueLabelGenqlSelection
    suggestedLabelId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSuggestionMetadataGenqlSelection{
    score?: boolean | number
    classification?: boolean | number
    reasons?: boolean | number
    evalLogId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CycleConnectionGenqlSelection{
    edges?: CycleEdgeGenqlSelection
    nodes?: CycleGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CycleEdgeGenqlSelection{
    node?: CycleGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Cycle filtering options. */
export interface CycleFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the cycle number. */
number?: (NumberComparator | null),
/** Comparator for the cycle name. */
name?: (StringComparator | null),
/** Comparator for the cycle start date. */
startsAt?: (DateComparator | null),
/** Comparator for the cycle ends at date. */
endsAt?: (DateComparator | null),
/** Comparator for the cycle completed at date. */
completedAt?: (DateComparator | null),
/** Comparator for the filtering active cycle. */
isActive?: (BooleanComparator | null),
/** Comparator for filtering for whether the cycle is currently in cooldown. */
isInCooldown?: (BooleanComparator | null),
/** Comparator for the filtering next cycle. */
isNext?: (BooleanComparator | null),
/** Comparator for the filtering previous cycle. */
isPrevious?: (BooleanComparator | null),
/** Comparator for the filtering future cycles. */
isFuture?: (BooleanComparator | null),
/** Comparator for the filtering past cycles. */
isPast?: (BooleanComparator | null),
/** Filters that the cycles team must satisfy. */
team?: (TeamFilter | null),
/** Filters that the cycles issues must satisfy. */
issues?: (IssueCollectionFilter | null),
/** Compound filters, all of which need to be matched by the cycle. */
and?: (CycleFilter[] | null),
/** Compound filters, one of which need to be matched by the cycle. */
or?: (CycleFilter[] | null)}


/** A team's triage responsibility. */
export interface TriageResponsibilityGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The action to take when an issue is added to triage. */
    action?: boolean | number
    /** Set of users used for triage responsibility. */
    manualSelection?: TriageResponsibilityManualSelectionGenqlSelection
    /** The team to which the triage responsibility belongs to. */
    team?: TeamGenqlSelection
    /** The time schedule used for scheduling. */
    timeSchedule?: TimeScheduleGenqlSelection
    /** The user currently responsible for triage. */
    currentUser?: UserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TriageResponsibilityManualSelectionGenqlSelection{
    /** The set of users responsible for triage. */
    userIds?: boolean | number
    /** [Internal] The index of the current userId used for the assign action when having more than one user. */
    assignmentIndex?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A time schedule. */
export interface TimeScheduleGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The name of the schedule. */
    name?: boolean | number
    /** The schedule entries. */
    entries?: TimeScheduleEntryGenqlSelection
    /** The identifier of the external schedule. */
    externalId?: boolean | number
    /** The URL to the external schedule. */
    externalUrl?: boolean | number
    /** The organization of the schedule. */
    organization?: OrganizationGenqlSelection
    /** The identifier of the Linear integration populating the schedule. */
    integration?: IntegrationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TimeScheduleEntryGenqlSelection{
    /** The start date of the schedule in ISO 8601 date-time format. */
    startsAt?: boolean | number
    /** The end date of the schedule in ISO 8601 date-time format. */
    endsAt?: boolean | number
    /** The Linear user id of the user on schedule. If the user cannot be mapped to a Linear user then `userEmail` can be used as a reference. */
    userId?: boolean | number
    /** The email, name or reference to the user on schedule. This is used in case the external user could not be mapped to a Linear user id. */
    userEmail?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Defines the membership of a user to a team. */
export interface TeamMembershipGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that the membership is associated with. */
    user?: UserGenqlSelection
    /** The team that the membership is associated with. */
    team?: TeamGenqlSelection
    /** Whether the user is the owner of the team. */
    owner?: boolean | number
    /** The order of the item in the users team list. */
    sortOrder?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamMembershipConnectionGenqlSelection{
    edges?: TeamMembershipEdgeGenqlSelection
    nodes?: TeamMembershipGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamMembershipEdgeGenqlSelection{
    node?: TeamMembershipGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WorkflowStateConnectionGenqlSelection{
    edges?: WorkflowStateEdgeGenqlSelection
    nodes?: WorkflowStateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WorkflowStateEdgeGenqlSelection{
    node?: WorkflowStateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitAutomationStateConnectionGenqlSelection{
    edges?: GitAutomationStateEdgeGenqlSelection
    nodes?: GitAutomationStateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitAutomationStateEdgeGenqlSelection{
    node?: GitAutomationStateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A trigger that updates the issue status according to Git automations. */
export interface GitAutomationStateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The associated workflow state. */
    state?: WorkflowStateGenqlSelection
    /** The team to which this automation state belongs. */
    team?: TeamGenqlSelection
    /** The target branch associated to this automation state. */
    targetBranch?: GitAutomationTargetBranchGenqlSelection
    /** The event that triggers the automation. */
    event?: boolean | number
    /**
     * @deprecated Use targetBranch instead.
     * [DEPRECATED] The target branch, if null, the automation will be triggered on any branch.
     */
    branchPattern?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A Git target branch for which there are automations (GitAutomationState). */
export interface GitAutomationTargetBranchGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The team to which this Git target branch automation belongs. */
    team?: TeamGenqlSelection
    /** The target branch pattern. */
    branchPattern?: boolean | number
    /** Whether the branch pattern is a regular expression. */
    isRegex?: boolean | number
    /** Automation states associated with the target branch. */
    automationStates?: (GitAutomationStateConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TemplateConnectionGenqlSelection{
    edges?: TemplateEdgeGenqlSelection
    nodes?: TemplateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TemplateEdgeGenqlSelection{
    node?: TemplateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WebhookConnectionGenqlSelection{
    edges?: WebhookEdgeGenqlSelection
    nodes?: WebhookGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WebhookEdgeGenqlSelection{
    node?: WebhookGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A webhook used to send HTTP notifications over data updates. */
export interface WebhookGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Webhook label. */
    label?: boolean | number
    /** Webhook URL. */
    url?: boolean | number
    /** Whether the Webhook is enabled. */
    enabled?: boolean | number
    /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization or multiple teams. */
    team?: TeamGenqlSelection
    /** [INTERNAL] The teams that the webhook is associated with. Used to represent a webhook that targets multiple teams, potentially in addition to all public teams of the organization. */
    teamIds?: boolean | number
    /** Whether the Webhook is enabled for all public teams, including teams created after the webhook was created. */
    allPublicTeams?: boolean | number
    /** The user who created the webhook. */
    creator?: UserGenqlSelection
    /** Secret token for verifying the origin on the recipient side. */
    secret?: boolean | number
    /** The resource types this webhook is subscribed to. */
    resourceTypes?: boolean | number
    /** [INTERNAL] Webhook failure events associated with the webhook (last 50). */
    failures?: WebhookFailureEventGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Entity representing a webhook execution failure. */
export interface WebhookFailureEventGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /** The webhook that this failure event is associated with. */
    webhook?: WebhookGenqlSelection
    /** The URL that the webhook was trying to push to. */
    url?: boolean | number
    /** The HTTP status code returned by the recipient. */
    httpStatus?: boolean | number
    /** The HTTP response body returned by the recipient or error occured. */
    responseOrError?: boolean | number
    /** The unique execution ID of the webhook push. This is retained between retries of the same push. */
    executionId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationIpRestrictionGenqlSelection{
    /** IP range in CIDR format. */
    range?: boolean | number
    /** Restriction type. */
    type?: boolean | number
    /** Optional restriction description. */
    description?: boolean | number
    /** Whether the restriction is enabled. */
    enabled?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationConnectionGenqlSelection{
    edges?: IntegrationEdgeGenqlSelection
    nodes?: IntegrationGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationEdgeGenqlSelection{
    node?: IntegrationGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The paid subscription of an organization. */
export interface PaidSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The subscription type. */
    type?: boolean | number
    /** The number of seats in the subscription. */
    seats?: boolean | number
    /** The minimum number of seats that will be billed in the subscription. */
    seatsMinimum?: boolean | number
    /** The maximum number of seats that will be billed in the subscription. */
    seatsMaximum?: boolean | number
    /** The creator of the subscription. */
    creator?: UserGenqlSelection
    /** The organization that the subscription is associated with. */
    organization?: OrganizationGenqlSelection
    /** The collection method for this subscription, either automatically charged or invoiced. */
    collectionMethod?: boolean | number
    /** The date the subscription was canceled, if any. */
    canceledAt?: boolean | number
    /** The date the subscription is scheduled to be canceled, if any. */
    cancelAt?: boolean | number
    /** The subscription type of a pending change. Null if no change pending. */
    pendingChangeType?: boolean | number
    /** The date the subscription will be billed next. */
    nextBillingAt?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueDraftConnectionGenqlSelection{
    edges?: IssueDraftEdgeGenqlSelection
    nodes?: IssueDraftGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueDraftEdgeGenqlSelection{
    node?: IssueDraftGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A draft issue. */
export interface IssueDraftGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The draft's title. */
    title?: boolean | number
    /** The draft's description in markdown format. */
    description?: boolean | number
    /** The priority of the draft. */
    priority?: boolean | number
    /** The estimate of the complexity of the draft. */
    estimate?: boolean | number
    /** The date at which the issue would be due. */
    dueDate?: boolean | number
    /** The IDs of labels added to the draft. */
    labelIds?: boolean | number
    /** The team associated with the draft. */
    teamId?: boolean | number
    /** The cycle associated with the draft. */
    cycleId?: boolean | number
    /** The project associated with the draft. */
    projectId?: boolean | number
    /** The project milestone associated with the draft. */
    projectMilestoneId?: boolean | number
    /** The user who created the draft. */
    creator?: UserGenqlSelection
    /** The user assigned to the draft. */
    assigneeId?: boolean | number
    /** The workflow state associated with the draft. */
    stateId?: boolean | number
    /** The parent draft of the draft. */
    parent?: IssueDraftGenqlSelection
    /** The ID of the parent issue draft, if any. */
    parentId?: boolean | number
    /** The ID of the comment that the draft was created from. */
    sourceCommentId?: boolean | number
    /** The parent issue of the draft. */
    parentIssue?: IssueGenqlSelection
    /** The ID of the parent issue, if any. */
    parentIssueId?: boolean | number
    /** The order of items in the sub-draft list. Only set if the draft has `parent` set. */
    subIssueSortOrder?: boolean | number
    /** Label for the priority. */
    priorityLabel?: boolean | number
    /** [Internal] The draft's description as a Prosemirror document. */
    descriptionData?: boolean | number
    /** Serialized array of JSONs representing attachments. */
    attachments?: boolean | number
    /** Serialized array of JSONs representing customer needs. */
    needs?: boolean | number
    /** Serialized array of JSONs representing the recurring issue's schedule. */
    schedule?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DraftConnectionGenqlSelection{
    edges?: DraftEdgeGenqlSelection
    nodes?: DraftGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DraftEdgeGenqlSelection{
    node?: DraftGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A general purpose draft. Used for comments, project updates, etc. */
export interface DraftGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The text content as a Prosemirror document. */
    bodyData?: boolean | number
    /** Additional properties for the draft. */
    data?: boolean | number
    /** Whether the draft was autogenerated for the user. */
    isAutogenerated?: boolean | number
    /** [INTERNAL] Whether the draft was ported from a local draft. */
    wasLocalDraft?: boolean | number
    /** The user who created the draft. */
    user?: UserGenqlSelection
    /** The issue for which this is a draft comment. */
    issue?: IssueGenqlSelection
    /** The project for which this is a draft project update. */
    project?: ProjectGenqlSelection
    /** The project update for which this is a draft comment. */
    projectUpdate?: ProjectUpdateGenqlSelection
    /** The initiative for which this is a draft initiative update. */
    initiative?: InitiativeGenqlSelection
    /** The initiative update for which this is a draft comment. */
    initiativeUpdate?: InitiativeUpdateGenqlSelection
    /** The post for which this is a draft comment. */
    post?: PostGenqlSelection
    /** The comment for which this is a draft comment reply. */
    parentComment?: CommentGenqlSelection
    /** The customer need that this draft is referencing. */
    customerNeed?: CustomerNeedGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A custom view notification subscription. */
export interface CustomViewNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The custom view subscribed to. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A cycle notification subscription. */
export interface CycleNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The cycle subscribed to. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A label notification subscription. */
export interface LabelNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The label subscribed to. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A project notification subscription. */
export interface ProjectNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The project subscribed to. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An initiative notification subscription. */
export interface InitiativeNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The initiative subscribed to. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A team notification subscription. */
export interface TeamNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team subscribed to. */
    team?: TeamGenqlSelection
    /** The user view associated with the notification subscription. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user notification subscription. */
export interface UserNotificationSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that subscribed to receive notifications. */
    subscriber?: UserGenqlSelection
    /** The customer associated with the notification subscription. */
    customer?: CustomerGenqlSelection
    /** The contextual custom view associated with the notification subscription. */
    customView?: CustomViewGenqlSelection
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: CycleGenqlSelection
    /** The contextual label view associated with the notification subscription. */
    label?: IssueLabelGenqlSelection
    /** The contextual project view associated with the notification subscription. */
    project?: ProjectGenqlSelection
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: InitiativeGenqlSelection
    /** The team associated with the notification subscription. */
    team?: TeamGenqlSelection
    /** The user subscribed to. */
    user?: UserGenqlSelection
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: boolean | number
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: boolean | number
    /** Whether the subscription is active or not. */
    active?: boolean | number
    /** The type of subscription. */
    notificationSubscriptionTypes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An issue related notification. */
export interface IssueNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related issue ID. */
    issueId?: boolean | number
    /** The issue related to the notification. */
    issue?: IssueGenqlSelection
    /** The comment related to the notification. */
    comment?: CommentGenqlSelection
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment?: CommentGenqlSelection
    /** The team related to the issue notification. */
    team?: TeamGenqlSelection
    /** The subscriptions related to the notification. */
    subscriptions?: NotificationSubscriptionGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A notification sent to a user. */
export interface NotificationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    on_IssueNotification?: IssueNotificationGenqlSelection
    on_ProjectNotification?: ProjectNotificationGenqlSelection
    on_InitiativeNotification?: InitiativeNotificationGenqlSelection
    on_OauthClientApprovalNotification?: OauthClientApprovalNotificationGenqlSelection
    on_DocumentNotification?: DocumentNotificationGenqlSelection
    on_PostNotification?: PostNotificationGenqlSelection
    on_CustomerNeedNotification?: CustomerNeedNotificationGenqlSelection
    on_PullRequestNotification?: PullRequestNotificationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A project related notification. */
export interface ProjectNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related project ID. */
    projectId?: boolean | number
    /** Related project milestone ID. */
    projectMilestoneId?: boolean | number
    /** Related project update ID. */
    projectUpdateId?: boolean | number
    /** The project related to the notification. */
    project?: ProjectGenqlSelection
    /** The initiative related to the notification. */
    initiative?: InitiativeGenqlSelection
    /** The document related to the notification. */
    document?: DocumentGenqlSelection
    /** The project update related to the notification. */
    projectUpdate?: ProjectUpdateGenqlSelection
    /** The initiative update related to the notification. */
    initiativeUpdate?: InitiativeUpdateGenqlSelection
    /** The comment related to the notification. */
    comment?: CommentGenqlSelection
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment?: CommentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An initiative related notification. */
export interface InitiativeNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related initiative ID. */
    initiativeId?: boolean | number
    /** Related initiative update ID. */
    initiativeUpdateId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An oauth client approval related notification. */
export interface OauthClientApprovalNotificationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related OAuth client approval request ID. */
    oauthClientApprovalId?: boolean | number
    /** The OAuth client approval request related to the notification. */
    oauthClientApproval?: OauthClientApprovalGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Request to install OAuth clients on organizations and the response to the request. */
export interface OauthClientApprovalGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The uuid of the OAuth client being requested for installation. */
    oauthClientId?: boolean | number
    /** The person who requested installing the OAuth client. */
    requesterId?: boolean | number
    /** The person who responded to the request to install the OAuth client. */
    responderId?: boolean | number
    /** The status for the OAuth client approval request. */
    status?: boolean | number
    /** The scopes the app has requested. */
    scopes?: boolean | number
    /** The reason the person wants to install this OAuth client. */
    requestReason?: boolean | number
    /** The reason the request for the OAuth client approval was denied. */
    denyReason?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A document related notification. */
export interface DocumentNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related document ID. */
    documentId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A post related notification. */
export interface PostNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related post ID. */
    postId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A customer need related notification. */
export interface CustomerNeedNotificationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related customer need. */
    customerNeedId?: boolean | number
    /** The issue related to the notification. */
    relatedIssue?: IssueGenqlSelection
    /** The project related to the notification. */
    relatedProject?: ProjectGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A pull request related notification. */
export interface PullRequestNotificationGenqlSelection{
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: boolean | number
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: boolean | number
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: boolean | number
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Notification type. */
    type?: boolean | number
    /** The user that caused the notification. */
    actor?: UserGenqlSelection
    /** The external user that caused the notification. */
    externalUserActor?: ExternalUserGenqlSelection
    /** The user that received the notification. */
    user?: UserGenqlSelection
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: boolean | number
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: boolean | number
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: boolean | number
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: boolean | number
    /** [Internal] URL to the target of the notification. */
    url?: boolean | number
    /** [Internal] Inbox URL for the notification. */
    inboxUrl?: boolean | number
    /** [Internal] Notification title. */
    title?: boolean | number
    /** [Internal] Notification subtitle. */
    subtitle?: boolean | number
    /** [Internal] If notification actor was Linear. */
    isLinearActor?: boolean | number
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: boolean | number
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor?: boolean | number
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: boolean | number
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: boolean | number
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey?: boolean | number
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority?: boolean | number
    /** The bot that caused the notification. */
    botActor?: ActorBotGenqlSelection
    /** Related pull request. */
    pullRequestId?: boolean | number
    /** The pull request related to the notification. */
    pullRequest?: PullRequestGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [Internal] A pull request in a version control system. */
export interface PullRequestGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The title of the pull request. */
    title?: boolean | number
    /** The number of the pull request in the version control system. */
    number?: boolean | number
    /** The source branch of the pull request. */
    sourceBranch?: boolean | number
    /** The target branch of the pull request. */
    targetBranch?: boolean | number
    /** The URL of the pull request in the version control system. */
    url?: boolean | number
    /** The status of the pull request. */
    status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface QueryGenqlSelection{
    /** All issue workflow states. */
    workflowStates?: (WorkflowStateConnectionGenqlSelection & { __args: {
    /** Filter returned workflow states. */
    filter?: (WorkflowStateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific state. */
    workflowState?: (WorkflowStateGenqlSelection & { __args: {id: Scalars['String']} })
    /** All webhooks. */
    webhooks?: (WebhookConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific webhook. */
    webhook?: (WebhookGenqlSelection & { __args: {
    /** The identifier of the webhook to retrieve. */
    id: Scalars['String']} })
    /** [INTERNAL] Webhook failure events for webhooks that belong to an OAuth application. (last 50) */
    failuresForOauthWebhooks?: (WebhookFailureEventGenqlSelection & { __args: {
    /** The identifier of the OAuth client to retrieve failures for. */
    oauthClientId: Scalars['String']} })
    /** The user's settings. */
    userSettings?: UserSettingsGenqlSelection
    /** All users for the organization. */
    users?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned users. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific user. */
    user?: (UserGenqlSelection & { __args: {
    /** The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query. */
    id: Scalars['String']} })
    /** The currently authenticated user. */
    viewer?: UserGenqlSelection
    /** All triage responsibilities. */
    triageResponsibilities?: (TriageResponsibilityConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific triage responsibility. */
    triageResponsibility?: (TriageResponsibilityGenqlSelection & { __args: {
    /** The identifier of the triage responsibility to retrieve. */
    id: Scalars['String']} })
    /** All time schedules. */
    timeSchedules?: (TimeScheduleConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific time schedule. */
    timeSchedule?: (TimeScheduleGenqlSelection & { __args: {
    /** The identifier of the time schedule to retrieve. */
    id: Scalars['String']} })
    /** All templates from all users. */
    templates?: TemplateGenqlSelection
    /** A specific template. */
    template?: (TemplateGenqlSelection & { __args: {
    /** The identifier of the template to retrieve. */
    id: Scalars['String']} })
    /** Returns all templates that are associated with the integration type. */
    templatesForIntegration?: (TemplateGenqlSelection & { __args: {
    /** The type of integration for which to return associated templates. */
    integrationType: Scalars['String']} })
    /** All projects. */
    projects?: (ProjectConnectionGenqlSelection & { __args: {
    /** Filter returned projects. */
    filter?: (ProjectFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned projects. */
    sort?: (ProjectSortInput[] | null)} })
    /** One specific project. */
    project?: (ProjectGenqlSelection & { __args: {id: Scalars['String']} })
    /** Suggests filters for a project view based on a text prompt. */
    projectFilterSuggestion?: (ProjectFilterSuggestionPayloadGenqlSelection & { __args: {prompt: Scalars['String']} })
    /** All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user. */
    teams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to. */
    administrableTeams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific team. */
    team?: (TeamGenqlSelection & { __args: {id: Scalars['String']} })
    /** All team memberships. */
    teamMemberships?: (TeamMembershipConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific team membership. */
    teamMembership?: (TeamMembershipGenqlSelection & { __args: {id: Scalars['String']} })
    /** [ALPHA] Search for various resources using natural language. */
    semanticSearch?: (SemanticSearchPayloadGenqlSelection & { __args: {
    /** Search query to look for. */
    query: Scalars['String'], 
    /** The types of results to return (default: all). */
    types?: (SemanticSearchResultType[] | null), 
    /** The maximum number of results to return (default: 10). */
    maxResults?: (Scalars['Int'] | null), 
    /** Whether to include archived results in the search (default: false). */
    includeArchived?: (Scalars['Boolean'] | null)} })
    /** Search documents. */
    searchDocuments?: (DocumentSearchPayloadGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** Search string to look for. */
    term: Scalars['String'], 
    /** Should associated comments be searched (default: false). */
    includeComments?: (Scalars['Boolean'] | null), 
    /** UUID of a team to use as a boost. */
    teamId?: (Scalars['String'] | null)} })
    /** Search projects. */
    searchProjects?: (ProjectSearchPayloadGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** Search string to look for. */
    term: Scalars['String'], 
    /** Should associated comments be searched (default: false). */
    includeComments?: (Scalars['Boolean'] | null), 
    /** UUID of a team to use as a boost. */
    teamId?: (Scalars['String'] | null)} })
    /** Search issues. */
    searchIssues?: (IssueSearchPayloadGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** Search string to look for. */
    term: Scalars['String'], 
    /** Should associated comments be searched (default: false). */
    includeComments?: (Scalars['Boolean'] | null), 
    /** UUID of a team to use as a boost. */
    teamId?: (Scalars['String'] | null)} })
    /** Custom views for the user. */
    roadmapToProjects?: (RoadmapToProjectConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific roadmapToProject. */
    roadmapToProject?: (RoadmapToProjectGenqlSelection & { __args: {id: Scalars['String']} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * All roadmaps in the workspace.
     */
    roadmaps?: (RoadmapConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * One specific roadmap.
     */
    roadmap?: (RoadmapGenqlSelection & { __args: {id: Scalars['String']} })
    /** The status of the rate limiter. */
    rateLimitStatus?: RateLimitPayloadGenqlSelection
    /** Sends a test push message. */
    pushSubscriptionTest?: (PushSubscriptionTestPayloadGenqlSelection & { __args?: {
    /** Whether to send to mobile devices. */
    targetMobile?: (Scalars['Boolean'] | null), 
    /** The send strategy to use. */
    sendStrategy?: (SendStrategy | null)} })
    /** All project updates. */
    projectUpdates?: (ProjectUpdateConnectionGenqlSelection & { __args: {
    /** Filter returned project updates. */
    filter?: (ProjectUpdateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific project update. */
    projectUpdate?: (ProjectUpdateGenqlSelection & { __args: {
    /** The identifier of the project update to retrieve. */
    id: Scalars['String']} })
    /** [Internal] AI summary of the latest project updates for the given projects */
    summarizeProjectUpdates?: (SummaryPayloadGenqlSelection & { __args: {
    /** The identifiers of the projects to summarize. */
    ids: Scalars['String'][]} })
    /** All project statuses. */
    projectStatuses?: (ProjectStatusConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [INTERNAL] Count of projects using this project status across the organization. */
    projectStatusProjectCount?: (ProjectStatusCountPayloadGenqlSelection & { __args: {
    /** The identifier of the project status to find the project count for. */
    id: Scalars['String']} })
    /** One specific project status. */
    projectStatus?: (ProjectStatusGenqlSelection & { __args: {id: Scalars['String']} })
    /** All project relationships. */
    projectRelations?: (ProjectRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific project relation. */
    projectRelation?: (ProjectRelationGenqlSelection & { __args: {id: Scalars['String']} })
    /** All milestones for the project. */
    projectMilestones?: (ProjectMilestoneConnectionGenqlSelection & { __args: {
    /** Filter returned project milestones. */
    filter?: (ProjectMilestoneFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific project milestone. */
    projectMilestone?: (ProjectMilestoneGenqlSelection & { __args: {id: Scalars['String']} })
    /** The user's organization. */
    organization?: OrganizationGenqlSelection
    /** Does the organization exist. */
    organizationExists?: (OrganizationExistsPayloadGenqlSelection & { __args: {urlKey: Scalars['String']} })
    /** [Internal] All archived teams of the organization. */
    archivedTeams?: TeamGenqlSelection
    /** [INTERNAL] Get organization metadata by urlKey or organization id. */
    organizationMeta?: (OrganizationMetaGenqlSelection & { __args: {urlKey: Scalars['String']} })
    /** All invites for the organization. */
    organizationInvites?: (OrganizationInviteConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific organization invite. */
    organizationInvite?: (OrganizationInviteGenqlSelection & { __args: {id: Scalars['String']} })
    /** One specific organization invite. */
    organizationInviteDetails?: (OrganizationInviteDetailsPayloadGenqlSelection & { __args: {id: Scalars['String']} })
    /** [INTERNAL] Checks whether the domain can be claimed. */
    organizationDomainClaimRequest?: (OrganizationDomainClaimPayloadGenqlSelection & { __args: {
    /** The ID of the organization domain to claim. */
    id: Scalars['String']} })
    /** The user's notification subscriptions. */
    notificationSubscriptions?: (NotificationSubscriptionConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific notification subscription. */
    notificationSubscription?: (NotificationSubscriptionGenqlSelection & { __args: {id: Scalars['String']} })
    /** All notifications. */
    notifications?: (NotificationConnectionGenqlSelection & { __args: {
    /** Filters returned notifications. */
    filter?: (NotificationFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] A number of unread notifications. */
    notificationsUnreadCount?: boolean | number
    /** One specific notification. */
    notification?: (NotificationGenqlSelection & { __args: {id: Scalars['String']} })
    /** All issues. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** [INTERNAL] Sort returned issues. */
    sort?: (IssueSortInput[] | null)} })
    /** One specific issue. */
    issue?: (IssueGenqlSelection & { __args: {id: Scalars['String']} })
    /** [DEPRECATED] Search issues. This endpoint is deprecated and will be removed in the future – use `searchIssues` instead. */
    issueSearch?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** [Deprecated] Search string to look for. */
    query?: (Scalars['String'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Find issue based on the VCS branch name. */
    issueVcsBranchSearch?: (IssueGenqlSelection & { __args: {
    /** The VCS branch name to search for. */
    branchName: Scalars['String']} })
    /** Find issues that are related to a given Figma file key. */
    issueFigmaFileKeySearch?: (IssueConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** The Figma file key. */
    fileKey: Scalars['String']} })
    /** Issue priority values and corresponding labels. */
    issuePriorityValues?: IssuePriorityValueGenqlSelection
    /** Suggests filters for an issue view based on a text prompt. */
    issueFilterSuggestion?: (IssueFilterSuggestionPayloadGenqlSelection & { __args: {
    /** The ID of the project if filtering a project view */
    projectId?: (Scalars['String'] | null), prompt: Scalars['String']} })
    /** All issue relationships. */
    issueRelations?: (IssueRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific issue relation. */
    issueRelation?: (IssueRelationGenqlSelection & { __args: {id: Scalars['String']} })
    /** All issue labels. */
    issueLabels?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific label. */
    issueLabel?: (IssueLabelGenqlSelection & { __args: {id: Scalars['String']} })
    /** Checks a CSV file validity against a specific import service. */
    issueImportCheckCSV?: (IssueImportCheckPayloadGenqlSelection & { __args: {
    /** CSV storage url. */
    csvUrl: Scalars['String'], 
    /** The service the CSV containing data from. */
    service: Scalars['String']} })
    /** Checks whether it will be possible to setup sync for this project or repository at the end of import */
    issueImportCheckSync?: (IssueImportSyncCheckPayloadGenqlSelection & { __args: {
    /** The ID of the issue import for which to check sync eligibility */
    issueImportId: Scalars['String']} })
    /** Checks whether a custom JQL query is valid and can be used to filter issues of a Jira import */
    issueImportJqlCheck?: (IssueImportJqlCheckPayloadGenqlSelection & { __args: {
    /** Jira installation or cloud hostname. */
    jiraHostname: Scalars['String'], 
    /** Jira personal access token to access Jira REST API. */
    jiraToken: Scalars['String'], 
    /** Jira user account email. */
    jiraEmail: Scalars['String'], 
    /** Jira project key to use as the base filter of the query. */
    jiraProject: Scalars['String'], 
    /** The JQL query to validate. */
    jql: Scalars['String']} })
    /** One specific set of settings. */
    integrationsSettings?: (IntegrationsSettingsGenqlSelection & { __args: {id: Scalars['String']} })
    /** Template and integration connections. */
    integrationTemplates?: (IntegrationTemplateConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific integrationTemplate. */
    integrationTemplate?: (IntegrationTemplateGenqlSelection & { __args: {id: Scalars['String']} })
    /** All integrations. */
    integrations?: (IntegrationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific integration. */
    integration?: (IntegrationGenqlSelection & { __args: {id: Scalars['String']} })
    /** Verify that we received the correct response from the GitHub Enterprise Server. */
    verifyGitHubEnterpriseServerInstallation?: GitHubEnterpriseServerInstallVerificationPayloadGenqlSelection
    /** Checks if the integration has all required scopes. */
    integrationHasScopes?: (IntegrationHasScopesPayloadGenqlSelection & { __args: {
    /** Required scopes. */
    scopes: Scalars['String'][], 
    /** The integration ID. */
    integrationId: Scalars['String']} })
    /** All  InitiativeUpdates. */
    initiativeUpdates?: (InitiativeUpdateConnectionGenqlSelection & { __args: {
    /** Filter returned initiative updates. */
    filter?: (InitiativeUpdateFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific  initiative update. */
    initiativeUpdate?: (InitiativeUpdateGenqlSelection & { __args: {
    /** The identifier of the  initiative update to retrieve. */
    id: Scalars['String']} })
    /** returns a list of initiative to project entities. */
    initiativeToProjects?: (InitiativeToProjectConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific initiativeToProject. */
    initiativeToProject?: (InitiativeToProjectGenqlSelection & { __args: {id: Scalars['String']} })
    /** All initiatives in the workspace. */
    initiatives?: (InitiativeConnectionGenqlSelection & { __args: {
    /** Filter returned initiatives. */
    filter?: (InitiativeFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific initiative. */
    initiative?: (InitiativeGenqlSelection & { __args: {id: Scalars['String']} })
    /** All initiative relationships. */
    initiativeRelations?: (InitiativeRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific initiative relation. */
    initiativeRelation?: (ProjectRelationGenqlSelection & { __args: {id: Scalars['String']} })
    /** The user's favorites. */
    favorites?: (FavoriteConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific favorite. */
    favorite?: (FavoriteGenqlSelection & { __args: {id: Scalars['String']} })
    /** All external users for the organization. */
    externalUsers?: (ExternalUserConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific external user. */
    externalUser?: (ExternalUserGenqlSelection & { __args: {
    /** The identifier of the external user to retrieve. */
    id: Scalars['String']} })
    /** One specific entity link. */
    entityExternalLink?: (EntityExternalLinkGenqlSelection & { __args: {id: Scalars['String']} })
    /** All custom emojis. */
    emojis?: (EmojiConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific emoji. */
    emoji?: (EmojiGenqlSelection & { __args: {
    /** The identifier or the name of the emoji to retrieve. */
    id: Scalars['String']} })
    /** All documents in the workspace. */
    documents?: (DocumentConnectionGenqlSelection & { __args: {
    /** Filter returned documents. */
    filter?: (DocumentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific document. */
    document?: (DocumentGenqlSelection & { __args: {id: Scalars['String']} })
    /** A collection of document content history entries. */
    documentContentHistory?: (DocumentContentHistoryPayloadGenqlSelection & { __args: {id: Scalars['String']} })
    /** All cycles. */
    cycles?: (CycleConnectionGenqlSelection & { __args: {
    /** Filter returned users. */
    filter?: (CycleFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific cycle. */
    cycle?: (CycleGenqlSelection & { __args: {id: Scalars['String']} })
    /** All customer tiers. */
    customerTiers?: (CustomerTierConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific customer tier. */
    customerTier?: (CustomerTierGenqlSelection & { __args: {id: Scalars['String']} })
    /** All customer statuses. */
    customerStatuses?: (CustomerStatusConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific customer status. */
    customerStatus?: (CustomerStatusGenqlSelection & { __args: {id: Scalars['String']} })
    /** All customers. */
    customers?: (CustomerConnectionGenqlSelection & { __args: {
    /** Filter returned customers. */
    filter?: (CustomerFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** Sort returned customers. */
    sorts?: (CustomerSortInput[] | null)} })
    /** One specific customer. */
    customer?: (CustomerGenqlSelection & { __args: {id: Scalars['String']} })
    /** All customer needs. */
    customerNeeds?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned customers needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific customer need */
    customerNeed?: (CustomerNeedGenqlSelection & { __args?: {
    /** The identifier of the need to retrieve. */
    id?: (Scalars['String'] | null), 
    /** The hash of the need to retrieve. */
    hash?: (Scalars['String'] | null)} })
    /** Suggests issue title based on a customer request. */
    issueTitleSuggestionFromCustomerRequest?: (IssueTitleSuggestionFromCustomerRequestPayloadGenqlSelection & { __args: {request: Scalars['String']} })
    /** Custom views for the user. */
    customViews?: (CustomViewConnectionGenqlSelection & { __args: {
    /** Filter returned custom views. */
    filter?: (CustomViewFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** One specific custom view. */
    customView?: (CustomViewGenqlSelection & { __args: {id: Scalars['String']} })
    /** [INTERNAL] Suggests metadata for a view based on it's filters. */
    customViewDetailsSuggestion?: (CustomViewSuggestionPayloadGenqlSelection & { __args: {modelName?: (Scalars['String'] | null), filter: Scalars['JSONObject']} })
    /** Whether a custom view has other subscribers than the current user in the organization. */
    customViewHasSubscribers?: (CustomViewHasSubscribersPayloadGenqlSelection & { __args: {
    /** The identifier of the custom view. */
    id: Scalars['String']} })
    /** All comments. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific comment. */
    comment?: (CommentGenqlSelection & { __args?: {
    /** The identifier of the comment to retrieve. */
    id?: (Scalars['String'] | null), 
    /** The hash of the comment to retrieve. */
    hash?: (Scalars['String'] | null)} })
    /** Fetch users belonging to this user account. */
    availableUsers?: AuthResolverResponseGenqlSelection
    /** User's active sessions. */
    authenticationSessions?: AuthenticationSessionResponseGenqlSelection
    /** Fetch SSO login URL for the email provided. */
    ssoUrlFromEmail?: (SsoUrlFromEmailResponseGenqlSelection & { __args: {
    /** Whether the client is the desktop app. */
    isDesktop?: (Scalars['Boolean'] | null), 
    /** Email to query the SSO login URL by. */
    email: Scalars['String']} })
    /** List of audit entry types. */
    auditEntryTypes?: AuditEntryTypeGenqlSelection
    /** All audit log entries. */
    auditEntries?: (AuditEntryConnectionGenqlSelection & { __args: {
    /** Filter returned audit entries. */
    filter?: (AuditEntryFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /**
     * All issue attachments.
     * 
     * To get attachments for a given URL, use `attachmentsForURL` query.
     */
    attachments?: (AttachmentConnectionGenqlSelection & { __args: {
    /** Filter returned attachments. */
    filter?: (AttachmentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /**
     * 
     * One specific issue attachment.
     * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
     */
    attachment?: (AttachmentGenqlSelection & { __args: {id: Scalars['String']} })
    /** Returns issue attachments for a given `url`. */
    attachmentsForURL?: (AttachmentConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null), 
    /** The attachment URL. */
    url: Scalars['String']} })
    /**
     * @deprecated Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead.
     * 
     * Query an issue by its associated attachment, and its id.
     * 
     */
    attachmentIssue?: (IssueGenqlSelection & { __args: {
    /** `id` of the attachment for which you'll want to get the issue for. [Deprecated] `url` as the `id` parameter. */
    id: Scalars['String']} })
    /** [Internal] Get a list of all unique attachment sources in the workspace. */
    attachmentSources?: (AttachmentSourcesPayloadGenqlSelection & { __args?: {
    /** (optional) if provided will only return attachment sources for the given team. */
    teamId?: (Scalars['String'] | null)} })
    /** Get basic information for an application. */
    applicationInfo?: (ApplicationGenqlSelection & { __args: {
    /** The client ID of the application. */
    clientId: Scalars['String']} })
    /** [INTERNAL] Get basic information for a list of applications. */
    applicationInfoByIds?: (ApplicationGenqlSelection & { __args: {
    /** The IDs of the applications. */
    ids: Scalars['String'][]} })
    /**
     * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
     * [DEPRECATED] [INTERNAL] Get information for a list of applications with memberships
     */
    applicationInfoWithMembershipsByIds?: (WorkspaceAuthorizedApplicationGenqlSelection & { __args: {
    /** The client IDs to look up. */
    clientIds: Scalars['String'][]} })
    /** Get information for an application and whether a user has approved it for the given scopes. */
    applicationWithAuthorization?: (UserAuthorizedApplicationGenqlSelection & { __args: {
    /** Redirect URI for the application. */
    redirectUri?: (Scalars['String'] | null), 
    /** Actor mode used for the authorization. */
    actor?: (Scalars['String'] | null), 
    /** Scopes being requested by the application. */
    scope: Scalars['String'][], 
    /** The client ID of the application. */
    clientId: Scalars['String']} })
    /** [INTERNAL] Get all authorized applications for a user. */
    authorizedApplications?: AuthorizedApplicationGenqlSelection
    /**
     * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
     * [DEPRECATED] [INTERNAL] Get non-internal authorized applications (with limited fields) for a workspace
     */
    workspaceAuthorizedApplications?: WorkspaceAuthorizedApplicationGenqlSelection
    /** [INTERNAL] Get non-internal authorized applications for a workspace, including each application's app user. */
    workspaceAuthorizedApplicationsWithAppUser?: (WorkspaceAuthorizedApplicationWithAppUserGenqlSelection & { __args?: {
    /** Client IDs of specific applications to return. If not provided, all workspace-authorized applications will be returned. */
    clientIds?: (Scalars['String'][] | null)} })
    /** [INTERNAL] Get a specific non-internal authorized application (with limited fields) for a workspace */
    workspaceAuthorizedApplication?: (WorkspaceAuthorizedApplicationWithMembershipsGenqlSelection & { __args: {
    /** The client ID of the application. */
    clientId: Scalars['String']} })
    /** All API keys for the user. */
    apiKeys?: (ApiKeyConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** All agent contexts. */
    agentContexts?: (AgentContextConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific agent context. */
    agentContext?: (AgentContextGenqlSelection & { __args: {
    /** The identifier of the agent context to retrieve. */
    id: Scalars['String']} })
    /** All agent activities. */
    agentActivities?: (AgentActivityConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** A specific agent activity. */
    agentActivity?: (AgentActivityGenqlSelection & { __args: {
    /** The identifier of the agent activity to retrieve. */
    id: Scalars['String']} })
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The settings of a user as a JSON object. */
export interface UserSettingsGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The notification delivery preferences for the user. Note: notificationDisabled field is deprecated in favor of notificationChannelPreferences. */
    notificationDeliveryPreferences?: NotificationDeliveryPreferencesGenqlSelection
    /**
     * @deprecated Use individual subscription fields instead. This field's value is now outdated.
     * The email types the user has unsubscribed from.
     */
    unsubscribedFrom?: boolean | number
    /** The user associated with these settings. */
    user?: UserGenqlSelection
    /** Hash for the user to be used in calendar URLs. */
    calendarHash?: boolean | number
    /** Whether this user is subscribed to changelog email or not. */
    subscribedToChangelog?: boolean | number
    /** Whether this user is subscribed to DPA emails or not. */
    subscribedToDPA?: boolean | number
    /** Whether this user is subscribed to invite accepted emails or not. */
    subscribedToInviteAccepted?: boolean | number
    /** Whether this user is subscribed to privacy and legal update emails or not. */
    subscribedToPrivacyLegalUpdates?: boolean | number
    /** Whether to show full user names instead of display names. */
    showFullUserNames?: boolean | number
    /** Whether to auto-assign newly created issues to the current user by default. */
    autoAssignToSelf?: boolean | number
    /** The user's notification category preferences. */
    notificationCategoryPreferences?: NotificationCategoryPreferencesGenqlSelection
    /** The user's notification channel preferences. */
    notificationChannelPreferences?: NotificationChannelPreferencesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification delivery preferences. */
export interface NotificationDeliveryPreferencesGenqlSelection{
    /** The delivery preferences for the mobile channel. */
    mobile?: NotificationDeliveryPreferencesChannelGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification delivery preferences. */
export interface NotificationDeliveryPreferencesChannelGenqlSelection{
    /**
     * @deprecated This field has been replaced by notificationChannelPreferences
     * [DEPRECATED] Whether notifications are enabled for this channel. Use notificationChannelPreferences instead.
     */
    notificationsDisabled?: boolean | number
    /** The schedule for notifications on this channel. */
    schedule?: NotificationDeliveryPreferencesScheduleGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification delivery schedule for a particular day. */
export interface NotificationDeliveryPreferencesScheduleGenqlSelection{
    /** Whether the schedule is disabled. */
    disabled?: boolean | number
    /** Delivery preferences for Sunday. */
    sunday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Monday. */
    monday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Tuesday. */
    tuesday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Wednesday. */
    wednesday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Thursday. */
    thursday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Friday. */
    friday?: NotificationDeliveryPreferencesDayGenqlSelection
    /** Delivery preferences for Saturday. */
    saturday?: NotificationDeliveryPreferencesDayGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification delivery schedule for a particular day. */
export interface NotificationDeliveryPreferencesDayGenqlSelection{
    /** The time notifications start. */
    start?: boolean | number
    /** The time notifications end. */
    end?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification category preferences. */
export interface NotificationCategoryPreferencesGenqlSelection{
    /** The preferences for notifications about assignments. */
    assignments?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about status changes. */
    statusChanges?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about comments and replies. */
    commentsAndReplies?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about mentions. */
    mentions?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about reactions. */
    reactions?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about subscriptions. */
    subscriptions?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about document changes. */
    documentChanges?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about posts and updates. */
    postsAndUpdates?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about reminders. */
    reminders?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about reviews. */
    reviews?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for notifications about apps and integrations. */
    appsAndIntegrations?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for system notifications. */
    system?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for triage notifications. */
    triage?: NotificationChannelPreferencesGenqlSelection
    /** The preferences for customer notifications. */
    customers?: NotificationChannelPreferencesGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's notification channel preferences, indicating if a channel is enabled or not */
export interface NotificationChannelPreferencesGenqlSelection{
    /** Whether notifications are currently enabled for mobile. */
    mobile?: boolean | number
    /** Whether notifications are currently enabled for desktop. */
    desktop?: boolean | number
    /** Whether notifications are currently enabled for email. */
    email?: boolean | number
    /** Whether notifications are currently enabled for Slack. */
    slack?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TriageResponsibilityConnectionGenqlSelection{
    edges?: TriageResponsibilityEdgeGenqlSelection
    nodes?: TriageResponsibilityGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TriageResponsibilityEdgeGenqlSelection{
    node?: TriageResponsibilityGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TimeScheduleConnectionGenqlSelection{
    edges?: TimeScheduleEdgeGenqlSelection
    nodes?: TimeScheduleGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TimeScheduleEdgeGenqlSelection{
    node?: TimeScheduleGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectFilterSuggestionPayloadGenqlSelection{
    /** The json filter that is suggested. */
    filter?: boolean | number
    /** The log id of the prompt, that created this filter. */
    logId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [ALPHA] Payload returned by semantic search. */
export interface SemanticSearchPayloadGenqlSelection{
    enabled?: boolean | number
    results?: SemanticSearchResultGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [ALPHA] A semantic search result reference. */
export interface SemanticSearchResultGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The type of the semantic search result. */
    type?: boolean | number
    /** The issue related to the semantic search result. */
    issue?: IssueGenqlSelection
    /** The project related to the semantic search result. */
    project?: ProjectGenqlSelection
    /** The initiative related to the semantic search result. */
    initiative?: InitiativeGenqlSelection
    /** The document related to the semantic search result. */
    document?: DocumentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentSearchPayloadGenqlSelection{
    edges?: DocumentSearchResultEdgeGenqlSelection
    nodes?: DocumentSearchResultGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload?: ArchiveResponseGenqlSelection
    /** Total number of results for query without filters applied. */
    totalCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentSearchResultEdgeGenqlSelection{
    node?: DocumentSearchResultGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentSearchResultGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The document title. */
    title?: boolean | number
    /** The icon of the document. */
    icon?: boolean | number
    /** The color of the icon. */
    color?: boolean | number
    /** The user who created the document. */
    creator?: UserGenqlSelection
    /** The user who last updated the document. */
    updatedBy?: UserGenqlSelection
    /** The project that the document is associated with. */
    project?: ProjectGenqlSelection
    /** The initiative that the document is associated with. */
    initiative?: InitiativeGenqlSelection
    /** [Internal] The team that the document is associated with. */
    team?: TeamGenqlSelection
    /** The document's unique URL slug. */
    slugId?: boolean | number
    /** The last template that was applied to this document. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The time at which the document was hidden. Null if the entity has not been hidden. */
    hiddenAt?: boolean | number
    /** A flag that indicates whether the document is in the trash bin. */
    trashed?: boolean | number
    /** The order of the item in the resources list. */
    sortOrder?: boolean | number
    /** Comments associated with the document. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The documents content in markdown format. */
    content?: boolean | number
    /** [Internal] The documents content as YJS state. */
    contentState?: boolean | number
    /** The ID of the document content associated with the document. */
    documentContentId?: boolean | number
    /** The canonical url for the document. */
    url?: boolean | number
    /** Metadata related to search result. */
    metadata?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Contains requested archived model objects. */
export interface ArchiveResponseGenqlSelection{
    /** A JSON serialized collection of model objects loaded from the archive */
    archive?: boolean | number
    /** The total number of entities in the archive. */
    totalCount?: boolean | number
    /** The version of the remote database. Incremented by 1 for each migration run on the database. */
    databaseVersion?: boolean | number
    /** Whether the dependencies for the model objects are included in the archive. */
    includesDependencies?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectSearchPayloadGenqlSelection{
    edges?: ProjectSearchResultEdgeGenqlSelection
    nodes?: ProjectSearchResultGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload?: ArchiveResponseGenqlSelection
    /** Total number of results for query without filters applied. */
    totalCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectSearchResultEdgeGenqlSelection{
    node?: ProjectSearchResultGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectSearchResultGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequencyInWeeks?: boolean | number
    /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
    updateReminderFrequency?: boolean | number
    /** The resolution of the reminder frequency. */
    frequencyResolution?: boolean | number
    /** The day at which to prompt for updates. */
    updateRemindersDay?: boolean | number
    /** The hour at which to prompt for updates. */
    updateRemindersHour?: boolean | number
    /** The project's name. */
    name?: boolean | number
    /** The project's description. */
    description?: boolean | number
    /** The content of the project description. */
    documentContent?: DocumentContentGenqlSelection
    /** The project's unique URL slug. */
    slugId?: boolean | number
    /** The icon of the project. */
    icon?: boolean | number
    /** The project's color. */
    color?: boolean | number
    /** The status that the project is associated with. */
    status?: ProjectStatusGenqlSelection
    /** The user who created the project. */
    creator?: UserGenqlSelection
    /** The project lead. */
    lead?: UserGenqlSelection
    /** [Internal] Facets associated with the project. */
    facets?: FacetGenqlSelection
    /** The time until which project update reminders are paused. */
    projectUpdateRemindersPausedUntilAt?: boolean | number
    /** The estimated start date of the project. */
    startDate?: boolean | number
    /** The resolution of the project's start date. */
    startDateResolution?: boolean | number
    /** The estimated completion date of the project. */
    targetDate?: boolean | number
    /** The resolution of the project's estimated completion date. */
    targetDateResolution?: boolean | number
    /** The time at which the project was moved into started state. */
    startedAt?: boolean | number
    /** The time at which the project was moved into completed state. */
    completedAt?: boolean | number
    /** The time at which the project was moved into canceled state. */
    canceledAt?: boolean | number
    /** The time at which the project was automatically archived by the auto pruning process. */
    autoArchivedAt?: boolean | number
    /** A flag that indicates whether the project is in the trash bin. */
    trashed?: boolean | number
    /** The sort order for the project within the organization. */
    sortOrder?: boolean | number
    /** The sort order for the project within the organization, when ordered by priority. */
    prioritySortOrder?: boolean | number
    /** The project was created based on this issue. */
    convertedFromIssue?: IssueGenqlSelection
    /** The last template that was applied to this project. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority?: boolean | number
    /** The last project update posted for this project. */
    lastUpdate?: ProjectUpdateGenqlSelection
    /** The health of the project. */
    health?: boolean | number
    /** The time at which the project health was updated. */
    healthUpdatedAt?: boolean | number
    /** The total number of issues in the project after each week. */
    issueCountHistory?: boolean | number
    /** The number of completed issues in the project after each week. */
    completedIssueCountHistory?: boolean | number
    /** The total number of estimation points after each week. */
    scopeHistory?: boolean | number
    /** The number of completed estimation points after each week. */
    completedScopeHistory?: boolean | number
    /** The number of in progress estimation points after each week. */
    inProgressScopeHistory?: boolean | number
    /** [INTERNAL] The progress history of the project. */
    progressHistory?: boolean | number
    /** [INTERNAL] The current progress of the project. */
    currentProgress?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue notifications to Slack.
     */
    slackNewIssue?: boolean | number
    /**
     * @deprecated No longer in use
     * Whether to send new issue comment notifications to Slack.
     */
    slackIssueComments?: boolean | number
    /**
     * @deprecated No longer is use
     * Whether to send new issue status updates to Slack.
     */
    slackIssueStatuses?: boolean | number
    /** Id of the labels associated with this project. */
    labelIds?: boolean | number
    /** The user's favorite associated with this project. */
    favorite?: FavoriteGenqlSelection
    /** Project URL. */
    url?: boolean | number
    /** Initiatives that this project belongs to. */
    initiatives?: (InitiativeConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Teams associated with this project. */
    teams?: (TeamConnectionGenqlSelection & { __args: {
    /** Filter returned teams. */
    filter?: (TeamFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Users that are members of the project. */
    members?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned users. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Project updates associated with the project. */
    projectUpdates?: (ProjectUpdateConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Documents associated with the project. */
    documents?: (DocumentConnectionGenqlSelection & { __args: {
    /** Filter returned documents. */
    filter?: (DocumentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Milestones associated with the project. */
    projectMilestones?: (ProjectMilestoneConnectionGenqlSelection & { __args: {
    /** Filter returned milestones. */
    filter?: (ProjectMilestoneFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Issues associated with the project. */
    issues?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** External links associated with the project. */
    externalLinks?: (EntityExternalLinkConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** History entries associated with the project. */
    history?: (ProjectHistoryConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] Labels associated with this project. */
    labels?: (ProjectLabelConnectionGenqlSelection & { __args: {
    /** Filter returned project labels. */
    filter?: (ProjectLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
    progress?: boolean | number
    /** The overall scope (total estimate points) of the project. */
    scope?: boolean | number
    /** Settings for all integrations associated with that project. */
    integrationsSettings?: IntegrationsSettingsGenqlSelection
    /** The project's content in markdown format. */
    content?: boolean | number
    /** [Internal] The project's content as YJS state. */
    contentState?: boolean | number
    /** Comments associated with the project overview. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Relations associated with this project. */
    relations?: (ProjectRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Inverse relations associated with this project. */
    inverseRelations?: (ProjectRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Customer needs associated with the project. */
    needs?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /**
     * @deprecated Use project.status instead
     * [DEPRECATED] The type of the state.
     */
    state?: boolean | number
    /** The priority of the project as a label. */
    priorityLabel?: boolean | number
    /** Metadata related to search result. */
    metadata?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSearchPayloadGenqlSelection{
    edges?: IssueSearchResultEdgeGenqlSelection
    nodes?: IssueSearchResultGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    /** Archived entities matching the search term along with all their dependencies. */
    archivePayload?: ArchiveResponseGenqlSelection
    /** Total number of results for query without filters applied. */
    totalCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSearchResultEdgeGenqlSelection{
    node?: IssueSearchResultGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueSearchResultGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The issue's unique number. */
    number?: boolean | number
    /** The issue's title. */
    title?: boolean | number
    /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
    priority?: boolean | number
    /** The estimate of the complexity of the issue.. */
    estimate?: boolean | number
    /**
     * @deprecated Will be removed in near future, please use `sortOrder` instead
     * The order of the item in its column on the board.
     */
    boardOrder?: boolean | number
    /** The order of the item in relation to other items in the organization. */
    sortOrder?: boolean | number
    /** The order of the item in relation to other items in the organization, when ordered by priority. */
    prioritySortOrder?: boolean | number
    /** The time at which the issue was moved into started state. */
    startedAt?: boolean | number
    /** The time at which the issue was moved into completed state. */
    completedAt?: boolean | number
    /** The time at which the issue entered triage. */
    startedTriageAt?: boolean | number
    /** The time at which the issue left triage. */
    triagedAt?: boolean | number
    /** The time at which the issue was moved into canceled state. */
    canceledAt?: boolean | number
    /** The time at which the issue was automatically closed by the auto pruning process. */
    autoClosedAt?: boolean | number
    /** The time at which the issue was automatically archived by the auto pruning process. */
    autoArchivedAt?: boolean | number
    /** The date at which the issue is due. */
    dueDate?: boolean | number
    /** The time at which the issue's SLA began. */
    slaStartedAt?: boolean | number
    /** The time at which the issue's SLA will enter medium risk state. */
    slaMediumRiskAt?: boolean | number
    /** The time at which the issue's SLA will enter high risk state. */
    slaHighRiskAt?: boolean | number
    /** The time at which the issue's SLA will breach. */
    slaBreachesAt?: boolean | number
    /** The type of SLA set on the issue. Calendar days or business days. */
    slaType?: boolean | number
    /** The time at which the issue was added to a project. */
    addedToProjectAt?: boolean | number
    /** The time at which the issue was added to a cycle. */
    addedToCycleAt?: boolean | number
    /** The time at which the issue was added to a team. */
    addedToTeamAt?: boolean | number
    /** A flag that indicates whether the issue is in the trash bin. */
    trashed?: boolean | number
    /** The time until an issue will be snoozed in Triage view. */
    snoozedUntilAt?: boolean | number
    /** [Internal] The time at which the most recent suggestions for this issue were generated. */
    suggestionsGeneratedAt?: boolean | number
    /** [Internal] The activity summary information for this issue. */
    activitySummary?: boolean | number
    /** [ALPHA] The document content representing this issue description. */
    documentContent?: DocumentContentGenqlSelection
    /** Id of the labels associated with this issue. */
    labelIds?: boolean | number
    /** The team that the issue is associated with. */
    team?: TeamGenqlSelection
    /** The cycle that the issue is associated with. */
    cycle?: CycleGenqlSelection
    /** The project that the issue is associated with. */
    project?: ProjectGenqlSelection
    /** The projectMilestone that the issue is associated with. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** The last template that was applied to this issue. */
    lastAppliedTemplate?: TemplateGenqlSelection
    /** The recurring issue template that created this issue. */
    recurringIssueTemplate?: TemplateGenqlSelection
    /** Previous identifiers of the issue if it has been moved between teams. */
    previousIdentifiers?: boolean | number
    /** The user who created the issue. */
    creator?: UserGenqlSelection
    /** The external user who created the issue. */
    externalUserCreator?: ExternalUserGenqlSelection
    /** The user to whom the issue is assigned to. */
    assignee?: UserGenqlSelection
    /** The user who has delegated this issue to be completed by an agent. */
    supervisor?: UserGenqlSelection
    /** The user who snoozed the issue. */
    snoozedBy?: UserGenqlSelection
    /** The workflow state that the issue is associated with. */
    state?: WorkflowStateGenqlSelection
    /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
    subIssueSortOrder?: boolean | number
    /** Emoji reaction summary, grouped by emoji type. */
    reactionData?: boolean | number
    /** Label for the priority. */
    priorityLabel?: boolean | number
    /** The comment that this issue was created from. */
    sourceComment?: CommentGenqlSelection
    /** Integration type that created this issue, if applicable. */
    integrationSourceType?: boolean | number
    /** The bot that created the issue, if applicable. */
    botActor?: ActorBotGenqlSelection
    /** The users favorite associated with this issue. */
    favorite?: FavoriteGenqlSelection
    /** Issue's human readable identifier (e.g. ENG-123). */
    identifier?: boolean | number
    /** Issue URL. */
    url?: boolean | number
    /** Suggested branch name for the issue. */
    branchName?: boolean | number
    /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
    customerTicketCount?: boolean | number
    /** Users who are subscribed to the issue. */
    subscribers?: (UserConnectionGenqlSelection & { __args: {
    /** Filter returned subscribers. */
    filter?: (UserFilter | null), 
    /** Should query return disabled/suspended users (default: false). */
    includeDisabled?: (Scalars['Boolean'] | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The parent of the issue. */
    parent?: IssueGenqlSelection
    /** Children of the issue. */
    children?: (IssueConnectionGenqlSelection & { __args: {
    /** Filter returned issues. */
    filter?: (IssueFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Comments associated with the issue. */
    comments?: (CommentConnectionGenqlSelection & { __args: {
    /** Filter returned comments. */
    filter?: (CommentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** History entries associated with the issue. */
    history?: (IssueHistoryConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Labels associated with this issue. */
    labels?: (IssueLabelConnectionGenqlSelection & { __args: {
    /** Filter returned issue labels. */
    filter?: (IssueLabelFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Relations associated with this issue. */
    relations?: (IssueRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Inverse relations associated with this issue. */
    inverseRelations?: (IssueRelationConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Attachments associated with the issue. */
    attachments?: (AttachmentConnectionGenqlSelection & { __args: {
    /** Filter returned attachments. */
    filter?: (AttachmentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Attachments previously associated with the issue before being moved to another issue. */
    formerAttachments?: (AttachmentConnectionGenqlSelection & { __args: {
    /** Filter returned attachments. */
    filter?: (AttachmentFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The issue's description in markdown format. */
    description?: boolean | number
    /** [Internal] The issue's description content as YJS state. */
    descriptionState?: boolean | number
    /** Reactions associated with the issue. */
    reactions?: ReactionGenqlSelection
    /** Customer needs associated with the issue. */
    needs?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Customer needs previously associated with the issue before being moved to another issue. */
    formerNeeds?: (CustomerNeedConnectionGenqlSelection & { __args: {
    /** Filter returned needs. */
    filter?: (CustomerNeedFilter | null), 
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** The external services the issue is synced with. */
    syncedWith?: ExternalEntityInfoGenqlSelection
    /** [Internal] Product intelligence suggestions for the issue. */
    suggestions?: (IssueSuggestionConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** [Internal] Incoming product intelligence relation suggestions for the issue. */
    incomingSuggestions?: (IssueSuggestionConnectionGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** Metadata related to search result. */
    metadata?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapToProjectConnectionGenqlSelection{
    edges?: RoadmapToProjectEdgeGenqlSelection
    nodes?: RoadmapToProjectGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapToProjectEdgeGenqlSelection{
    node?: RoadmapToProjectGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Join table between projects and roadmaps. */
export interface RoadmapToProjectGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The project that the roadmap is associated with. */
    project?: ProjectGenqlSelection
    /** The roadmap that the project is associated with. */
    roadmap?: RoadmapGenqlSelection
    /** The sort order of the project within the roadmap. */
    sortOrder?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapConnectionGenqlSelection{
    edges?: RoadmapEdgeGenqlSelection
    nodes?: RoadmapGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapEdgeGenqlSelection{
    node?: RoadmapGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RateLimitPayloadGenqlSelection{
    /** The identifier we rate limit on. */
    identifier?: boolean | number
    /** The kind of rate limit selected for this request. */
    kind?: boolean | number
    /** The state of the rate limit. */
    limits?: RateLimitResultPayloadGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RateLimitResultPayloadGenqlSelection{
    /** What is being rate limited. */
    type?: boolean | number
    /** The requested quantity for this type of limit. */
    requestedAmount?: boolean | number
    /** The total allowed quantity for this type of limit. */
    allowedAmount?: boolean | number
    /** The period in which the rate limit is fully replenished in ms. */
    period?: boolean | number
    /** The remaining quantity for this type of limit after this request. */
    remainingAmount?: boolean | number
    /** The timestamp after the rate limit is fully replenished as a UNIX timestamp. */
    reset?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface PushSubscriptionTestPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Options for filtering project updates. */
export interface ProjectUpdateFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Filters that the project update creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the project update project must satisfy. */
project?: (ProjectFilter | null),
/** Filters that the project updates reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Compound filters, all of which need to be matched by the ProjectUpdate. */
and?: (ProjectUpdateFilter[] | null),
/** Compound filters, one of which need to be matched by the ProjectUpdate. */
or?: (ProjectUpdateFilter[] | null)}

export interface SummaryPayloadGenqlSelection{
    /** Summary for project updates. */
    summary?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectStatusConnectionGenqlSelection{
    edges?: ProjectStatusEdgeGenqlSelection
    nodes?: ProjectStatusGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectStatusEdgeGenqlSelection{
    node?: ProjectStatusGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectStatusCountPayloadGenqlSelection{
    /** Total number of projects using this project status. */
    count?: boolean | number
    /** Total number of projects using this project status that are not visible to the user because they are in a private team. */
    privateCount?: boolean | number
    /** Total number of projects using this project status that are not visible to the user because they are in an archived team. */
    archivedTeamCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationExistsPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    /** Whether the organization exists. */
    exists?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationMetaGenqlSelection{
    /** The region the organization is hosted in. */
    region?: boolean | number
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationInviteConnectionGenqlSelection{
    edges?: OrganizationInviteEdgeGenqlSelection
    nodes?: OrganizationInviteGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationInviteEdgeGenqlSelection{
    node?: OrganizationInviteGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An invitation to the organization that has been sent via email. */
export interface OrganizationInviteGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The invitees email address. */
    email?: boolean | number
    /** The user role that the invitee will receive upon accepting the invite. */
    role?: boolean | number
    /** The invite was sent to external address. */
    external?: boolean | number
    /** The time at which the invite was accepted. Null, if the invite hasn't been accepted. */
    acceptedAt?: boolean | number
    /** The time at which the invite will be expiring. Null, if the invite shouldn't expire. */
    expiresAt?: boolean | number
    /** Extra metadata associated with the organization invite. */
    metadata?: boolean | number
    /** The user who created the invitation. */
    inviter?: UserGenqlSelection
    /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
    invitee?: UserGenqlSelection
    /** The organization that the invite is associated with. */
    organization?: OrganizationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationInviteDetailsPayloadGenqlSelection{
    on_OrganizationInviteFullDetailsPayload?:OrganizationInviteFullDetailsPayloadGenqlSelection,
    on_OrganizationAcceptedOrExpiredInviteDetailsPayload?:OrganizationAcceptedOrExpiredInviteDetailsPayloadGenqlSelection,
    __typename?: boolean | number
}

export interface OrganizationInviteFullDetailsPayloadGenqlSelection{
    /** The status of the invite. */
    status?: boolean | number
    /** The name of the inviter. */
    inviter?: boolean | number
    /** The email of the invitee. */
    email?: boolean | number
    /** What user role the invite should grant. */
    role?: boolean | number
    /** When the invite was created. */
    createdAt?: boolean | number
    /** Name of the workspace the invite is for. */
    organizationName?: boolean | number
    /** ID of the workspace the invite is for. */
    organizationId?: boolean | number
    /** URL of the workspace logo the invite is for. */
    organizationLogoUrl?: boolean | number
    /** Whether the invite has already been accepted. */
    accepted?: boolean | number
    /** Whether the invite has expired. */
    expired?: boolean | number
    /** Allowed authentication providers, empty array means all are allowed. */
    allowedAuthServices?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationAcceptedOrExpiredInviteDetailsPayloadGenqlSelection{
    /** The status of the invite. */
    status?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Domain claim request response. */
export interface OrganizationDomainClaimPayloadGenqlSelection{
    /** String to put into DNS for verification. */
    verificationString?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationSubscriptionConnectionGenqlSelection{
    edges?: NotificationSubscriptionEdgeGenqlSelection
    nodes?: NotificationSubscriptionGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationSubscriptionEdgeGenqlSelection{
    node?: NotificationSubscriptionGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationConnectionGenqlSelection{
    edges?: NotificationEdgeGenqlSelection
    nodes?: NotificationGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationEdgeGenqlSelection{
    node?: NotificationGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Notification filtering options. */
export interface NotificationFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the notification type. */
type?: (StringComparator | null),
/** Comparator for the archived at date. */
archivedAt?: (DateComparator | null),
/** Compound filters, all of which need to be matched by the notification. */
and?: (NotificationFilter[] | null),
/** Compound filters, one of which need to be matched by the notification. */
or?: (NotificationFilter[] | null)}

export interface IssuePriorityValueGenqlSelection{
    /** Priority's number value. */
    priority?: boolean | number
    /** Priority's label. */
    label?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueFilterSuggestionPayloadGenqlSelection{
    /** The json filter that is suggested. */
    filter?: boolean | number
    /** The log id of the prompt, that created this filter. */
    logId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueImportCheckPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Whether an issue import can be synced at the end of an import or not */
export interface IssueImportSyncCheckPayloadGenqlSelection{
    /** Returns true if the import can be synced, false otherwise */
    canSync?: boolean | number
    /** An error message with a root cause of why the import cannot be synced */
    error?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Whether a custom JQL query is valid or not */
export interface IssueImportJqlCheckPayloadGenqlSelection{
    /** Returns true if the JQL query has been validated successfully, false otherwise */
    success?: boolean | number
    /** Returns an approximate number of issues matching the JQL query, if available */
    count?: boolean | number
    /** An error message returned by Jira when validating the JQL query. */
    error?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationTemplateConnectionGenqlSelection{
    edges?: IntegrationTemplateEdgeGenqlSelection
    nodes?: IntegrationTemplateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationTemplateEdgeGenqlSelection{
    node?: IntegrationTemplateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Join table between templates and integrations. */
export interface IntegrationTemplateGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The template that the integration is associated with. */
    template?: TemplateGenqlSelection
    /** The integration that the template is associated with. */
    integration?: IntegrationGenqlSelection
    /** ID of the foreign entity in the external integration this template is for, e.g., Slack channel ID. */
    foreignEntityId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitHubEnterpriseServerInstallVerificationPayloadGenqlSelection{
    /** Has the install been successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationHasScopesPayloadGenqlSelection{
    /** Whether the integration has the required scopes. */
    hasAllScopes?: boolean | number
    /** The missing scopes. */
    missingScopes?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeUpdateConnectionGenqlSelection{
    edges?: InitiativeUpdateEdgeGenqlSelection
    nodes?: InitiativeUpdateGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeUpdateEdgeGenqlSelection{
    node?: InitiativeUpdateGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Options for filtering initiative updates. */
export interface InitiativeUpdateFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Filters that the initiative update creator must satisfy. */
user?: (UserFilter | null),
/** Filters that the initiative update initiative must satisfy. */
initiative?: (InitiativeFilter | null),
/** Filters that the initiative updates reactions must satisfy. */
reactions?: (ReactionCollectionFilter | null),
/** Compound filters, all of which need to be matched by the InitiativeUpdate. */
and?: (InitiativeUpdateFilter[] | null),
/** Compound filters, one of which need to be matched by the InitiativeUpdate. */
or?: (InitiativeUpdateFilter[] | null)}

export interface InitiativeToProjectConnectionGenqlSelection{
    edges?: InitiativeToProjectEdgeGenqlSelection
    nodes?: InitiativeToProjectGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeToProjectEdgeGenqlSelection{
    node?: InitiativeToProjectGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Join table between projects and initiatives. */
export interface InitiativeToProjectGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The project that the initiative is associated with. */
    project?: ProjectGenqlSelection
    /** The initiative that the project is associated with. */
    initiative?: InitiativeGenqlSelection
    /** The sort order of the project within the initiative. */
    sortOrder?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeRelationConnectionGenqlSelection{
    edges?: InitiativeRelationEdgeGenqlSelection
    nodes?: InitiativeRelationGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeRelationEdgeGenqlSelection{
    node?: InitiativeRelationGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A relation representing the dependency between two initiatives. */
export interface InitiativeRelationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The parent initiative. */
    initiative?: InitiativeGenqlSelection
    /** The child initiative. */
    relatedInitiative?: InitiativeGenqlSelection
    /** The last user who created or modified the relation. */
    user?: UserGenqlSelection
    /** The sort order of the relation within the initiative. */
    sortOrder?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ExternalUserConnectionGenqlSelection{
    edges?: ExternalUserEdgeGenqlSelection
    nodes?: ExternalUserGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ExternalUserEdgeGenqlSelection{
    node?: ExternalUserGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmojiConnectionGenqlSelection{
    edges?: EmojiEdgeGenqlSelection
    nodes?: EmojiGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmojiEdgeGenqlSelection{
    node?: EmojiGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A custom emoji. */
export interface EmojiGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The emoji's name. */
    name?: boolean | number
    /** The emoji image URL. */
    url?: boolean | number
    /** The source of the emoji. */
    source?: boolean | number
    /** The user who created the emoji. */
    creator?: UserGenqlSelection
    /** The organization that the emoji belongs to. */
    organization?: OrganizationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentContentHistoryPayloadGenqlSelection{
    /** The document content history entries. */
    history?: DocumentContentHistoryTypeGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentContentHistoryTypeGenqlSelection{
    /** The UUID of the document content history entry. */
    id?: boolean | number
    /** The date when the document content history entry was created. */
    createdAt?: boolean | number
    /** The date when the document content history snapshot was taken. This can be different than createdAt since the content is captured from its state at the previously known updatedAt timestamp in the case of an update. On document create, these timestamps can be the same. */
    contentDataSnapshotAt?: boolean | number
    /** [Internal] The document content as Prosemirror document. */
    contentData?: boolean | number
    /** The ID of the author of the change. */
    actorIds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerTierConnectionGenqlSelection{
    edges?: CustomerTierEdgeGenqlSelection
    nodes?: CustomerTierGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerTierEdgeGenqlSelection{
    node?: CustomerTierGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerStatusConnectionGenqlSelection{
    edges?: CustomerStatusEdgeGenqlSelection
    nodes?: CustomerStatusGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerStatusEdgeGenqlSelection{
    node?: CustomerStatusGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerConnectionGenqlSelection{
    edges?: CustomerEdgeGenqlSelection
    nodes?: CustomerGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerEdgeGenqlSelection{
    node?: CustomerGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Customer filtering options. */
export interface CustomerFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the customer name. */
name?: (StringComparator | null),
/** Comparator for the customer slack channel ID. */
slackChannelId?: (StringComparator | null),
/** Comparator for the customer's domains. */
domains?: (StringArrayComparator | null),
/** Comparator for the customer's external IDs. */
externalIds?: (StringArrayComparator | null),
/** Filters that the customer owner must satisfy. */
owner?: (NullableUserFilter | null),
/** Filters that the customer's needs must satisfy. */
needs?: (CustomerNeedCollectionFilter | null),
/** Comparator for the customer generated revenue. */
revenue?: (NumberComparator | null),
/** Comparator for the customer size. */
size?: (NumberComparator | null),
/** Filters that the customer's status must satisfy. */
status?: (CustomerStatusFilter | null),
/** Filters that the customer's tier must satisfy. */
tier?: (CustomerTierFilter | null),
/** Compound filters, all of which need to be matched by the customer. */
and?: (CustomerFilter[] | null),
/** Compound filters, one of which need to be matched by the customer. */
or?: (CustomerFilter[] | null)}


/** Customer sorting options. */
export interface CustomerSortInput {
/** Sort by name */
name?: (NameSort | null),
/** Sort by customer creation date */
createdAt?: (CustomerCreatedAtSort | null),
/** Sort by owner name */
owner?: (OwnerSort | null),
/** Sort by customer status */
status?: (CustomerStatusSort | null),
/** Sort by customer generated revenue */
revenue?: (RevenueSort | null),
/** Sort by customer size */
size?: (SizeSort | null),
/** Sort by customer tier */
tier?: (TierSort | null),
/** Sort by approximate customer need count */
approximateNeedCount?: (ApproximateNeedCountSort | null)}


/** Customer name sorting options. */
export interface NameSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer creation date sorting options. */
export interface CustomerCreatedAtSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer owner sorting options. */
export interface OwnerSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer status sorting options. */
export interface CustomerStatusSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer revenue sorting options. */
export interface RevenueSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer size sorting options. */
export interface SizeSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer tier sorting options. */
export interface TierSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}


/** Customer approximate need count sorting options. */
export interface ApproximateNeedCountSort {
/** Whether nulls should be sorted first or last */
nulls?: (PaginationNulls | null),
/** The order for the individual sort */
order?: (PaginationSortOrder | null)}

export interface IssueTitleSuggestionFromCustomerRequestPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The suggested issue title. */
    title?: boolean | number
    /** [Internal] The log id of the ai response. */
    logId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomViewConnectionGenqlSelection{
    edges?: CustomViewEdgeGenqlSelection
    nodes?: CustomViewGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomViewEdgeGenqlSelection{
    node?: CustomViewGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Custom view filtering options. */
export interface CustomViewFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the custom view name. */
name?: (StringComparator | null),
/** Comparator for the custom view model name. */
modelName?: (StringComparator | null),
/** Filters that the custom view's team must satisfy. */
team?: (NullableTeamFilter | null),
/** Filters that the custom view creator must satisfy. */
creator?: (UserFilter | null),
/** Comparator for whether the custom view is shared. */
shared?: (BooleanComparator | null),
/** [INTERNAL] Filter based on whether the custom view has a facet. */
hasFacet?: (Scalars['Boolean'] | null),
/** Compound filters, all of which need to be matched by the custom view. */
and?: (CustomViewFilter[] | null),
/** Compound filters, one of which need to be matched by the custom view. */
or?: (CustomViewFilter[] | null)}

export interface CustomViewSuggestionPayloadGenqlSelection{
    /** The suggested view name. */
    name?: boolean | number
    /** The suggested view description. */
    description?: boolean | number
    /** The suggested view icon. */
    icon?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomViewHasSubscribersPayloadGenqlSelection{
    /** Whether the custom view has subscribers. */
    hasSubscribers?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AuthResolverResponseGenqlSelection{
    /** User account ID. */
    id?: boolean | number
    /** Email for the authenticated account. */
    email?: boolean | number
    /** Should the signup flow allow access for the domain. */
    allowDomainAccess?: boolean | number
    /** List of active users that belong to the user account. */
    users?: AuthUserGenqlSelection
    /** List of locked users that are locked by login restrictions */
    lockedUsers?: AuthUserGenqlSelection
    /** List of organizations allowing this user account to join automatically. */
    availableOrganizations?: AuthOrganizationGenqlSelection
    /** List of organization available to this user account but locked due to the current auth method. */
    lockedOrganizations?: AuthOrganizationGenqlSelection
    /** ID of the organization last accessed by the user. */
    lastUsedOrganizationId?: boolean | number
    /**
     * @deprecated Deprecated and not used anymore. Never populated.
     * Application token.
     */
    token?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user that has access to the the resources of an organization. */
export interface AuthUserGenqlSelection{
    id?: boolean | number
    /** The user's full name. */
    name?: boolean | number
    /** The user's display (nick) name. Unique within each organization. */
    displayName?: boolean | number
    /** The user's email address. */
    email?: boolean | number
    /** An URL to the user's avatar image. */
    avatarUrl?: boolean | number
    /** Whether the user is an organization admin or guest on a database level. */
    role?: boolean | number
    /** Whether the user is active. */
    active?: boolean | number
    /** User account ID the user belongs to. */
    userAccountId?: boolean | number
    /** Organization the user belongs to. */
    organization?: AuthOrganizationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An organization. Organizations are root-level objects that contain users and teams. */
export interface AuthOrganizationGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The organization's name. */
    name?: boolean | number
    /** Whether the organization is enabled. Used as a superuser tool to lock down the org. */
    enabled?: boolean | number
    /** The organization's unique URL key. */
    urlKey?: boolean | number
    /** Previously used URL keys for the organization (last 3 are kept and redirected). */
    previousUrlKeys?: boolean | number
    /** The organization's logo URL. */
    logoUrl?: boolean | number
    /** The time at which deletion of the organization was requested. */
    deletionRequestedAt?: boolean | number
    /** The feature release channel the organization belongs to. */
    releaseChannel?: boolean | number
    /** Whether SAML authentication is enabled for organization. */
    samlEnabled?: boolean | number
    /** [INTERNAL] SAML settings */
    samlSettings?: boolean | number
    /** Allowed authentication providers, empty array means all are allowed */
    allowedAuthServices?: boolean | number
    /** Whether SCIM provisioning is enabled for organization. */
    scimEnabled?: boolean | number
    /** The email domain or URL key for the organization. */
    serviceId?: boolean | number
    /** The region the organization is hosted in. */
    region?: boolean | number
    userCount?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Authentication session information. */
export interface AuthenticationSessionResponseGenqlSelection{
    id?: boolean | number
    /** Type of application used to authenticate. */
    type?: boolean | number
    /** IP address. */
    ip?: boolean | number
    /** Location country name. */
    locationCountry?: boolean | number
    /** Location country code. */
    locationCountryCode?: boolean | number
    /** Country codes of all seen locations. */
    countryCodes?: boolean | number
    /** Location region code. */
    locationRegionCode?: boolean | number
    /** Location city name. */
    locationCity?: boolean | number
    /** Session's user-agent. */
    userAgent?: boolean | number
    /** Used web browser. */
    browserType?: boolean | number
    /** Service used for logging in. */
    service?: boolean | number
    /** When was the session last seen */
    lastActiveAt?: boolean | number
    /** Date when the session was created. */
    createdAt?: boolean | number
    /** Date when the session was last updated. */
    updatedAt?: boolean | number
    /** Human readable location */
    location?: boolean | number
    /** Operating system used for the session */
    operatingSystem?: boolean | number
    /** Client used for the session */
    client?: boolean | number
    /** Name of the session, derived from the client and operating system */
    name?: boolean | number
    /** Identifies the session used to make the request. */
    isCurrentSession?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SsoUrlFromEmailResponseGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    /** SAML SSO sign-in URL. */
    samlSsoUrl?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AuditEntryTypeGenqlSelection{
    /** The audit entry type. */
    type?: boolean | number
    /** Description of the audit entry type. */
    description?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AuditEntryConnectionGenqlSelection{
    edges?: AuditEntryEdgeGenqlSelection
    nodes?: AuditEntryGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AuditEntryEdgeGenqlSelection{
    node?: AuditEntryGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Workspace audit log entry object. */
export interface AuditEntryGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    type?: boolean | number
    /** The organization the audit log belongs to. */
    organization?: OrganizationGenqlSelection
    /** The user that caused the audit entry to be created. */
    actor?: UserGenqlSelection
    /** The ID of the user that caused the audit entry to be created. */
    actorId?: boolean | number
    /** IP from actor when entry was recorded. */
    ip?: boolean | number
    /** Country code of request resulting to audit entry. */
    countryCode?: boolean | number
    /** Additional metadata related to the audit entry. */
    metadata?: boolean | number
    /** Additional information related to the request which performed the action. */
    requestInformation?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Audit entry filtering options. */
export interface AuditEntryFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Comparator for the type. */
type?: (StringComparator | null),
/** Comparator for the IP address. */
ip?: (StringComparator | null),
/** Comparator for the country code. */
countryCode?: (StringComparator | null),
/** Filters that the audit entry actor must satisfy. */
actor?: (NullableUserFilter | null),
/** Compound filters, all of which need to be matched by the issue. */
and?: (AuditEntryFilter[] | null),
/** Compound filters, one of which need to be matched by the issue. */
or?: (AuditEntryFilter[] | null)}

export interface AttachmentSourcesPayloadGenqlSelection{
    /** A unique list of all source types used in this workspace. */
    sources?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Public information of the OAuth application. */
export interface ApplicationGenqlSelection{
    /** OAuth application's ID. */
    id?: boolean | number
    /** OAuth application's client ID. */
    clientId?: boolean | number
    /** Application name. */
    name?: boolean | number
    /** Information about the application. */
    description?: boolean | number
    /** Name of the developer. */
    developer?: boolean | number
    /** Url of the developer (homepage or docs). */
    developerUrl?: boolean | number
    /** Image of the application. */
    imageUrl?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users. */
export interface WorkspaceAuthorizedApplicationGenqlSelection{
    /** Application name. */
    name?: boolean | number
    /** Description of the application. */
    description?: boolean | number
    /** Developer of the application. */
    developer?: boolean | number
    /** Developer URL of the application. */
    developerUrl?: boolean | number
    /** Image of the application. */
    imageUrl?: boolean | number
    /** Scopes that are authorized for this application for a given user. */
    scope?: boolean | number
    /** OAuth application's ID. */
    appId?: boolean | number
    /** OAuth application's client ID. */
    clientId?: boolean | number
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled?: boolean | number
    /** Total number of members that authorized the application. */
    totalMembers?: boolean | number
    /** UserIds and membership dates of everyone who has authorized the application with the set of scopes. */
    memberships?: AuthMembershipGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] An OAuth userId/createdDate tuple */
export interface AuthMembershipGenqlSelection{
    /** The user ID the authorization was done for */
    userId?: boolean | number
    /** The user ID associated with the authorization */
    authorizingUserId?: boolean | number
    /** The date of the authorization */
    createdAt?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Public information of the OAuth application, plus whether the application has been authorized for the given scopes. */
export interface UserAuthorizedApplicationGenqlSelection{
    /** OAuth application's ID. */
    id?: boolean | number
    /** OAuth application's client ID. */
    clientId?: boolean | number
    /** Application name. */
    name?: boolean | number
    /** Information about the application. */
    description?: boolean | number
    /** Name of the developer. */
    developer?: boolean | number
    /** Url of the developer (homepage or docs). */
    developerUrl?: boolean | number
    /** Image of the application. */
    imageUrl?: boolean | number
    /** Whether the user has authorized the application for the given scopes. */
    isAuthorized?: boolean | number
    /** Whether the application was created by Linear. */
    createdByLinear?: boolean | number
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled?: boolean | number
    /** Details of the app user's existing token, if any. */
    appUserAuthentication?: AppUserAuthenticationGenqlSelection
    /** Error associated with the application needing to be requested for approval in the workspace. */
    approvalErrorCode?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Details of the app user's existing token. */
export interface AppUserAuthenticationGenqlSelection{
    /** The timestamp at which the token was created. */
    createdAt?: boolean | number
    /** The scopes that the token has. */
    scope?: boolean | number
    /** Whether the application has requested custom sync groups. */
    requestedSyncGroups?: boolean | number
    /** The user that authorized the application, if known. */
    authorizingUser?: AuthorizingUserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Details of the app user's authorizing user. */
export interface AuthorizingUserGenqlSelection{
    /** The user's full name. */
    name?: boolean | number
    /** The user's display name. */
    displayName?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user. */
export interface AuthorizedApplicationGenqlSelection{
    /** Application name. */
    name?: boolean | number
    /** Description of the application. */
    description?: boolean | number
    /** Developer of the application. */
    developer?: boolean | number
    /** Developer URL of the application. */
    developerUrl?: boolean | number
    /** Image of the application. */
    imageUrl?: boolean | number
    /** Scopes that are authorized for this application for a given user. */
    scope?: boolean | number
    /** OAuth application's ID. */
    appId?: boolean | number
    /** OAuth application's client ID. */
    clientId?: boolean | number
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Public information of the OAuth application, plus the app user and aggregate membership count. */
export interface WorkspaceAuthorizedApplicationWithAppUserGenqlSelection{
    /** Application name. */
    name?: boolean | number
    /** Description of the application. */
    description?: boolean | number
    /** Developer of the application. */
    developer?: boolean | number
    /** Developer URL of the application. */
    developerUrl?: boolean | number
    /** Image of the application. */
    imageUrl?: boolean | number
    /** Scopes that are authorized for this application for a given user. */
    scope?: boolean | number
    /** OAuth application's ID. */
    appId?: boolean | number
    /** OAuth application's client ID. */
    clientId?: boolean | number
    /** Whether or not webhooks are enabled for the application. */
    webhooksEnabled?: boolean | number
    /** Total number of members (including the app user, if it exists) that authorized the application. */
    totalMembers?: boolean | number
    /** The app user associated with this client, if one exists. */
    appUser?: AuthMembershipGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Public information of the OAuth application with its memberships */
export interface WorkspaceAuthorizedApplicationWithMembershipsGenqlSelection{
    /** Details of the OAuth application */
    client?: AuthorizedApplicationGenqlSelection
    /** UserIds and membership dates of everyone who has authorized the application */
    memberships?: AuthMembershipGenqlSelection
    /** Total number of members that authorized the application. */
    totalMembers?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ApiKeyConnectionGenqlSelection{
    edges?: ApiKeyEdgeGenqlSelection
    nodes?: ApiKeyGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ApiKeyEdgeGenqlSelection{
    node?: ApiKeyGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An API key. Grants access to the user's resources. */
export interface ApiKeyGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The label of the API key. */
    label?: boolean | number
    /** Scopes associated with the API key. */
    scope?: boolean | number
    /** The sync groups that this API key requests access to. If null, the API key has access to all sync groups the user has access to. The final set of sync groups is computed as the intersection of these requested groups with the user's base sync groups. */
    requestedSyncGroups?: boolean | number
    /** Organization the API key belongs to. */
    organization?: OrganizationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentContextConnectionGenqlSelection{
    edges?: AgentContextEdgeGenqlSelection
    nodes?: AgentContextGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentContextEdgeGenqlSelection{
    node?: AgentContextGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A context for agent activities and state management. */
export interface AgentContextGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The user that created this agent context. */
    creator?: UserGenqlSelection
    /** The agent user that is associated with this agent context. */
    appUser?: UserGenqlSelection
    /** The comment this agent context is associated with. */
    comment?: CommentGenqlSelection
    /** The issue this agent context is associated with. */
    issue?: IssueGenqlSelection
    /** The current status of the agent context. */
    status?: boolean | number
    /** The time the agent context started working. */
    startedAt?: boolean | number
    /** The time the agent context ended. */
    endedAt?: boolean | number
    /** The type of the agent context. */
    type?: boolean | number
    /** Activities associated with this agent context. */
    activities?: (AgentActivityGenqlSelection & { __args: {
    /** A cursor to be used with last for backward pagination. */
    before?: (Scalars['String'] | null), 
    /** A cursor to be used with first for forward pagination */
    after?: (Scalars['String'] | null), 
    /** The number of items to forward paginate (used with after). Defaults to 50. */
    first?: (Scalars['Int'] | null), 
    /** The number of items to backward paginate (used with before). Defaults to 50. */
    last?: (Scalars['Int'] | null), 
    /** Should archived resources be included (default: false) */
    includeArchived?: (Scalars['Boolean'] | null), 
    /** By which field should the pagination order by. Available options are createdAt (default) and updatedAt. */
    orderBy?: (PaginationOrderBy | null)} })
    /** External links associated with this agent context. */
    links?: EntityExternalLinkGenqlSelection
    /** A summary of the activities in this context. */
    summary?: boolean | number
    /** Metadata about the external source that created this agent context. */
    sourceMetadata?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An activity within an agent context. */
export interface AgentActivityGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** The agent context this activity belongs to. */
    agentContext?: AgentContextGenqlSelection
    /** The type of the activity. */
    type?: boolean | number
    /** The content of the activity */
    content?: AgentActivityContentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Content for different types of agent activities. */
export interface AgentActivityContentGenqlSelection{
    on_AgentActivityObservationContent?:AgentActivityObservationContentGenqlSelection,
    on_AgentActivityActionContent?:AgentActivityActionContentGenqlSelection,
    on_AgentActivityResponseContent?:AgentActivityResponseContentGenqlSelection,
    on_AgentActivityErrorContent?:AgentActivityErrorContentGenqlSelection,
    __typename?: boolean | number
}


/** Content for an observation activity (chain of thought). */
export interface AgentActivityObservationContentGenqlSelection{
    /** The type of activity. */
    type?: boolean | number
    /** The observation content in Markdown format. */
    body?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Content for an action activity (tool call or action). */
export interface AgentActivityActionContentGenqlSelection{
    /** The type of activity. */
    type?: boolean | number
    /** The action being performed. */
    action?: boolean | number
    /** The parameters for the action, e.g. a file path, a keyword, etc. */
    parameter?: boolean | number
    /** The result of the action in Markdown format. */
    result?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Content for a response activity (markdown-like completion). */
export interface AgentActivityResponseContentGenqlSelection{
    /** The type of activity. */
    type?: boolean | number
    /** The response body in Markdown format. */
    body?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Content for an error activity. */
export interface AgentActivityErrorContentGenqlSelection{
    /** The type of activity. */
    type?: boolean | number
    /** The error message in Markdown format. */
    body?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentActivityConnectionGenqlSelection{
    edges?: AgentActivityEdgeGenqlSelection
    nodes?: AgentActivityGenqlSelection
    pageInfo?: PageInfoGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentActivityEdgeGenqlSelection{
    node?: AgentActivityGenqlSelection
    /** Used in `before` and `after` args */
    cursor?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface MutationGenqlSelection{
    /** Creates a new state, adding it to the workflow of a team. */
    workflowStateCreate?: (WorkflowStatePayloadGenqlSelection & { __args: {
    /** The state to create. */
    input: WorkflowStateCreateInput} })
    /** Updates a state. */
    workflowStateUpdate?: (WorkflowStatePayloadGenqlSelection & { __args: {
    /** A partial state object to update. */
    input: WorkflowStateUpdateInput, 
    /** The identifier of the state to update. */
    id: Scalars['String']} })
    /** Archives a state. Only states with issues that have all been archived can be archived. */
    workflowStateArchive?: (WorkflowStateArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the state to archive. */
    id: Scalars['String']} })
    /** Creates a new webhook. */
    webhookCreate?: (WebhookPayloadGenqlSelection & { __args: {
    /** The webhook object to create. */
    input: WebhookCreateInput} })
    /** Updates an existing Webhook. */
    webhookUpdate?: (WebhookPayloadGenqlSelection & { __args: {
    /** The properties of the Webhook. */
    input: WebhookUpdateInput, 
    /** The identifier of the Webhook. */
    id: Scalars['String']} })
    /** Deletes a Webhook. */
    webhookDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the Webhook to delete. */
    id: Scalars['String']} })
    /** Creates a new ViewPreferences object. */
    viewPreferencesCreate?: (ViewPreferencesPayloadGenqlSelection & { __args: {
    /** The ViewPreferences object to create. */
    input: ViewPreferencesCreateInput} })
    /** Updates an existing ViewPreferences object. */
    viewPreferencesUpdate?: (ViewPreferencesPayloadGenqlSelection & { __args: {
    /** The properties of the view preferences. */
    input: ViewPreferencesUpdateInput, 
    /** The identifier of the ViewPreferences object. */
    id: Scalars['String']} })
    /** Deletes a ViewPreferences. */
    viewPreferencesDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the ViewPreferences to delete. */
    id: Scalars['String']} })
    /** Updates the user's settings. */
    userSettingsUpdate?: (UserSettingsPayloadGenqlSelection & { __args: {
    /** A partial notification object to update the settings with. */
    input: UserSettingsUpdateInput, 
    /** The identifier of the userSettings to update. */
    id: Scalars['String']} })
    /** Resets user's setting flags. */
    userSettingsFlagsReset?: (UserSettingsFlagsResetPayloadGenqlSelection & { __args?: {
    /** The flags to reset. If not provided all flags will be reset. */
    flags?: (UserFlagType[] | null)} })
    /** Updates a user's settings flag. */
    userFlagUpdate?: (UserSettingsFlagPayloadGenqlSelection & { __args: {
    /** Flag operation to perform. */
    operation: UserFlagUpdateOperation, 
    /** Settings flag to increment. */
    flag: UserFlagType} })
    /** Subscribes to or unsubscribes from a notification category for a given notification channel for the user */
    notificationCategoryChannelSubscriptionUpdate?: (UserSettingsPayloadGenqlSelection & { __args: {
    /** The notification channel in which to subscribe to or unsubscribe from the category */
    channel: NotificationChannel, 
    /** The notification category to subscribe to or unsubscribe from */
    category: NotificationCategory, 
    /** True if the user wants to subscribe, false if the user wants to unsubscribe */
    subscribe: Scalars['Boolean']} })
    /** Updates a user. Only available to organization admins and the user themselves. */
    userUpdate?: (UserPayloadGenqlSelection & { __args: {
    /** A partial user object to update the user with. */
    input: UserUpdateInput, 
    /** The identifier of the user to update. Use `me` to reference currently authenticated user. */
    id: Scalars['String']} })
    /** Connects the Discord user to this Linear account via OAuth2. */
    userDiscordConnect?: (UserPayloadGenqlSelection & { __args: {
    /** The Discord OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Discord OAuth code. */
    code: Scalars['String']} })
    /** Disconnects the external user from this Linear account. */
    userExternalUserDisconnect?: (UserPayloadGenqlSelection & { __args: {
    /** The external service to disconnect. */
    service: Scalars['String']} })
    /** Makes user an admin. Can only be called by an admin. */
    userPromoteAdmin?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to make an admin. */
    id: Scalars['String']} })
    /** Makes user a regular user. Can only be called by an admin. */
    userDemoteAdmin?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to make a regular user. */
    id: Scalars['String']} })
    /** Makes user a regular user. Can only be called by an admin. */
    userPromoteMember?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to make a regular user. */
    id: Scalars['String']} })
    /** Makes user a guest. Can only be called by an admin. */
    userDemoteMember?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to make a guest. */
    id: Scalars['String']} })
    /** Suspends a user. Can only be called by an admin. */
    userSuspend?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to suspend. */
    id: Scalars['String']} })
    /** Un-suspends a user. Can only be called by an admin. */
    userUnsuspend?: (UserAdminPayloadGenqlSelection & { __args: {
    /** The identifier of the user to unsuspend. */
    id: Scalars['String']} })
    /** Creates a new triage responsibility. */
    triageResponsibilityCreate?: (TriageResponsibilityPayloadGenqlSelection & { __args: {
    /** The properties of the triage responsibility to create. */
    input: TriageResponsibilityCreateInput} })
    /** Updates an existing triage responsibility. */
    triageResponsibilityUpdate?: (TriageResponsibilityPayloadGenqlSelection & { __args: {
    /** The properties of the triage responsibility to update. */
    input: TriageResponsibilityUpdateInput, 
    /** The identifier of the triage responsibility to update. */
    id: Scalars['String']} })
    /** Deletes a triage responsibility. */
    triageResponsibilityDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the triage responsibility to delete. */
    id: Scalars['String']} })
    /** Creates a new time schedule. */
    timeScheduleCreate?: (TimeSchedulePayloadGenqlSelection & { __args: {
    /** The properties of the time schedule to create. */
    input: TimeScheduleCreateInput} })
    /** Updates a time schedule. */
    timeScheduleUpdate?: (TimeSchedulePayloadGenqlSelection & { __args: {
    /** The properties of the time schedule to update. */
    input: TimeScheduleUpdateInput, 
    /** The identifier of the time schedule to update. */
    id: Scalars['String']} })
    /** Upsert an external time schedule. */
    timeScheduleUpsertExternal?: (TimeSchedulePayloadGenqlSelection & { __args: {
    /** The properties of the time schedule to insert or update. */
    input: TimeScheduleUpdateInput, 
    /** The unique identifier of the external schedule. */
    externalId: Scalars['String']} })
    /** Deletes a time schedule. */
    timeScheduleDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the time schedule to delete. */
    id: Scalars['String']} })
    /** Refresh the integration schedule information. */
    timeScheduleRefreshIntegrationSchedule?: (TimeSchedulePayloadGenqlSelection & { __args: {
    /** The identifier of the time schedule to refresh. */
    id: Scalars['String']} })
    /** Creates a new template. */
    templateCreate?: (TemplatePayloadGenqlSelection & { __args: {
    /** The template object to create. */
    input: TemplateCreateInput} })
    /** Updates an existing template. */
    templateUpdate?: (TemplatePayloadGenqlSelection & { __args: {
    /** The properties of the template to update. */
    input: TemplateUpdateInput, 
    /** The identifier of the template. */
    id: Scalars['String']} })
    /** Deletes a template. */
    templateDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the template to delete. */
    id: Scalars['String']} })
    /** Creates a new project. */
    projectCreate?: (ProjectPayloadGenqlSelection & { __args: {
    /** Whether to connect a Slack channel to the project. */
    connectSlackChannel?: (Scalars['Boolean'] | null), 
    /** The issue object to create. */
    input: ProjectCreateInput} })
    /** Updates a project. */
    projectUpdate?: (ProjectPayloadGenqlSelection & { __args: {
    /** A partial project object to update the project with. */
    input: ProjectUpdateInput, 
    /** The identifier of the project to update. Also the identifier from the URL is accepted. */
    id: Scalars['String']} })
    /** [INTERNAL] Updates all projects currently assigned to to a project status to a new project status. */
    projectReassignStatus?: (SuccessPayloadGenqlSelection & { __args: {
    /** The identifier of the new project status to update the projects to. */
    newProjectStatusId: Scalars['String'], 
    /** The identifier of the project status with which projects will be updated. */
    originalProjectStatusId: Scalars['String']} })
    /** Deletes (trashes) a project. */
    projectDelete?: (ProjectArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project to delete. */
    id: Scalars['String']} })
    /**
     * @deprecated Deprecated in favor of projectDelete.
     * Archives a project.
     */
    projectArchive?: (ProjectArchivePayloadGenqlSelection & { __args: {
    /** Whether to trash the project. */
    trash?: (Scalars['Boolean'] | null), 
    /** The identifier of the project to archive. Also the identifier from the URL is accepted. */
    id: Scalars['String']} })
    /** Unarchives a project. */
    projectUnarchive?: (ProjectArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project to restore. Also the identifier from the URL is accepted. */
    id: Scalars['String']} })
    /** [Internal] Adds a label to a project. */
    projectAddLabel?: (ProjectPayloadGenqlSelection & { __args: {
    /** The identifier of the label to add. */
    labelId: Scalars['String'], 
    /** The identifier of the project to add the label to. */
    id: Scalars['String']} })
    /** [Internal] Removes a label from a project. */
    projectRemoveLabel?: (ProjectPayloadGenqlSelection & { __args: {
    /** The identifier of the label to remove. */
    labelId: Scalars['String'], 
    /** The identifier of the project to remove the label from. */
    id: Scalars['String']} })
    /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
    teamCreate?: (TeamPayloadGenqlSelection & { __args: {
    /** The team id to copy settings from, if any. */
    copySettingsFromTeamId?: (Scalars['String'] | null), 
    /** The team object to create. */
    input: TeamCreateInput} })
    /** Updates a team. */
    teamUpdate?: (TeamPayloadGenqlSelection & { __args: {
    /** [INTERNAL] Mapping of existing team entities to those inherited from the parent team */
    mapping?: (InheritanceEntityMapping | null), 
    /** A partial team object to update the team with. */
    input: TeamUpdateInput, 
    /** The identifier of the team to update. */
    id: Scalars['String']} })
    /** Deletes a team. */
    teamDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the team to delete. */
    id: Scalars['String']} })
    /** Unarchives a team and cancels deletion. */
    teamUnarchive?: (TeamArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the team to delete. */
    id: Scalars['String']} })
    /** Deletes team's cycles data */
    teamCyclesDelete?: (TeamPayloadGenqlSelection & { __args: {
    /** The identifier of the team, which cycles will be deleted. */
    id: Scalars['String']} })
    /** Creates a new team membership. */
    teamMembershipCreate?: (TeamMembershipPayloadGenqlSelection & { __args: {
    /** The team membership object to create. */
    input: TeamMembershipCreateInput} })
    /** Updates a team membership. */
    teamMembershipUpdate?: (TeamMembershipPayloadGenqlSelection & { __args: {
    /** A partial team membership object to update the team membership with. */
    input: TeamMembershipUpdateInput, 
    /** The identifier of the team membership to update. */
    id: Scalars['String']} })
    /** Deletes a team membership. */
    teamMembershipDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** Whether to leave the parent teams. */
    alsoLeaveParentTeams?: (Scalars['Boolean'] | null), 
    /** The identifier of the team membership to delete. */
    id: Scalars['String']} })
    /** Deletes a previously used team key. */
    teamKeyDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the team key to delete. */
    id: Scalars['String']} })
    /** Creates a new roadmapToProject join. */
    roadmapToProjectCreate?: (RoadmapToProjectPayloadGenqlSelection & { __args: {
    /** The properties of the roadmapToProject to create. */
    input: RoadmapToProjectCreateInput} })
    /** Updates a roadmapToProject. */
    roadmapToProjectUpdate?: (RoadmapToProjectPayloadGenqlSelection & { __args: {
    /** The properties of the roadmapToProject to update. */
    input: RoadmapToProjectUpdateInput, 
    /** The identifier of the roadmapToProject to update. */
    id: Scalars['String']} })
    /** Deletes a roadmapToProject. */
    roadmapToProjectDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the roadmapToProject to delete. */
    id: Scalars['String']} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Creates a new roadmap.
     */
    roadmapCreate?: (RoadmapPayloadGenqlSelection & { __args: {
    /** The properties of the roadmap to create. */
    input: RoadmapCreateInput} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Updates a roadmap.
     */
    roadmapUpdate?: (RoadmapPayloadGenqlSelection & { __args: {
    /** The properties of the roadmap to update. */
    input: RoadmapUpdateInput, 
    /** The identifier of the roadmap to update. */
    id: Scalars['String']} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Archives a roadmap.
     */
    roadmapArchive?: (RoadmapArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the roadmap to archive. */
    id: Scalars['String']} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Unarchives a roadmap.
     */
    roadmapUnarchive?: (RoadmapArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the roadmap to unarchive. */
    id: Scalars['String']} })
    /**
     * @deprecated Roadmaps are deprecated, use initiatives instead.
     * Deletes a roadmap.
     */
    roadmapDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the roadmap to delete. */
    id: Scalars['String']} })
    /** Create CSV export report for the organization. */
    createCsvExportReport?: (CreateCsvExportReportPayloadGenqlSelection & { __args?: {includePrivateTeamIds?: (Scalars['String'][] | null)} })
    /** Creates a new reaction. */
    reactionCreate?: (ReactionPayloadGenqlSelection & { __args: {
    /** The reaction object to create. */
    input: ReactionCreateInput} })
    /** Deletes a reaction. */
    reactionDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the reaction to delete. */
    id: Scalars['String']} })
    /** Creates a push subscription. */
    pushSubscriptionCreate?: (PushSubscriptionPayloadGenqlSelection & { __args: {
    /** The push subscription to create. */
    input: PushSubscriptionCreateInput} })
    /** Deletes a push subscription. */
    pushSubscriptionDelete?: (PushSubscriptionPayloadGenqlSelection & { __args: {
    /** The identifier of the push subscription to delete. */
    id: Scalars['String']} })
    /** Creates a new project update. */
    projectUpdateCreate?: (ProjectUpdatePayloadGenqlSelection & { __args: {
    /** Data for the project update to create. */
    input: ProjectUpdateCreateInput} })
    /** Updates a project update. */
    projectUpdateUpdate?: (ProjectUpdatePayloadGenqlSelection & { __args: {
    /** A data to update the project update with. */
    input: ProjectUpdateUpdateInput, 
    /** The identifier of the project update to update. */
    id: Scalars['String']} })
    /** Archives a project update. */
    projectUpdateArchive?: (ProjectUpdateArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project update to archive. */
    id: Scalars['String']} })
    /** Unarchives a project update. */
    projectUpdateUnarchive?: (ProjectUpdateArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project update to unarchive. */
    id: Scalars['String']} })
    /**
     * @deprecated Use `projectUpdateArchive` instead.
     * Deletes a project update.
     */
    projectUpdateDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the project update to delete. */
    id: Scalars['String']} })
    /** Create a notification to remind a user about a project update. */
    createProjectUpdateReminder?: (ProjectUpdateReminderPayloadGenqlSelection & { __args: {
    /** The user identifier to whom the notification will be sent. By default, it is set to the project lead. */
    userId?: (Scalars['String'] | null), 
    /** The identifier of the project to remind about. */
    projectId: Scalars['String']} })
    /** Creates a new project status. */
    projectStatusCreate?: (ProjectStatusPayloadGenqlSelection & { __args: {
    /** The ProjectStatus object to create. */
    input: ProjectStatusCreateInput} })
    /** Updates a project status. */
    projectStatusUpdate?: (ProjectStatusPayloadGenqlSelection & { __args: {
    /** A partial ProjectStatus object to update the ProjectStatus with. */
    input: ProjectStatusUpdateInput, 
    /** The identifier of the project status to update. */
    id: Scalars['String']} })
    /** Archives a project status. */
    projectStatusArchive?: (ProjectStatusArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project status to archive. */
    id: Scalars['String']} })
    /** Unarchives a project status. */
    projectStatusUnarchive?: (ProjectStatusArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the project status to unarchive. */
    id: Scalars['String']} })
    /** Creates a new project relation. */
    projectRelationCreate?: (ProjectRelationPayloadGenqlSelection & { __args: {
    /** The project relation to create. */
    input: ProjectRelationCreateInput} })
    /** Updates a project relation. */
    projectRelationUpdate?: (ProjectRelationPayloadGenqlSelection & { __args: {
    /** The properties of the project relation to update. */
    input: ProjectRelationUpdateInput, 
    /** The identifier of the project relation to update. */
    id: Scalars['String']} })
    /** Deletes a project relation. */
    projectRelationDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the project relation to delete. */
    id: Scalars['String']} })
    /** Creates a new project milestone. */
    projectMilestoneCreate?: (ProjectMilestonePayloadGenqlSelection & { __args: {
    /** The project milestone to create. */
    input: ProjectMilestoneCreateInput} })
    /** Updates a project milestone. */
    projectMilestoneUpdate?: (ProjectMilestonePayloadGenqlSelection & { __args: {
    /** A partial object to update the project milestone with. */
    input: ProjectMilestoneUpdateInput, 
    /** The identifier of the project milestone to update. Also the identifier from the URL is accepted. */
    id: Scalars['String']} })
    /** Deletes a project milestone. */
    projectMilestoneDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the project milestone to delete. */
    id: Scalars['String']} })
    /** [Internal] Moves a project milestone to another project, can be called to undo a prior move. */
    projectMilestoneMove?: (ProjectMilestoneMovePayloadGenqlSelection & { __args: {
    /** The project to move the milestone to, as well as any additional options need to make a successful move, or undo a previous move. */
    input: ProjectMilestoneMoveInput, 
    /** The identifier of the project milestone to move. */
    id: Scalars['String']} })
    /** Updates the user's organization. */
    organizationUpdate?: (OrganizationPayloadGenqlSelection & { __args: {
    /** A partial organization object to update the organization with. */
    input: OrganizationUpdateInput} })
    /** Get an organization's delete confirmation token. Administrator privileges required. */
    organizationDeleteChallenge?: OrganizationDeletePayloadGenqlSelection
    /** Delete's an organization. Administrator privileges required. */
    organizationDelete?: (OrganizationDeletePayloadGenqlSelection & { __args: {
    /** Information required to delete an organization. */
    input: DeleteOrganizationInput} })
    /** Cancels the deletion of an organization. Administrator privileges required. */
    organizationCancelDelete?: OrganizationCancelDeletePayloadGenqlSelection
    /** Starts a trial for the organization on the specified plan type. Administrator privileges required. */
    organizationStartTrialForPlan?: (OrganizationStartTrialPayloadGenqlSelection & { __args: {
    /** Plan details for trial */
    input: OrganizationStartTrialInput} })
    /**
     * @deprecated Use organizationStartTrialForPlan
     * [DEPRECATED] Starts a trial for the organization. Administrator privileges required.
     */
    organizationStartTrial?: OrganizationStartTrialPayloadGenqlSelection
    /** Creates a new organization invite. */
    organizationInviteCreate?: (OrganizationInvitePayloadGenqlSelection & { __args: {
    /** The organization invite object to create. */
    input: OrganizationInviteCreateInput} })
    /** Updates an organization invite. */
    organizationInviteUpdate?: (OrganizationInvitePayloadGenqlSelection & { __args: {
    /** The updates to make to the organization invite object. */
    input: OrganizationInviteUpdateInput, 
    /** The identifier of the organization invite to update. */
    id: Scalars['String']} })
    /** Re-send an organization invite. */
    resendOrganizationInvite?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the organization invite to re-send. */
    id: Scalars['String']} })
    /** Re-send an organization invite tied to an email address. */
    resendOrganizationInviteByEmail?: (DeletePayloadGenqlSelection & { __args: {
    /** The email address tied to the organization invite to re-send. */
    email: Scalars['String']} })
    /** Deletes an organization invite. */
    organizationInviteDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the organization invite to delete. */
    id: Scalars['String']} })
    /** [INTERNAL] Verifies a domain claim. */
    organizationDomainClaim?: (OrganizationDomainSimplePayloadGenqlSelection & { __args: {
    /** The ID of the organization domain to claim. */
    id: Scalars['String']} })
    /** [INTERNAL] Verifies a domain to be added to an organization. */
    organizationDomainVerify?: (OrganizationDomainPayloadGenqlSelection & { __args: {
    /** The organization domain to verify. */
    input: OrganizationDomainVerificationInput} })
    /** [INTERNAL] Adds a domain to be allowed for an organization. */
    organizationDomainCreate?: (OrganizationDomainPayloadGenqlSelection & { __args: {
    /** Whether to trigger an email verification flow during domain creation. */
    triggerEmailVerification?: (Scalars['Boolean'] | null), 
    /** The organization domain entry to create. */
    input: OrganizationDomainCreateInput} })
    /** [INTERNAL] Updates an organization domain settings. */
    organizationDomainUpdate?: (OrganizationDomainPayloadGenqlSelection & { __args: {
    /** The organization domain entry to update. */
    input: OrganizationDomainUpdateInput, 
    /** The identifier of the domain to update. */
    id: Scalars['String']} })
    /** Deletes a domain. */
    organizationDomainDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the domain to delete. */
    id: Scalars['String']} })
    /** Creates a new notification subscription for a cycle, custom view, label, project or team. */
    notificationSubscriptionCreate?: (NotificationSubscriptionPayloadGenqlSelection & { __args: {
    /** The subscription object to create. */
    input: NotificationSubscriptionCreateInput} })
    /** Updates a notification subscription. */
    notificationSubscriptionUpdate?: (NotificationSubscriptionPayloadGenqlSelection & { __args: {
    /** A partial notification subscription object to update the notification subscription with. */
    input: NotificationSubscriptionUpdateInput, 
    /** The identifier of the notification subscription to update. */
    id: Scalars['String']} })
    /**
     * @deprecated Update `notificationSubscription.active` to `false` instead.
     * Deletes a notification subscription reference.
     */
    notificationSubscriptionDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the notification subscription reference to delete. */
    id: Scalars['String']} })
    /** Updates a notification. */
    notificationUpdate?: (NotificationPayloadGenqlSelection & { __args: {
    /** A partial notification object to update the notification with. */
    input: NotificationUpdateInput, 
    /** The identifier of the notification to update. */
    id: Scalars['String']} })
    /** Marks notification and all related notifications as read. */
    notificationMarkReadAll?: (NotificationBatchActionPayloadGenqlSelection & { __args: {
    /** The time when notification was marked as read. */
    readAt: Scalars['DateTime'], 
    /** The type and id of the entity to archive notifications for. */
    input: NotificationEntityInput} })
    /** Marks notification and all related notifications as unread. */
    notificationMarkUnreadAll?: (NotificationBatchActionPayloadGenqlSelection & { __args: {
    /** The type and id of the entity to archive notifications for. */
    input: NotificationEntityInput} })
    /** Snoozes a notification and all related notifications. */
    notificationSnoozeAll?: (NotificationBatchActionPayloadGenqlSelection & { __args: {
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt: Scalars['DateTime'], 
    /** The type and id of the entity to archive notifications for. */
    input: NotificationEntityInput} })
    /** Unsnoozes a notification and all related notifications. */
    notificationUnsnoozeAll?: (NotificationBatchActionPayloadGenqlSelection & { __args: {
    /** The time when the notification was unsnoozed. */
    unsnoozedAt: Scalars['DateTime'], 
    /** The type and id of the entity to archive notifications for. */
    input: NotificationEntityInput} })
    /** Archives a notification. */
    notificationArchive?: (NotificationArchivePayloadGenqlSelection & { __args: {
    /** The id of the notification to archive. */
    id: Scalars['String']} })
    /** Archives a notification and all related notifications. */
    notificationArchiveAll?: (NotificationBatchActionPayloadGenqlSelection & { __args: {
    /** The type and id of the entity to archive notifications for. */
    input: NotificationEntityInput} })
    /** Unarchives a notification. */
    notificationUnarchive?: (NotificationArchivePayloadGenqlSelection & { __args: {
    /** The id of the notification to archive. */
    id: Scalars['String']} })
    /** Creates a new issue. */
    issueCreate?: (IssuePayloadGenqlSelection & { __args: {
    /** The issue object to create. */
    input: IssueCreateInput} })
    /** Creates a list of issues in one transaction. */
    issueBatchCreate?: (IssueBatchPayloadGenqlSelection & { __args: {
    /** A list of issue objects to create. */
    input: IssueBatchCreateInput} })
    /** Updates an issue. */
    issueUpdate?: (IssuePayloadGenqlSelection & { __args: {
    /** A partial issue object to update the issue with. */
    input: IssueUpdateInput, 
    /** The identifier of the issue to update. */
    id: Scalars['String']} })
    /** Updates multiple issues at once. */
    issueBatchUpdate?: (IssueBatchPayloadGenqlSelection & { __args: {
    /** A partial issue object to update the issues with. */
    input: IssueUpdateInput, 
    /** The id's of the issues to update. Can't be more than 50 at a time. */
    ids: Scalars['UUID'][]} })
    /** Archives an issue. */
    issueArchive?: (IssueArchivePayloadGenqlSelection & { __args: {
    /** Whether to trash the issue. */
    trash?: (Scalars['Boolean'] | null), 
    /** The identifier of the issue to archive. */
    id: Scalars['String']} })
    /** Unarchives an issue. */
    issueUnarchive?: (IssueArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the issue to archive. */
    id: Scalars['String']} })
    /** Deletes (trashes) an issue. */
    issueDelete?: (IssueArchivePayloadGenqlSelection & { __args: {
    /** Whether to permanently delete the issue and skip the grace period of 30 days. Available only to admins! */
    permanentlyDelete?: (Scalars['Boolean'] | null), 
    /** The identifier of the issue to delete. */
    id: Scalars['String']} })
    /** Adds a label to an issue. */
    issueAddLabel?: (IssuePayloadGenqlSelection & { __args: {
    /** The identifier of the label to add. */
    labelId: Scalars['String'], 
    /** The identifier of the issue to add the label to. */
    id: Scalars['String']} })
    /** Removes a label from an issue. */
    issueRemoveLabel?: (IssuePayloadGenqlSelection & { __args: {
    /** The identifier of the label to remove. */
    labelId: Scalars['String'], 
    /** The identifier of the issue to remove the label from. */
    id: Scalars['String']} })
    /** Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached. */
    issueReminder?: (IssuePayloadGenqlSelection & { __args: {
    /** The time when a reminder notification will be sent. */
    reminderAt: Scalars['DateTime'], 
    /** The identifier of the issue to add a reminder for. */
    id: Scalars['String']} })
    /** Subscribes a user to an issue. */
    issueSubscribe?: (IssuePayloadGenqlSelection & { __args: {
    /** The identifier of the user to subscribe, default is the current user. */
    userId?: (Scalars['String'] | null), 
    /** The identifier of the issue to subscribe to. */
    id: Scalars['String']} })
    /** Unsubscribes a user from an issue. */
    issueUnsubscribe?: (IssuePayloadGenqlSelection & { __args: {
    /** The identifier of the user to unsubscribe, default is the current user. */
    userId?: (Scalars['String'] | null), 
    /** The identifier of the issue to unsubscribe from. */
    id: Scalars['String']} })
    /** [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly. */
    issueDescriptionUpdateFromFront?: (IssuePayloadGenqlSelection & { __args: {
    /** Description to update the issue with.  */
    description: Scalars['String'], 
    /** The identifier of the issue to update. */
    id: Scalars['String']} })
    /** [INTERNAL] Updates the summary of an issue. */
    updateIssueSummary?: (IssuePayloadGenqlSelection & { __args: {
    /** The identifier of the issue to update. */
    id: Scalars['String']} })
    /** Creates a new issue relation. */
    issueRelationCreate?: (IssueRelationPayloadGenqlSelection & { __args: {
    /** Used by client undo operations. Should not be set directly. */
    overrideCreatedAt?: (Scalars['DateTime'] | null), 
    /** The issue relation to create. */
    input: IssueRelationCreateInput} })
    /** Updates an issue relation. */
    issueRelationUpdate?: (IssueRelationPayloadGenqlSelection & { __args: {
    /** The properties of the issue relation to update. */
    input: IssueRelationUpdateInput, 
    /** The identifier of the issue relation to update. */
    id: Scalars['String']} })
    /** Deletes an issue relation. */
    issueRelationDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the issue relation to delete. */
    id: Scalars['String']} })
    /** Creates a new label. */
    issueLabelCreate?: (IssueLabelPayloadGenqlSelection & { __args: {
    /** Whether to replace all team-specific labels with the same name with this newly created workspace label (default: false). */
    replaceTeamLabels?: (Scalars['Boolean'] | null), 
    /** The issue label to create. */
    input: IssueLabelCreateInput} })
    /** Updates an label. */
    issueLabelUpdate?: (IssueLabelPayloadGenqlSelection & { __args: {
    /** Whether to replace all team-specific labels with the same name with this updated workspace label (default: false). */
    replaceTeamLabels?: (Scalars['Boolean'] | null), 
    /** A partial label object to update. */
    input: IssueLabelUpdateInput, 
    /** The identifier of the label to update. */
    id: Scalars['String']} })
    /** Deletes an issue label. */
    issueLabelDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the label to delete. */
    id: Scalars['String']} })
    /** Kicks off a GitHub import job. */
    issueImportCreateGithub?: (IssueImportPayloadGenqlSelection & { __args?: {
    /** ID of the team into which to import data. */
    teamId?: (Scalars['String'] | null), 
    /** Name of new team. When teamId is not set. */
    teamName?: (Scalars['String'] | null), 
    /** IDs of the Github repositories from which we will import data. */
    githubRepoIds?: (Scalars['Int'][] | null), 
    /** Labels to use to filter the import data. Only issues matching any of these filters will be imported. */
    githubLabels?: (Scalars['String'][] | null), 
    /** Whether to instantly process the import with the default configuration mapping. */
    instantProcess?: (Scalars['Boolean'] | null), 
    /** Whether or not we should collect the data for closed issues. */
    includeClosedIssues?: (Scalars['Boolean'] | null)} })
    /** Kicks off a Jira import job. */
    issueImportCreateJira?: (IssueImportPayloadGenqlSelection & { __args: {
    /** ID of the team into which to import data. Empty to create new team. */
    teamId?: (Scalars['String'] | null), 
    /** Name of new team. When teamId is not set. */
    teamName?: (Scalars['String'] | null), 
    /** Jira personal access token to access Jira REST API. */
    jiraToken: Scalars['String'], 
    /** Jira project key from which we will import data. */
    jiraProject: Scalars['String'], 
    /** Jira user account email. */
    jiraEmail: Scalars['String'], 
    /** Jira installation or cloud hostname. */
    jiraHostname: Scalars['String'], 
    /** A custom JQL query to filter issues being imported */
    jql?: (Scalars['String'] | null), 
    /** Whether to instantly process the import with the default configuration mapping. */
    instantProcess?: (Scalars['Boolean'] | null), 
    /** Whether or not we should collect the data for closed issues. */
    includeClosedIssues?: (Scalars['Boolean'] | null), 
    /** ID of issue import. If not provided it will be generated. */
    id?: (Scalars['String'] | null)} })
    /** Kicks off a Jira import job from a CSV. */
    issueImportCreateCSVJira?: (IssueImportPayloadGenqlSelection & { __args: {
    /** ID of the team into which to import data. Empty to create new team. */
    teamId?: (Scalars['String'] | null), 
    /** Name of new team. When teamId is not set. */
    teamName?: (Scalars['String'] | null), 
    /** URL for the CSV. */
    csvUrl: Scalars['String'], 
    /** Jira installation or cloud hostname. */
    jiraHostname?: (Scalars['String'] | null), 
    /** Jira personal access token to access Jira REST API. */
    jiraToken?: (Scalars['String'] | null), 
    /** Jira user account email. */
    jiraEmail?: (Scalars['String'] | null)} })
    /** Kicks off a Shortcut (formerly Clubhouse) import job. */
    issueImportCreateClubhouse?: (IssueImportPayloadGenqlSelection & { __args: {
    /** ID of the team into which to import data. */
    teamId?: (Scalars['String'] | null), 
    /** Name of new team. When teamId is not set. */
    teamName?: (Scalars['String'] | null), 
    /** Shortcut (formerly Clubhouse) token to fetch information from the Clubhouse API. */
    clubhouseToken: Scalars['String'], 
    /** Shortcut (formerly Clubhouse) group name to choose which issues we should import. */
    clubhouseGroupName: Scalars['String'], 
    /** Whether to instantly process the import with the default configuration mapping. */
    instantProcess?: (Scalars['Boolean'] | null), 
    /** Whether or not we should collect the data for closed issues. */
    includeClosedIssues?: (Scalars['Boolean'] | null), 
    /** ID of issue import. If not provided it will be generated. */
    id?: (Scalars['String'] | null)} })
    /** Kicks off an Asana import job. */
    issueImportCreateAsana?: (IssueImportPayloadGenqlSelection & { __args: {
    /** ID of the team into which to import data. */
    teamId?: (Scalars['String'] | null), 
    /** Name of new team. When teamId is not set. */
    teamName?: (Scalars['String'] | null), 
    /** Asana token to fetch information from the Asana API. */
    asanaToken: Scalars['String'], 
    /** Asana team name to choose which issues we should import. */
    asanaTeamName: Scalars['String'], 
    /** Whether to instantly process the import with the default configuration mapping. */
    instantProcess?: (Scalars['Boolean'] | null), 
    /** Whether or not we should collect the data for closed issues. */
    includeClosedIssues?: (Scalars['Boolean'] | null), 
    /** ID of issue import. If not provided it will be generated. */
    id?: (Scalars['String'] | null)} })
    /** [INTERNAL] Kicks off a Linear to Linear import job. */
    issueImportCreateLinearV2?: (IssueImportPayloadGenqlSelection & { __args: {
    /** The source organization to import from. */
    linearSourceOrganizationId: Scalars['String'], 
    /** ID of issue import. If not provided it will be generated. */
    id?: (Scalars['String'] | null)} })
    /** Deletes an import job. */
    issueImportDelete?: (IssueImportDeletePayloadGenqlSelection & { __args: {
    /** ID of the issue import to delete. */
    issueImportId: Scalars['String']} })
    /** Kicks off import processing. */
    issueImportProcess?: (IssueImportPayloadGenqlSelection & { __args: {
    /** The mapping configuration to use for processing the import. */
    mapping: Scalars['JSONObject'], 
    /** ID of the issue import which we're going to process. */
    issueImportId: Scalars['String']} })
    /** Updates the mapping for the issue import. */
    issueImportUpdate?: (IssueImportPayloadGenqlSelection & { __args: {
    /** The properties of the issue import to update. */
    input: IssueImportUpdateInput, 
    /** The identifier of the issue import. */
    id: Scalars['String']} })
    /** Creates new settings for one or more integrations. */
    integrationsSettingsCreate?: (IntegrationsSettingsPayloadGenqlSelection & { __args: {
    /** The settings to create. */
    input: IntegrationsSettingsCreateInput} })
    /** Updates settings related to integrations for a project or a team. */
    integrationsSettingsUpdate?: (IntegrationsSettingsPayloadGenqlSelection & { __args: {
    /** A settings object to update the settings with. */
    input: IntegrationsSettingsUpdateInput, 
    /** The identifier of the settings to update. */
    id: Scalars['String']} })
    /** Creates a new integrationTemplate join. */
    integrationTemplateCreate?: (IntegrationTemplatePayloadGenqlSelection & { __args: {
    /** The properties of the integrationTemplate to create. */
    input: IntegrationTemplateCreateInput} })
    /** Deletes a integrationTemplate. */
    integrationTemplateDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the integrationTemplate to delete. */
    id: Scalars['String']} })
    /** [INTERNAL] Updates the integration. */
    integrationUpdate?: (IntegrationPayloadGenqlSelection & { __args: {
    /** A partial integration object to update the integration with. */
    input: IntegrationUpdateInput, 
    /** The identifier of the integration to update. */
    id: Scalars['String']} })
    /**
     * @deprecated Use integrationUpdate instead.
     * [INTERNAL] Updates the integration settings.
     */
    integrationSettingsUpdate?: (IntegrationPayloadGenqlSelection & { __args: {
    /** An integration settings object. */
    input: IntegrationSettingsInput, 
    /** The identifier of the integration to update. */
    id: Scalars['String']} })
    /** Generates a webhook for the GitHub commit integration. */
    integrationGithubCommitCreate?: GitHubCommitIntegrationPayloadGenqlSelection
    /** Connects the organization with the GitHub App. */
    integrationGithubConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The GitHub grant code that's exchanged for OAuth tokens. */
    code: Scalars['String'], 
    /** The GitHub data to connect with. */
    installationId: Scalars['String']} })
    /** Connects the organization with the GitHub Import App. */
    integrationGithubImportConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The GitHub grant code that's exchanged for OAuth tokens. */
    code: Scalars['String'], 
    /** The GitHub data to connect with. */
    installationId: Scalars['String']} })
    /** Refreshes the data for a GitHub import integration. */
    integrationGithubImportRefresh?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The id of the integration to update. */
    id: Scalars['String']} })
    /** Connects the organization with a GitHub Enterprise Server. */
    integrationGitHubEnterpriseServerConnect?: (GitHubEnterpriseServerPayloadGenqlSelection & { __args: {
    /** The name of GitHub organization. */
    organizationName?: (Scalars['String'] | null), 
    /** The base URL of the GitHub Enterprise Server installation. */
    githubUrl: Scalars['String']} })
    /** Connects the organization with a GitLab Access Token. */
    integrationGitlabConnect?: (GitLabIntegrationCreatePayloadGenqlSelection & { __args: {
    /** The URL of the GitLab installation. */
    gitlabUrl: Scalars['String'], 
    /** The GitLab Access Token to connect with. */
    accessToken: Scalars['String']} })
    /** Creates an integration api key for Airbyte to connect with Linear. */
    airbyteIntegrationConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** Airbyte integration settings. */
    input: AirbyteConfigurationInput} })
    /** [Internal] Connects the Google Calendar to the user to this Linear account via OAuth2. */
    integrationGoogleCalendarPersonalConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** [Internal] The Google OAuth code. */
    code: Scalars['String']} })
    /** [INTERNAL] Integrates the organization with LaunchDarkly. */
    integrationLaunchDarklyConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The LaunchDarkly OAuth code. */
    code: Scalars['String'], 
    /** The LaunchDarkly project key. */
    projectKey: Scalars['String'], 
    /** The LaunchDarkly environment. */
    environment: Scalars['String']} })
    /** [INTERNAL] Integrates your personal account with LaunchDarkly. */
    integrationLaunchDarklyPersonalConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The LaunchDarkly OAuth code. */
    code: Scalars['String']} })
    /** [INTERNAL] Connects the organization with a Jira Personal Access Token. */
    jiraIntegrationConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** Jira integration settings. */
    input: JiraConfigurationInput} })
    /** [INTERNAL] Updates a Jira Integration. */
    integrationJiraUpdate?: (IntegrationPayloadGenqlSelection & { __args: {
    /** Jira integration update input. */
    input: JiraUpdateInput} })
    /** Connect your Jira account to Linear. */
    integrationJiraPersonal?: (IntegrationPayloadGenqlSelection & { __args?: {
    /** The Jira OAuth code, when connecting using OAuth. */
    code?: (Scalars['String'] | null), 
    /** The Jira personal access token, when connecting using a PAT. */
    accessToken?: (Scalars['String'] | null)} })
    /** Connect your GitHub account to Linear. */
    integrationGitHubPersonal?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The GitHub OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with Intercom. */
    integrationIntercom?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Intercom domain URL to use for the integration. Defaults to app.intercom.com if not provided. */
    domainUrl?: (Scalars['String'] | null), 
    /** The Intercom OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Intercom OAuth code. */
    code: Scalars['String']} })
    /** Disconnects the organization from Intercom. */
    integrationIntercomDelete?: IntegrationPayloadGenqlSelection
    /** [INTERNAL] Refreshes the customer data attributes from the specified integration service. */
    integrationCustomerDataAttributesRefresh?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The integration service to refresh customer data attributes from. */
    input: IntegrationCustomerDataAttributesRefreshInput} })
    /**
     * @deprecated This mutation is deprecated, please use `integrationSettingsUpdate` instead
     * [DEPRECATED] Updates settings on the Intercom integration.
     */
    integrationIntercomSettingsUpdate?: (IntegrationPayloadGenqlSelection & { __args: {
    /** A partial Intercom integration settings object to update the integration settings with. */
    input: IntercomSettingsInput} })
    /** Integrates the organization with Discord. */
    integrationDiscord?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Discord OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Discord OAuth code. */
    code: Scalars['String']} })
    /** [INTERNAL] Integrates the organization with Opsgenie. */
    integrationOpsgenieConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Opsgenie API key. */
    apiKey: Scalars['String']} })
    /** [INTERNAL] Refresh Opsgenie schedule mappings. */
    integrationOpsgenieRefreshScheduleMappings?: IntegrationPayloadGenqlSelection
    /** [INTERNAL] Integrates the organization with PagerDuty. */
    integrationPagerDutyConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The PagerDuty OAuth code. */
    code: Scalars['String'], 
    /** The PagerDuty OAuth redirect URI. */
    redirectUri: Scalars['String']} })
    /** [INTERNAL] Refresh PagerDuty schedule mappings. */
    integrationPagerDutyRefreshScheduleMappings?: IntegrationPayloadGenqlSelection
    /** [Internal] Updates existing Slack integration scopes. */
    updateIntegrationSlackScopes?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The ID of the existing Slack integration */
    integrationId: Scalars['String'], 
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with Slack. */
    integrationSlack?: (IntegrationPayloadGenqlSelection & { __args: {
    /** [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used. */
    shouldUseV2Auth?: (Scalars['Boolean'] | null), 
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with the Slack Asks app. */
    integrationSlackAsks?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Integrates your personal notifications with Slack. */
    integrationSlackPersonal?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Connect a Slack channel to Asks. */
    integrationAsksConnectChannel?: (AsksChannelConnectPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Slack integration for team notifications. */
    integrationSlackPost?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used. */
    shouldUseV2Auth?: (Scalars['Boolean'] | null), 
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** Integration's associated team. */
    teamId: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Slack integration for project notifications. */
    integrationSlackProjectPost?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** The service to enable once connected, either 'notifications' or 'updates'. */
    service: Scalars['String'], 
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** Integration's associated project. */
    projectId: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** [Internal] Slack integration for initiative notifications. */
    integrationSlackInitiativePost?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** Integration's associated initiative. */
    initiativeId: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Slack integration for custom view notifications. */
    integrationSlackCustomViewNotifications?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** Integration's associated custom view. */
    customViewId: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Integrates a Slack Asks channel with a Customer. */
    integrationSlackCustomerChannelLink?: (SuccessPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The customer to link the Slack channel with */
    customerId: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Slack integration for organization level project update notifications. */
    integrationSlackOrgProjectUpdatesPost?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** [Internal] Slack integration for organization level initiative update notifications. */
    integrationSlackOrgInitiativeUpdatesPost?: (SlackChannelConnectPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Imports custom emojis from your Slack workspace. */
    integrationSlackImportEmojis?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Slack OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Slack OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with Figma. */
    integrationFigma?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Figma OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Figma OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with Google Sheets. */
    integrationGoogleSheets?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Google OAuth code. */
    code: Scalars['String']} })
    /** Manually update Google Sheets data. */
    refreshGoogleSheetsData?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The type of export. */
    type?: (Scalars['String'] | null), 
    /** The identifier of the Google Sheets integration to update. */
    id: Scalars['String']} })
    /** Integrates the organization with Sentry. */
    integrationSentryConnect?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The slug of the Sentry organization being connected. */
    organizationSlug: Scalars['String'], 
    /** The Sentry grant code that's exchanged for OAuth tokens. */
    code: Scalars['String'], 
    /** The Sentry installationId to connect with. */
    installationId: Scalars['String']} })
    /** Integrates the organization with Front. */
    integrationFront?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Front OAuth redirect URI. */
    redirectUri: Scalars['String'], 
    /** The Front OAuth code. */
    code: Scalars['String']} })
    /** Integrates the organization with Zendesk. */
    integrationZendesk?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Zendesk installation subdomain. */
    subdomain: Scalars['String'], 
    /** The Zendesk OAuth code. */
    code: Scalars['String'], 
    /** The Zendesk OAuth scopes. */
    scope: Scalars['String'], 
    /** The Zendesk OAuth redirect URI. */
    redirectUri: Scalars['String']} })
    /**
     * @deprecated Not available.
     * Enables Loom integration for the organization.
     */
    integrationLoom?: IntegrationPayloadGenqlSelection
    /** Integrates the organization with Salesforce. */
    integrationSalesforce?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The Salesforce OAuth code. */
    code: Scalars['String'], 
    /** The Salesforce installation subdomain. */
    subdomain: Scalars['String'], 
    /** The Salesforce OAuth redirect URI. */
    redirectUri: Scalars['String']} })
    /** [INTERNAL] Refreshes the Salesforce integration metadata. */
    integrationSalesforceMetadataRefresh?: (IntegrationPayloadGenqlSelection & { __args: {
    /** The ID of the integration to refresh metadata for. */
    id: Scalars['String']} })
    /** Deletes an integration. */
    integrationDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the integration to delete. */
    id: Scalars['String']} })
    /** Archives an integration. */
    integrationArchive?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the integration to archive. */
    id: Scalars['String']} })
    /** Requests a currently unavailable integration. */
    integrationRequest?: (IntegrationRequestPayloadGenqlSelection & { __args: {
    /** Integration request details. */
    input: IntegrationRequestInput} })
    /** Creates a initiative update. */
    initiativeUpdateCreate?: (InitiativeUpdatePayloadGenqlSelection & { __args: {
    /** The initiative update object to create. */
    input: InitiativeUpdateCreateInput} })
    /** Updates an update. */
    initiativeUpdateUpdate?: (InitiativeUpdatePayloadGenqlSelection & { __args: {
    /** A data to update the update with. */
    input: InitiativeUpdateUpdateInput, 
    /** The identifier of the update to update. */
    id: Scalars['String']} })
    /** Archives an initiative update. */
    initiativeUpdateArchive?: (InitiativeUpdateArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative update to archive. */
    id: Scalars['String']} })
    /** Create a notification to remind a user about an initiative update. */
    createInitiativeUpdateReminder?: (InitiativeUpdateReminderPayloadGenqlSelection & { __args: {
    /** The user identifier to whom the notification will be sent. By default, it is set to the initiative owner. */
    userId?: (Scalars['String'] | null), 
    /** The identifier of the initiative to remind about. */
    initiativeId: Scalars['String']} })
    /** Unarchives an initiative update. */
    initiativeUpdateUnarchive?: (InitiativeUpdateArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative update to unarchive. */
    id: Scalars['String']} })
    /** Creates a new initiativeToProject join. */
    initiativeToProjectCreate?: (InitiativeToProjectPayloadGenqlSelection & { __args: {
    /** The properties of the initiativeToProject to create. */
    input: InitiativeToProjectCreateInput} })
    /** Updates a initiativeToProject. */
    initiativeToProjectUpdate?: (InitiativeToProjectPayloadGenqlSelection & { __args: {
    /** The properties of the initiativeToProject to update. */
    input: InitiativeToProjectUpdateInput, 
    /** The identifier of the initiativeToProject to update. */
    id: Scalars['String']} })
    /** Deletes a initiativeToProject. */
    initiativeToProjectDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the initiativeToProject to delete. */
    id: Scalars['String']} })
    /** Creates a new initiative. */
    initiativeCreate?: (InitiativePayloadGenqlSelection & { __args: {
    /** The properties of the initiative to create. */
    input: InitiativeCreateInput} })
    /** Updates a initiative. */
    initiativeUpdate?: (InitiativePayloadGenqlSelection & { __args: {
    /** The properties of the initiative to update. */
    input: InitiativeUpdateInput, 
    /** The identifier of the initiative to update. */
    id: Scalars['String']} })
    /** Archives a initiative. */
    initiativeArchive?: (InitiativeArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative to archive. */
    id: Scalars['String']} })
    /** Unarchives a initiative. */
    initiativeUnarchive?: (InitiativeArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative to unarchive. */
    id: Scalars['String']} })
    /** Deletes (trashes) an initiative. */
    initiativeDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative to delete. */
    id: Scalars['String']} })
    /** Creates a new initiative relation. */
    initiativeRelationCreate?: (InitiativeRelationPayloadGenqlSelection & { __args: {
    /** The initiative relation to create. */
    input: InitiativeRelationCreateInput} })
    /** Updates an initiative relation. */
    initiativeRelationUpdate?: (DeletePayloadGenqlSelection & { __args: {
    /** The properties of the initiative relation to update. */
    input: InitiativeRelationUpdateInput, 
    /** The identifier of the initiative relation to update. */
    id: Scalars['String']} })
    /** Deletes an initiative relation. */
    initiativeRelationDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the initiative relation to delete. */
    id: Scalars['String']} })
    /** Creates a Git target branch automation. */
    gitAutomationTargetBranchCreate?: (GitAutomationTargetBranchPayloadGenqlSelection & { __args: {
    /** The Git target branch automation to create. */
    input: GitAutomationTargetBranchCreateInput} })
    /** Updates an existing Git target branch automation. */
    gitAutomationTargetBranchUpdate?: (GitAutomationTargetBranchPayloadGenqlSelection & { __args: {
    /** The updates. */
    input: GitAutomationTargetBranchUpdateInput, 
    /** The identifier of the Git target branch automation to update. */
    id: Scalars['String']} })
    /** Archives a Git target branch automation. */
    gitAutomationTargetBranchDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the Git target branch automation to archive. */
    id: Scalars['String']} })
    /** Creates a new automation state. */
    gitAutomationStateCreate?: (GitAutomationStatePayloadGenqlSelection & { __args: {
    /** The automation state to create. */
    input: GitAutomationStateCreateInput} })
    /** Updates an existing state. */
    gitAutomationStateUpdate?: (GitAutomationStatePayloadGenqlSelection & { __args: {
    /** The state to update. */
    input: GitAutomationStateUpdateInput, 
    /** The identifier of the state to update. */
    id: Scalars['String']} })
    /** Archives an automation state. */
    gitAutomationStateDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the automation state to archive. */
    id: Scalars['String']} })
    /** XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage. */
    fileUpload?: (UploadPayloadGenqlSelection & { __args: {
    /** Optional metadata. */
    metaData?: (Scalars['JSON'] | null), 
    /** Should the file be made publicly accessible (default: false). */
    makePublic?: (Scalars['Boolean'] | null), 
    /** File size of the uploaded file. */
    size: Scalars['Int'], 
    /** MIME type of the uploaded file. */
    contentType: Scalars['String'], 
    /** Filename of the uploaded file. */
    filename: Scalars['String']} })
    /** XHR request payload to upload a file for import, directly to Linear's cloud storage. */
    importFileUpload?: (UploadPayloadGenqlSelection & { __args: {
    /** Optional metadata. */
    metaData?: (Scalars['JSON'] | null), 
    /** File size of the uploaded file. */
    size: Scalars['Int'], 
    /** MIME type of the uploaded file. */
    contentType: Scalars['String'], 
    /** Filename of the uploaded file. */
    filename: Scalars['String']} })
    /** Upload an image from an URL to Linear. */
    imageUploadFromUrl?: (ImageUploadFromUrlPayloadGenqlSelection & { __args: {
    /** URL of the file to be uploaded to Linear. */
    url: Scalars['String']} })
    /** Creates a new favorite (project, cycle etc). */
    favoriteCreate?: (FavoritePayloadGenqlSelection & { __args: {
    /** The favorite object to create. */
    input: FavoriteCreateInput} })
    /** Updates a favorite. */
    favoriteUpdate?: (FavoritePayloadGenqlSelection & { __args: {
    /** A partial favorite object to update the favorite with. */
    input: FavoriteUpdateInput, 
    /** The identifier of the favorite to update. */
    id: Scalars['String']} })
    /** Deletes a favorite reference. */
    favoriteDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the favorite reference to delete. */
    id: Scalars['String']} })
    /** Creates a new entity link. */
    entityExternalLinkCreate?: (EntityExternalLinkPayloadGenqlSelection & { __args: {
    /** The entity link object to create. */
    input: EntityExternalLinkCreateInput} })
    /** Updates an entity link. */
    entityExternalLinkUpdate?: (EntityExternalLinkPayloadGenqlSelection & { __args: {
    /** The entity link object to update. */
    input: EntityExternalLinkUpdateInput, 
    /** The identifier of the entity link to update. */
    id: Scalars['String']} })
    /** Deletes an entity link. */
    entityExternalLinkDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the entity link to delete. */
    id: Scalars['String']} })
    /** Creates a custom emoji. */
    emojiCreate?: (EmojiPayloadGenqlSelection & { __args: {
    /** The emoji object to create. */
    input: EmojiCreateInput} })
    /** Deletes an emoji. */
    emojiDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the emoji to delete. */
    id: Scalars['String']} })
    /** Unsubscribes the user from one type of email. */
    emailUnsubscribe?: (EmailUnsubscribePayloadGenqlSelection & { __args: {
    /** Unsubscription details. */
    input: EmailUnsubscribeInput} })
    /** Creates a new email intake address. */
    emailIntakeAddressCreate?: (EmailIntakeAddressPayloadGenqlSelection & { __args: {
    /** The email intake address object to create. */
    input: EmailIntakeAddressCreateInput} })
    /** Rotates an existing email intake address. */
    emailIntakeAddressRotate?: (EmailIntakeAddressPayloadGenqlSelection & { __args: {
    /** The identifier of the email intake address. */
    id: Scalars['String']} })
    /** Updates an existing email intake address. */
    emailIntakeAddressUpdate?: (EmailIntakeAddressPayloadGenqlSelection & { __args: {
    /** The properties of the email intake address to update. */
    input: EmailIntakeAddressUpdateInput, 
    /** The identifier of the email intake address. */
    id: Scalars['String']} })
    /** Deletes an email intake address object. */
    emailIntakeAddressDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the email intake address to delete. */
    id: Scalars['String']} })
    /** Creates a new document. */
    documentCreate?: (DocumentPayloadGenqlSelection & { __args: {
    /** The document to create. */
    input: DocumentCreateInput} })
    /** Updates a document. */
    documentUpdate?: (DocumentPayloadGenqlSelection & { __args: {
    /** A partial document object to update the document with. */
    input: DocumentUpdateInput, 
    /** The identifier of the document to update. Also the identifier from the URL is accepted. */
    id: Scalars['String']} })
    /** Deletes (trashes) a document. */
    documentDelete?: (DocumentArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the document to delete. */
    id: Scalars['String']} })
    /** Restores a document. */
    documentUnarchive?: (DocumentArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the document to restore. */
    id: Scalars['String']} })
    /** Creates a new cycle. */
    cycleCreate?: (CyclePayloadGenqlSelection & { __args: {
    /** The cycle object to create. */
    input: CycleCreateInput} })
    /** Updates a cycle. */
    cycleUpdate?: (CyclePayloadGenqlSelection & { __args: {
    /** A partial cycle object to update the cycle with. */
    input: CycleUpdateInput, 
    /** The identifier of the cycle to update. */
    id: Scalars['String']} })
    /** Archives a cycle. */
    cycleArchive?: (CycleArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the cycle to archive. */
    id: Scalars['String']} })
    /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
    cycleShiftAll?: (CyclePayloadGenqlSelection & { __args: {
    /** A partial cycle object to update the cycle with. */
    input: CycleShiftAllInput} })
    /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
    cycleStartUpcomingCycleToday?: (CyclePayloadGenqlSelection & { __args: {
    /** The identifier of the cycle to start as of midnight today. Must be the upcoming cycle. */
    id: Scalars['String']} })
    /** Creates a new customer tier. */
    customerTierCreate?: (CustomerTierPayloadGenqlSelection & { __args: {
    /** The CustomerTier object to create. */
    input: CustomerTierCreateInput} })
    /** Updates a customer tier. */
    customerTierUpdate?: (CustomerTierPayloadGenqlSelection & { __args: {
    /** A partial CustomerTier object to update the CustomerTier with. */
    input: CustomerTierUpdateInput, 
    /** The identifier of the customer tier to update. */
    id: Scalars['String']} })
    /** Deletes a customer tier. */
    customerTierDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the customer tier to delete. */
    id: Scalars['String']} })
    /** Creates a new customer status. */
    customerStatusCreate?: (CustomerStatusPayloadGenqlSelection & { __args: {
    /** The CustomerStatus object to create. */
    input: CustomerStatusCreateInput} })
    /** Updates a customer status. */
    customerStatusUpdate?: (CustomerStatusPayloadGenqlSelection & { __args: {
    /** A partial CustomerStatus object to update the CustomerStatus with. */
    input: CustomerStatusUpdateInput, 
    /** The identifier of the customer status to update. */
    id: Scalars['String']} })
    /** Deletes a customer status. */
    customerStatusDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the customer status to delete. */
    id: Scalars['String']} })
    /** Creates a new customer. */
    customerCreate?: (CustomerPayloadGenqlSelection & { __args: {
    /** The customer to create. */
    input: CustomerCreateInput} })
    /** Updates a customer */
    customerUpdate?: (CustomerPayloadGenqlSelection & { __args: {
    /** The properties of the customer to update. */
    input: CustomerUpdateInput, 
    /** The identifier of the customer to update. */
    id: Scalars['String']} })
    /** Deletes a customer. */
    customerDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the customer to delete. */
    id: Scalars['String']} })
    /** Merges two customers. */
    customerMerge?: (CustomerPayloadGenqlSelection & { __args: {
    /** The ID of the customer to merge. The needs of this customer will be transferred before it gets deleted. */
    sourceCustomerId: Scalars['String'], 
    /** The ID of the target customer to merge into. The needs of this customer will be retained */
    targetCustomerId: Scalars['String']} })
    /** Upserts a customer, creating it if it doesn't exists, updating it otherwise. Matches against an existing customer with `id` or `externalId` */
    customerUpsert?: (CustomerPayloadGenqlSelection & { __args: {
    /** The customer to create. */
    input: CustomerUpsertInput} })
    /** Creates a new customer need. */
    customerNeedCreate?: (CustomerNeedPayloadGenqlSelection & { __args: {
    /** The customer need to create. */
    input: CustomerNeedCreateInput} })
    /** Creates a new customer need out of an attachment */
    customerNeedCreateFromAttachment?: (CustomerNeedPayloadGenqlSelection & { __args: {
    /** The customer need to create. */
    input: CustomerNeedCreateFromAttachmentInput} })
    /** Updates a customer need */
    customerNeedUpdate?: (CustomerNeedUpdatePayloadGenqlSelection & { __args: {
    /** The properties of the customer need to update. */
    input: CustomerNeedUpdateInput, 
    /** The identifier of the customer need to update. */
    id: Scalars['String']} })
    /** Deletes a customer need. */
    customerNeedDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** Whether to keep the attachment associated with the customer need. */
    keepAttachment?: (Scalars['Boolean'] | null), 
    /** The identifier of the customer need to delete. */
    id: Scalars['String']} })
    /** Archives a customer need. */
    customerNeedArchive?: (CustomerNeedArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the customer need to archive. */
    id: Scalars['String']} })
    /** Unarchives a customer need. */
    customerNeedUnarchive?: (CustomerNeedArchivePayloadGenqlSelection & { __args: {
    /** The identifier of the customer need to unarchive. */
    id: Scalars['String']} })
    /** Creates a new custom view. */
    customViewCreate?: (CustomViewPayloadGenqlSelection & { __args: {
    /** The properties of the custom view to create. */
    input: CustomViewCreateInput} })
    /** Updates a custom view. */
    customViewUpdate?: (CustomViewPayloadGenqlSelection & { __args: {
    /** The properties of the custom view to update. */
    input: CustomViewUpdateInput, 
    /** The identifier of the custom view to update. */
    id: Scalars['String']} })
    /** Deletes a custom view. */
    customViewDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the custom view to delete. */
    id: Scalars['String']} })
    /** Saves user message. */
    contactCreate?: (ContactPayloadGenqlSelection & { __args: {
    /** The contact entry to create. */
    input: ContactCreateInput} })
    /** [INTERNAL] Saves sales pricing inquiry to Front. */
    contactSalesCreate?: (ContactPayloadGenqlSelection & { __args: {
    /** The contact entry to create. */
    input: ContactSalesCreateInput} })
    /** Creates a new comment. */
    commentCreate?: (CommentPayloadGenqlSelection & { __args: {
    /** The comment object to create. */
    input: CommentCreateInput} })
    /** Updates a comment. */
    commentUpdate?: (CommentPayloadGenqlSelection & { __args: {
    /** A partial comment object to update the comment with. */
    input: CommentUpdateInput, 
    /** The identifier of the comment to update. */
    id: Scalars['String']} })
    /** Deletes a comment. */
    commentDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the comment to delete. */
    id: Scalars['String']} })
    /** Resolves a comment. */
    commentResolve?: (CommentPayloadGenqlSelection & { __args: {resolvingCommentId?: (Scalars['String'] | null), 
    /** The identifier of the comment to update. */
    id: Scalars['String']} })
    /** Unresolves a comment. */
    commentUnresolve?: (CommentPayloadGenqlSelection & { __args: {
    /** The identifier of the comment to update. */
    id: Scalars['String']} })
    /** Finds or creates a new user account by email and sends an email with token. */
    emailUserAccountAuthChallenge?: (EmailUserAccountAuthChallengeResponseGenqlSelection & { __args: {
    /** The data used for email authentication. */
    input: EmailUserAccountAuthChallengeInput} })
    /** Authenticates a user account via email and authentication token. */
    emailTokenUserAccountAuth?: (AuthResolverResponseGenqlSelection & { __args: {
    /** The data used for token authentication. */
    input: TokenUserAccountAuthInput} })
    /** Authenticates a user account via email and authentication token for SAML. */
    samlTokenUserAccountAuth?: (AuthResolverResponseGenqlSelection & { __args: {
    /** The data used for token authentication. */
    input: TokenUserAccountAuthInput} })
    /** Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow. */
    googleUserAccountAuth?: (AuthResolverResponseGenqlSelection & { __args: {
    /** The data used for Google authentication. */
    input: GoogleUserAccountAuthInput} })
    /** [INTERNAL] Starts passkey login process. */
    passkeyLoginStart?: (PasskeyLoginStartResponseGenqlSelection & { __args: {
    /** Random ID to start passkey login with. */
    authId: Scalars['String']} })
    /** [INTERNAL] Finish passkey login process. */
    passkeyLoginFinish?: (AuthResolverResponseGenqlSelection & { __args: {response: Scalars['JSONObject'], 
    /** Random ID to start passkey login with. */
    authId: Scalars['String']} })
    /** Creates an organization from onboarding. */
    createOrganizationFromOnboarding?: (CreateOrJoinOrganizationResponseGenqlSelection & { __args: {
    /** Onboarding survey. */
    survey?: (OnboardingCustomerSurvey | null), 
    /** Organization details for the new organization. */
    input: CreateOrganizationInput} })
    /** Join an organization from onboarding. */
    joinOrganizationFromOnboarding?: (CreateOrJoinOrganizationResponseGenqlSelection & { __args: {
    /** Organization details for the organization to join. */
    input: JoinOrganizationInput} })
    /** Leave an organization. */
    leaveOrganization?: (CreateOrJoinOrganizationResponseGenqlSelection & { __args: {
    /** ID of the organization to leave. */
    organizationId: Scalars['String']} })
    /** Logout the client. */
    logout?: (LogoutResponseGenqlSelection & { __args?: {
    /** The reason for logging out. */
    reason?: (Scalars['String'] | null)} })
    /** Logout an individual session with its ID. */
    logoutSession?: (LogoutResponseGenqlSelection & { __args: {
    /** ID of the session to logout. */
    sessionId: Scalars['String']} })
    /** Logout all of user's sessions including the active one. */
    logoutAllSessions?: (LogoutResponseGenqlSelection & { __args?: {
    /** The reason for logging out. */
    reason?: (Scalars['String'] | null)} })
    /** Logout all of user's sessions excluding the current one. */
    logoutOtherSessions?: (LogoutResponseGenqlSelection & { __args?: {
    /** The reason for logging out. */
    reason?: (Scalars['String'] | null)} })
    /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
    attachmentCreate?: (AttachmentPayloadGenqlSelection & { __args: {
    /** The attachment object to create. */
    input: AttachmentCreateInput} })
    /** Updates an existing issue attachment. */
    attachmentUpdate?: (AttachmentPayloadGenqlSelection & { __args: {
    /** A partial attachment object to update the attachment with. */
    input: AttachmentUpdateInput, 
    /** The identifier of the attachment to update. */
    id: Scalars['String']} })
    /** Link any url to an issue. */
    attachmentLinkURL?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The url to link. */
    url: Scalars['String'], 
    /** The issue for which to link the url. */
    issueId: Scalars['String'], 
    /** The id for the attachment. */
    id?: (Scalars['String'] | null)} })
    /** Link an existing GitLab MR to an issue. */
    attachmentLinkGitLabMR?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue for which to link the GitLab merge request. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The URL of the GitLab merge request to link. */
    url: Scalars['String'], 
    /** The path name to the project including any (sub)groups. E.g. linear/main/client. */
    projectPathWithNamespace: Scalars['String'], 
    /** The GitLab merge request number to link. */
    number: Scalars['Float']} })
    /** Link a GitHub issue to a Linear issue. */
    attachmentLinkGitHubIssue?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The Linear issue for which to link the GitHub issue. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The URL of the GitHub issue to link. */
    url: Scalars['String']} })
    /** Link a GitHub pull request to an issue. */
    attachmentLinkGitHubPR?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue for which to link the GitHub pull request. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The URL of the GitHub pull request to link. */
    url: Scalars['String'], 
    /** [Internal] The kind of link between the issue and the pull request. */
    linkKind?: (GitLinkKind | null)} })
    /** Link an existing Zendesk ticket to an issue. */
    attachmentLinkZendesk?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The Zendesk ticket ID to link. */
    ticketId: Scalars['String'], 
    /** The issue for which to link the Zendesk ticket. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The URL of the Zendesk ticket to link. */
    url?: (Scalars['String'] | null)} })
    /** Link an existing Discord message to an issue. */
    attachmentLinkDiscord?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue for which to link the Discord message. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The Discord channel ID for the message to link. */
    channelId: Scalars['String'], 
    /** The Discord message ID for the message to link. */
    messageId: Scalars['String'], 
    /** The Discord message URL for the message to link. */
    url: Scalars['String']} })
    /** Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue. */
    attachmentSyncToSlack?: (AttachmentPayloadGenqlSelection & { __args: {
    /** The ID of the Slack attachment to begin syncing. */
    id: Scalars['String']} })
    /** Link an existing Slack message to an issue. */
    attachmentLinkSlack?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue to which to link the Slack message. */
    issueId: Scalars['String'], 
    /** The Slack message URL for the message to link. */
    url: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** Whether to begin syncing the message's Slack thread with a comment thread on the issue. */
    syncToCommentThread?: (Scalars['Boolean'] | null)} })
    /** Link an existing Front conversation to an issue. */
    attachmentLinkFront?: (FrontAttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The Front conversation ID to link. */
    conversationId: Scalars['String'], 
    /** The issue for which to link the Front conversation. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null)} })
    /** Link an existing Intercom conversation to an issue. */
    attachmentLinkIntercom?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The Intercom conversation ID to link. */
    conversationId: Scalars['String'], 
    /** An optional Intercom conversation part ID to link to */
    partId?: (Scalars['String'] | null), 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The issue for which to link the Intercom conversation. */
    issueId: Scalars['String']} })
    /** Link an existing Jira issue to an issue. */
    attachmentLinkJiraIssue?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue for which to link the Jira issue. */
    issueId: Scalars['String'], 
    /** The Jira issue key or ID to link. */
    jiraIssueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** Optional fallback URL to use if the Jira issue cannot be found. */
    url?: (Scalars['String'] | null)} })
    /** Link an existing Salesforce case to an issue. */
    attachmentLinkSalesforce?: (AttachmentPayloadGenqlSelection & { __args: {
    /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=app` mode. */
    createAsUser?: (Scalars['String'] | null), 
    /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
    displayIconUrl?: (Scalars['String'] | null), 
    /** The title to use for the attachment. */
    title?: (Scalars['String'] | null), 
    /** The issue for which to link the Salesforce case. */
    issueId: Scalars['String'], 
    /** Optional attachment ID that may be provided through the API. */
    id?: (Scalars['String'] | null), 
    /** The URL of the Salesforce case to link. */
    url: Scalars['String']} })
    /** Deletes an issue attachment. */
    attachmentDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the attachment to delete. */
    id: Scalars['String']} })
    /** [INTERNAL] Creates a new API key. */
    apiKeyCreate?: (ApiKeyPayloadGenqlSelection & { __args: {
    /** The api key object to create. */
    input: ApiKeyCreateInput} })
    /** [INTERNAL] Deletes an API key. */
    apiKeyDelete?: (DeletePayloadGenqlSelection & { __args: {
    /** The identifier of the API key to delete. */
    id: Scalars['String']} })
    /** [INTERNAL] Updates an API key's allowed teams. */
    apiKeyUpdate?: (ApiKeyPayloadGenqlSelection & { __args: {
    /** The update input. */
    input: ApiKeyUpdateInput, 
    /** The identifier of the API key to update. */
    id: Scalars['String']} })
    /** Creates an agent context. */
    agentContextCreate?: (AgentContextPayloadGenqlSelection & { __args: {
    /** The agent context object to create. */
    input: AgentContextCreateInput} })
    /** Updates an agent context. */
    agentContextUpdate?: (AgentContextPayloadGenqlSelection & { __args: {
    /** The agent context object to update. */
    input: AgentContextUpdateInput, 
    /** The identifier of the agent context to update. */
    id: Scalars['String']} })
    /** Creates an agent activity. */
    agentActivityCreate?: (AgentActivityPayloadGenqlSelection & { __args: {
    /** The agent activity object to create. */
    input: AgentActivityCreateInput} })
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WorkflowStatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The state that was created or updated. */
    workflowState?: WorkflowStateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WorkflowStateCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The workflow type. */
type: Scalars['String'],
/** The name of the state. */
name: Scalars['String'],
/** The color of the state. */
color: Scalars['String'],
/** The description of the state. */
description?: (Scalars['String'] | null),
/** The position of the state. */
position?: (Scalars['Float'] | null),
/** The team associated with the state. */
teamId: Scalars['String']}

export interface WorkflowStateUpdateInput {
/** The name of the state. */
name?: (Scalars['String'] | null),
/** The color of the state. */
color?: (Scalars['String'] | null),
/** The description of the state. */
description?: (Scalars['String'] | null),
/** The position of the state. */
position?: (Scalars['Float'] | null)}


/** A generic payload return from entity archive mutations. */
export interface WorkflowStateArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: WorkflowStateGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A generic payload return from entity archive or deletion mutations. */
export interface ArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    on_WorkflowStateArchivePayload?: WorkflowStateArchivePayloadGenqlSelection
    on_DeletePayload?: DeletePayloadGenqlSelection
    on_ProjectArchivePayload?: ProjectArchivePayloadGenqlSelection
    on_TeamArchivePayload?: TeamArchivePayloadGenqlSelection
    on_RoadmapArchivePayload?: RoadmapArchivePayloadGenqlSelection
    on_ProjectUpdateArchivePayload?: ProjectUpdateArchivePayloadGenqlSelection
    on_ProjectStatusArchivePayload?: ProjectStatusArchivePayloadGenqlSelection
    on_NotificationArchivePayload?: NotificationArchivePayloadGenqlSelection
    on_IssueArchivePayload?: IssueArchivePayloadGenqlSelection
    on_InitiativeUpdateArchivePayload?: InitiativeUpdateArchivePayloadGenqlSelection
    on_InitiativeArchivePayload?: InitiativeArchivePayloadGenqlSelection
    on_DocumentArchivePayload?: DocumentArchivePayloadGenqlSelection
    on_CycleArchivePayload?: CycleArchivePayloadGenqlSelection
    on_CustomerNeedArchivePayload?: CustomerNeedArchivePayloadGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WebhookPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The webhook entity being mutated. */
    webhook?: WebhookGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface WebhookCreateInput {
/** Label for the webhook. */
label?: (Scalars['String'] | null),
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** Whether this webhook is enabled. */
enabled?: (Scalars['Boolean'] | null),
/** A secret token used to sign the webhook payload. */
secret?: (Scalars['String'] | null),
/** The URL that will be called on data changes. */
url: Scalars['String'],
/** List of resources the webhook should subscribe to. */
resourceTypes: Scalars['String'][],
/** The identifier or key of the team associated with the Webhook. */
teamId?: (Scalars['String'] | null),
/** Whether this webhook is enabled for all public teams. */
allPublicTeams?: (Scalars['Boolean'] | null)}

export interface WebhookUpdateInput {
/** Label for the webhook. */
label?: (Scalars['String'] | null),
/** A secret token used to sign the webhook payload. */
secret?: (Scalars['String'] | null),
/** Whether this webhook is enabled. */
enabled?: (Scalars['Boolean'] | null),
/** The URL that will be called on data changes. */
url?: (Scalars['String'] | null),
/** List of resources the webhook should subscribe to. */
resourceTypes?: (Scalars['String'][] | null)}


/** A generic payload return from entity deletion mutations. */
export interface DeletePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The identifier of the deleted entity. */
    entityId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ViewPreferencesPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The view preferences entity being mutated. */
    viewPreferences?: ViewPreferencesGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ViewPreferencesCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The type of view preferences (either user or organization level preferences). */
type: ViewPreferencesType,
/** The view type of the view preferences are associated with. */
viewType: ViewType,
/** View preferences object. */
preferences: Scalars['JSONObject'],
/** The default parameters for the insight on that view. */
insights?: (Scalars['JSONObject'] | null),
/** The team these view preferences are associated with. */
teamId?: (Scalars['String'] | null),
/** The project these view preferences are associated with. */
projectId?: (Scalars['String'] | null),
/** The roadmap these view preferences are associated with. */
roadmapId?: (Scalars['String'] | null),
/** [Internal] The initiative these view preferences are associated with. */
initiativeId?: (Scalars['String'] | null),
/** The label these view preferences are associated with. */
labelId?: (Scalars['String'] | null),
/** [Internal] The project label these view preferences are associated with. */
projectLabelId?: (Scalars['String'] | null),
/** The custom view these view preferences are associated with. */
customViewId?: (Scalars['String'] | null),
/** The user profile these view preferences are associated with. */
userId?: (Scalars['String'] | null)}

export interface ViewPreferencesUpdateInput {
/** View preferences. */
preferences?: (Scalars['JSONObject'] | null),
/** The default parameters for the insight on that view. */
insights?: (Scalars['JSONObject'] | null)}

export interface UserSettingsPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The user's settings. */
    userSettings?: UserSettingsGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserSettingsUpdateInput {
/** The user's settings. */
settings?: (Scalars['JSONObject'] | null),
/** Whether this user is subscribed to changelog email or not. */
subscribedToChangelog?: (Scalars['Boolean'] | null),
/** Whether this user is subscribed to DPA emails or not. */
subscribedToDPA?: (Scalars['Boolean'] | null),
/** Whether this user is subscribed to invite accepted emails or not. */
subscribedToInviteAccepted?: (Scalars['Boolean'] | null),
/** Whether this user is subscribed to privacy and legal update emails or not. */
subscribedToPrivacyLegalUpdates?: (Scalars['Boolean'] | null),
/** The user's notification category preferences. */
notificationCategoryPreferences?: (NotificationCategoryPreferencesInput | null),
/** The user's notification channel preferences. */
notificationChannelPreferences?: (PartialNotificationChannelPreferencesInput | null),
/** The user's notification delivery preferences. */
notificationDeliveryPreferences?: (NotificationDeliveryPreferencesInput | null),
/** [Internal] The user's usage warning history. */
usageWarningHistory?: (Scalars['JSONObject'] | null),
/** [Internal] How often to generate a feed summary. */
feedSummarySchedule?: (FeedSummarySchedule | null)}

export interface NotificationCategoryPreferencesInput {
/** The preferences for notifications about assignments. */
assignments?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about status changes. */
statusChanges?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about comments and replies. */
commentsAndReplies?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about mentions. */
mentions?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about reactions. */
reactions?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about subscriptions. */
subscriptions?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about document changes. */
documentChanges?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about posts and updates. */
postsAndUpdates?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about reminders. */
reminders?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about reviews. */
reviews?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about apps and integrations. */
appsAndIntegrations?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about triage. */
triage?: (PartialNotificationChannelPreferencesInput | null),
/** The preferences for notifications about customers. */
customers?: (PartialNotificationChannelPreferencesInput | null)}

export interface PartialNotificationChannelPreferencesInput {
/** Whether notifications are currently enabled for mobile. */
mobile?: (Scalars['Boolean'] | null),
/** Whether notifications are currently enabled for desktop. */
desktop?: (Scalars['Boolean'] | null),
/** Whether notifications are currently enabled for email. */
email?: (Scalars['Boolean'] | null),
/** Whether notifications are currently enabled for Slack. */
slack?: (Scalars['Boolean'] | null)}

export interface NotificationDeliveryPreferencesInput {
/** The delivery preferences for the mobile channel. */
mobile?: (NotificationDeliveryPreferencesChannelInput | null)}

export interface NotificationDeliveryPreferencesChannelInput {
/** The schedule for notifications on this channel. */
schedule?: (NotificationDeliveryPreferencesScheduleInput | null)}

export interface NotificationDeliveryPreferencesScheduleInput {
/** Whether the schedule is disabled. */
disabled?: (Scalars['Boolean'] | null),
/** Delivery preferences for Sunday. */
sunday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Monday. */
monday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Tuesday. */
tuesday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Wednesday. */
wednesday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Thursday. */
thursday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Friday. */
friday: NotificationDeliveryPreferencesDayInput,
/** Delivery preferences for Saturday. */
saturday: NotificationDeliveryPreferencesDayInput}

export interface NotificationDeliveryPreferencesDayInput {
/** The time notifications start. */
start?: (Scalars['String'] | null),
/** The time notifications end. */
end?: (Scalars['String'] | null)}

export interface UserSettingsFlagsResetPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserSettingsFlagPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The flag key which was updated. */
    flag?: boolean | number
    /** The flag value after update. */
    value?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The user that was created or updated. */
    user?: UserGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UserUpdateInput {
/** The name of the user. */
name?: (Scalars['String'] | null),
/** The display name of the user. */
displayName?: (Scalars['String'] | null),
/** The avatar image URL of the user. */
avatarUrl?: (Scalars['String'] | null),
/** The user description or a short bio. */
description?: (Scalars['String'] | null),
/** The emoji part of the user status. */
statusEmoji?: (Scalars['String'] | null),
/** The label part of the user status. */
statusLabel?: (Scalars['String'] | null),
/** When the user status should be cleared. */
statusUntilAt?: (Scalars['DateTime'] | null),
/** The local timezone of the user. */
timezone?: (Scalars['String'] | null)}

export interface UserAdminPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TriageResponsibilityPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    triageResponsibility?: TriageResponsibilityGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TriageResponsibilityCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the team associated with the triage responsibility. */
teamId: Scalars['String'],
/** The action to take when an issue is added to triage. */
action: Scalars['String'],
/** The manual selection of users responsible for triage. */
manualSelection?: (TriageResponsibilityManualSelectionInput | null),
/** The identifier of the time schedule used for scheduling triage responsibility */
timeScheduleId?: (Scalars['String'] | null)}


/** Manual triage responsibility using a set of users. */
export interface TriageResponsibilityManualSelectionInput {
/** The set of users responsible for triage. */
userIds: Scalars['String'][],
/** [Internal] The index of the current userId used for the assign action when having more than one user. */
assignmentIndex?: (Scalars['Int'] | null)}

export interface TriageResponsibilityUpdateInput {
/** The action to take when an issue is added to triage. */
action?: (Scalars['String'] | null),
/** The manual selection of users responsible for triage. */
manualSelection?: (TriageResponsibilityManualSelectionInput | null),
/** The identifier of the time schedule used for scheduling triage responsibility. */
timeScheduleId?: (Scalars['String'] | null)}

export interface TimeSchedulePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    timeSchedule?: TimeScheduleGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TimeScheduleCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the schedule. */
name: Scalars['String'],
/** The schedule entries. */
entries: TimeScheduleEntryInput[],
/** The unique identifier of the external schedule. */
externalId?: (Scalars['String'] | null),
/** The URL to the external schedule. */
externalUrl?: (Scalars['String'] | null)}

export interface TimeScheduleEntryInput {
/** The start date of the schedule in ISO 8601 date-time format. */
startsAt: Scalars['DateTime'],
/** The end date of the schedule in ISO 8601 date-time format. */
endsAt: Scalars['DateTime'],
/** The Linear user id of the user on schedule. If the user cannot be mapped to a Linear user then `userEmail` can be used as a reference. */
userId?: (Scalars['String'] | null),
/** The email, name or reference to the user on schedule. This is used in case the external user could not be mapped to a Linear user id. */
userEmail?: (Scalars['String'] | null)}

export interface TimeScheduleUpdateInput {
/** The name of the schedule. */
name?: (Scalars['String'] | null),
/** The schedule entries. */
entries?: (TimeScheduleEntryInput[] | null),
/** The unique identifier of the external schedule. */
externalId?: (Scalars['String'] | null),
/** The URL to the external schedule. */
externalUrl?: (Scalars['String'] | null)}

export interface TemplatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The template that was created or updated. */
    template?: TemplateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TemplateCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The template type, e.g. 'issue'. */
type: Scalars['String'],
/** The identifier or key of the team associated with the template. If not given, the template will be shared across all teams. */
teamId?: (Scalars['String'] | null),
/** The template name. */
name: Scalars['String'],
/** The template description. */
description?: (Scalars['String'] | null),
/** The template data as JSON encoded attributes of the type of entity, such as an issue. */
templateData: Scalars['JSON'],
/** The position of the template in the templates list. */
sortOrder?: (Scalars['Float'] | null)}

export interface TemplateUpdateInput {
/** The template name. */
name?: (Scalars['String'] | null),
/** The template description. */
description?: (Scalars['String'] | null),
/** The identifier or key of the team associated with the template. If set to null, the template will be shared across all teams. */
teamId?: (Scalars['String'] | null),
/** The template data as JSON encoded attributes of the type of entity, such as an issue. */
templateData?: (Scalars['JSON'] | null),
/** The position of the template in the templates list. */
sortOrder?: (Scalars['Float'] | null)}

export interface ProjectPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project that was created or updated. */
    project?: ProjectGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the project. */
name: Scalars['String'],
/** The icon of the project. */
icon?: (Scalars['String'] | null),
/** The color of the project. */
color?: (Scalars['String'] | null),
/** The ID of the project status. */
statusId?: (Scalars['String'] | null),
/** The description for the project. */
description?: (Scalars['String'] | null),
/** The project content as markdown. */
content?: (Scalars['String'] | null),
/** The identifiers of the teams this project is associated with. */
teamIds: Scalars['String'][],
/** The ID of the issue from which that project is created. */
convertedFromIssueId?: (Scalars['String'] | null),
/** The ID of the last template applied to the project. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The identifier of the project lead. */
leadId?: (Scalars['String'] | null),
/** The identifiers of the members of this project. */
memberIds?: (Scalars['String'][] | null),
/** The planned start date of the project. */
startDate?: (Scalars['TimelessDate'] | null),
/** The resolution of the project's start date. */
startDateResolution?: (DateResolutionType | null),
/** The planned target date of the project. */
targetDate?: (Scalars['TimelessDate'] | null),
/** The resolution of the project's estimated completion date. */
targetDateResolution?: (DateResolutionType | null),
/** The sort order for the project within shared views. */
sortOrder?: (Scalars['Float'] | null),
/** The sort order for the project within shared views, when ordered by priority. */
prioritySortOrder?: (Scalars['Float'] | null),
/** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
priority?: (Scalars['Int'] | null),
/** [Internal]The identifiers of the project labels associated with this project. */
labelIds?: (Scalars['String'][] | null)}

export interface ProjectUpdateInput {
/** The ID of the project status. */
statusId?: (Scalars['String'] | null),
/** The name of the project. */
name?: (Scalars['String'] | null),
/** The description for the project. */
description?: (Scalars['String'] | null),
/** The project content as markdown. */
content?: (Scalars['String'] | null),
/** The ID of the issue from which that project is created. */
convertedFromIssueId?: (Scalars['String'] | null),
/** The ID of the last template applied to the project. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The icon of the project. */
icon?: (Scalars['String'] | null),
/** The color of the project. */
color?: (Scalars['String'] | null),
/** The identifiers of the teams this project is associated with. */
teamIds?: (Scalars['String'][] | null),
/** The time until which project update reminders are paused. */
projectUpdateRemindersPausedUntilAt?: (Scalars['DateTime'] | null),
/** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
updateReminderFrequencyInWeeks?: (Scalars['Float'] | null),
/** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
updateReminderFrequency?: (Scalars['Float'] | null),
/** The frequency resolution. */
frequencyResolution?: (FrequencyResolutionType | null),
/** The day at which to prompt for updates. */
updateRemindersDay?: (Day | null),
/** The hour at which to prompt for updates. */
updateRemindersHour?: (Scalars['Int'] | null),
/** The identifier of the project lead. */
leadId?: (Scalars['String'] | null),
/** The identifiers of the members of this project. */
memberIds?: (Scalars['String'][] | null),
/** The planned start date of the project. */
startDate?: (Scalars['TimelessDate'] | null),
/** The resolution of the project's start date. */
startDateResolution?: (DateResolutionType | null),
/** The planned target date of the project. */
targetDate?: (Scalars['TimelessDate'] | null),
/** The resolution of the project's estimated completion date. */
targetDateResolution?: (DateResolutionType | null),
/** The date when the project was completed. */
completedAt?: (Scalars['DateTime'] | null),
/** The date when the project was canceled. */
canceledAt?: (Scalars['DateTime'] | null),
/** Whether to send new issue notifications to Slack. */
slackNewIssue?: (Scalars['Boolean'] | null),
/** Whether to send new issue comment notifications to Slack. */
slackIssueComments?: (Scalars['Boolean'] | null),
/** Whether to send issue status update notifications to Slack. */
slackIssueStatuses?: (Scalars['Boolean'] | null),
/** The sort order for the project in shared views. */
sortOrder?: (Scalars['Float'] | null),
/** The sort order for the project within shared views, when ordered by priority. */
prioritySortOrder?: (Scalars['Float'] | null),
/** Whether the project has been trashed. */
trashed?: (Scalars['Boolean'] | null),
/** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
priority?: (Scalars['Int'] | null),
/** [Internal] The identifiers of the project labels associated with this project. */
labelIds?: (Scalars['String'][] | null)}

export interface SuccessPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A generic payload return from entity archive mutations. */
export interface ProjectArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: ProjectGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The team that was created or updated. */
    team?: TeamGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the team. */
name: Scalars['String'],
/** The description of the team. */
description?: (Scalars['String'] | null),
/** The key of the team. If not given, the key will be generated based on the name of the team. */
key?: (Scalars['String'] | null),
/** The icon of the team. */
icon?: (Scalars['String'] | null),
/** The color of the team. */
color?: (Scalars['String'] | null),
/** Whether the team uses cycles. */
cyclesEnabled?: (Scalars['Boolean'] | null),
/** The day of the week that a new cycle starts. */
cycleStartDay?: (Scalars['Float'] | null),
/** The duration of each cycle in weeks. */
cycleDuration?: (Scalars['Int'] | null),
/** The cooldown time after each cycle in weeks. */
cycleCooldownTime?: (Scalars['Int'] | null),
/** Auto assign started issues to current active cycle setting. */
cycleIssueAutoAssignStarted?: (Scalars['Boolean'] | null),
/** Auto assign completed issues to current active cycle setting. */
cycleIssueAutoAssignCompleted?: (Scalars['Boolean'] | null),
/** Only allow issues issues with cycles in Active Issues. */
cycleLockToActive?: (Scalars['Boolean'] | null),
/** How many upcoming cycles to create. */
upcomingCycleCount?: (Scalars['Float'] | null),
/** Whether triage mode is enabled for the team. */
triageEnabled?: (Scalars['Boolean'] | null),
/** Whether an issue needs to have a priority set before leaving triage. */
requirePriorityToLeaveTriage?: (Scalars['Boolean'] | null),
/** The timezone of the team. */
timezone?: (Scalars['String'] | null),
/** Whether the team should inherit estimation settings from its parent. Only applies to sub-teams. */
inheritIssueEstimation?: (Scalars['Boolean'] | null),
/** [Internal] Whether the team should inherit workflow statuses from its parent. */
inheritWorkflowStatuses?: (Scalars['Boolean'] | null),
/** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
issueEstimationType?: (Scalars['String'] | null),
/** Whether to allow zeros in issues estimates. */
issueEstimationAllowZero?: (Scalars['Boolean'] | null),
/** Whether to move issues to bottom of the column when changing state. */
setIssueSortOrderOnStateChange?: (Scalars['String'] | null),
/** Whether to add additional points to the estimate scale. */
issueEstimationExtended?: (Scalars['Boolean'] | null),
/** What to use as an default estimate for unestimated issues. */
defaultIssueEstimate?: (Scalars['Float'] | null),
/** Whether to group recent issue history entries. */
groupIssueHistory?: (Scalars['Boolean'] | null),
/** The identifier of the default template for members of this team. */
defaultTemplateForMembersId?: (Scalars['String'] | null),
/** The identifier of the default template for non-members of this team. */
defaultTemplateForNonMembersId?: (Scalars['String'] | null),
/** The identifier of the default project template of this team. */
defaultProjectTemplateId?: (Scalars['String'] | null),
/** Internal. Whether the team is private or not. */
private?: (Scalars['Boolean'] | null),
/** Period after which issues are automatically closed, in months. */
autoClosePeriod?: (Scalars['Float'] | null),
/** The canceled workflow state which auto closed issues will be set to. */
autoCloseStateId?: (Scalars['String'] | null),
/** Period after which closed and completed issues are automatically archived, in months. 0 means disabled. */
autoArchivePeriod?: (Scalars['Float'] | null),
/** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
markedAsDuplicateWorkflowStateId?: (Scalars['String'] | null),
/** The parent team ID. */
parentId?: (Scalars['String'] | null),
/** [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams. */
inheritProductIntelligenceScope?: (Scalars['Boolean'] | null),
/** [Internal] The scope of product intelligence suggestion data for the team. */
productIntelligenceScope?: (ProductIntelligenceScope | null)}

export interface InheritanceEntityMapping {
/** Mapping of the WorkflowState ID to the new WorkflowState ID. */
workflowStates: Scalars['JSONObject'],
/** Mapping of the IssueLabel ID to the new IssueLabel name. */
issueLabels?: (Scalars['JSONObject'] | null)}

export interface TeamUpdateInput {
/** The name of the team. */
name?: (Scalars['String'] | null),
/** The description of the team. */
description?: (Scalars['String'] | null),
/** The key of the team. */
key?: (Scalars['String'] | null),
/** The icon of the team. */
icon?: (Scalars['String'] | null),
/** The color of the team. */
color?: (Scalars['String'] | null),
/** Whether the team uses cycles. */
cyclesEnabled?: (Scalars['Boolean'] | null),
/** The day of the week that a new cycle starts. */
cycleStartDay?: (Scalars['Float'] | null),
/** The duration of each cycle in weeks. */
cycleDuration?: (Scalars['Int'] | null),
/** The cooldown time after each cycle in weeks. */
cycleCooldownTime?: (Scalars['Int'] | null),
/** Auto assign started issues to current active cycle setting. */
cycleIssueAutoAssignStarted?: (Scalars['Boolean'] | null),
/** Auto assign completed issues to current active cycle setting. */
cycleIssueAutoAssignCompleted?: (Scalars['Boolean'] | null),
/** Only allow issues with cycles in Active Issues. */
cycleLockToActive?: (Scalars['Boolean'] | null),
/** The date to begin cycles on. */
cycleEnabledStartDate?: (Scalars['DateTime'] | null),
/** How many upcoming cycles to create. */
upcomingCycleCount?: (Scalars['Float'] | null),
/** The timezone of the team. */
timezone?: (Scalars['String'] | null),
/** Whether the team should inherit estimation settings from its parent. Only applies to sub-teams. */
inheritIssueEstimation?: (Scalars['Boolean'] | null),
/** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
issueEstimationType?: (Scalars['String'] | null),
/** Whether to allow zeros in issues estimates. */
issueEstimationAllowZero?: (Scalars['Boolean'] | null),
/** Whether to move issues to bottom of the column when changing state. */
setIssueSortOrderOnStateChange?: (Scalars['String'] | null),
/** Whether to add additional points to the estimate scale. */
issueEstimationExtended?: (Scalars['Boolean'] | null),
/** What to use as an default estimate for unestimated issues. */
defaultIssueEstimate?: (Scalars['Float'] | null),
/** Whether to send new issue notifications to Slack. */
slackNewIssue?: (Scalars['Boolean'] | null),
/** Whether to send new issue comment notifications to Slack. */
slackIssueComments?: (Scalars['Boolean'] | null),
/** Whether to send issue status update notifications to Slack. */
slackIssueStatuses?: (Scalars['Boolean'] | null),
/** Whether to group recent issue history entries. */
groupIssueHistory?: (Scalars['Boolean'] | null),
/** Whether to enable resolved thread AI summaries. */
aiThreadSummariesEnabled?: (Scalars['Boolean'] | null),
/** The identifier of the default template for members of this team. */
defaultTemplateForMembersId?: (Scalars['String'] | null),
/** The identifier of the default template for non-members of this team. */
defaultTemplateForNonMembersId?: (Scalars['String'] | null),
/** The identifier of the default project template of this team. */
defaultProjectTemplateId?: (Scalars['String'] | null),
/** Whether the team is private or not. */
private?: (Scalars['Boolean'] | null),
/** Whether triage mode is enabled for the team. */
triageEnabled?: (Scalars['Boolean'] | null),
/** Whether an issue needs to have a priority set before leaving triage. */
requirePriorityToLeaveTriage?: (Scalars['Boolean'] | null),
/** Default status for newly created issues. */
defaultIssueStateId?: (Scalars['String'] | null),
/** Period after which issues are automatically closed, in months. */
autoClosePeriod?: (Scalars['Float'] | null),
/** The canceled workflow state which auto closed issues will be set to. */
autoCloseStateId?: (Scalars['String'] | null),
/** [INTERNAL] Whether to automatically close a parent issue in this team if all its sub-issues are closed. */
autoCloseParentIssues?: (Scalars['Boolean'] | null),
/** [INTERNAL] Whether to automatically close all sub-issues when a parent issue in this team is closed. */
autoCloseChildIssues?: (Scalars['Boolean'] | null),
/** Period after which closed and completed issues are automatically archived, in months. */
autoArchivePeriod?: (Scalars['Float'] | null),
/** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
markedAsDuplicateWorkflowStateId?: (Scalars['String'] | null),
/** Whether new users should join this team by default. Mutation restricted to workspace admins! */
joinByDefault?: (Scalars['Boolean'] | null),
/** Whether the team is managed by SCIM integration. Mutation restricted to workspace admins and only unsetting is allowed! */
scimManaged?: (Scalars['Boolean'] | null),
/** The parent team ID. */
parentId?: (Scalars['String'] | null),
/** [Internal] Whether the team should inherit workflow statuses from its parent. */
inheritWorkflowStatuses?: (Scalars['Boolean'] | null),
/** [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams. */
inheritProductIntelligenceScope?: (Scalars['Boolean'] | null),
/** [Internal] The scope of product intelligence suggestion data for the team. */
productIntelligenceScope?: (ProductIntelligenceScope | null)}


/** A generic payload return from entity archive mutations. */
export interface TeamArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: TeamGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamMembershipPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The team membership that was created or updated. */
    teamMembership?: TeamMembershipGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface TeamMembershipCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the user associated with the membership. */
userId: Scalars['String'],
/** The identifier of the team associated with the membership. */
teamId: Scalars['String'],
/** Internal. Whether the user is the owner of the team. */
owner?: (Scalars['Boolean'] | null),
/** The position of the item in the users list. */
sortOrder?: (Scalars['Float'] | null)}

export interface TeamMembershipUpdateInput {
/** Internal. Whether the user is the owner of the team. */
owner?: (Scalars['Boolean'] | null),
/** The position of the item in the users list. */
sortOrder?: (Scalars['Float'] | null)}

export interface RoadmapToProjectPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The roadmapToProject that was created or updated. */
    roadmapToProject?: RoadmapToProjectGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapToProjectCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the project. */
projectId: Scalars['String'],
/** The identifier of the roadmap. */
roadmapId: Scalars['String'],
/** The sort order for the project within its organization. */
sortOrder?: (Scalars['Float'] | null)}

export interface RoadmapToProjectUpdateInput {
/** The sort order for the project within its organization. */
sortOrder?: (Scalars['Float'] | null)}

export interface RoadmapPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The roadmap that was created or updated. */
    roadmap?: RoadmapGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface RoadmapCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the roadmap. */
name: Scalars['String'],
/** The description of the roadmap. */
description?: (Scalars['String'] | null),
/** The owner of the roadmap. */
ownerId?: (Scalars['String'] | null),
/** The sort order of the roadmap within the organization. */
sortOrder?: (Scalars['Float'] | null),
/** The roadmap's color. */
color?: (Scalars['String'] | null)}

export interface RoadmapUpdateInput {
/** The name of the roadmap. */
name?: (Scalars['String'] | null),
/** The description of the roadmap. */
description?: (Scalars['String'] | null),
/** The owner of the roadmap. */
ownerId?: (Scalars['String'] | null),
/** The sort order of the roadmap within the organization. */
sortOrder?: (Scalars['Float'] | null),
/** The roadmap's color. */
color?: (Scalars['String'] | null)}


/** A generic payload return from entity archive mutations. */
export interface RoadmapArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: RoadmapGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CreateCsvExportReportPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ReactionPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    reaction?: ReactionGenqlSelection
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ReactionCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The emoji the user reacted with. */
emoji: Scalars['String'],
/** The comment to associate the reaction with. */
commentId?: (Scalars['String'] | null),
/** The project update to associate the reaction with. */
projectUpdateId?: (Scalars['String'] | null),
/** The update to associate the reaction with. */
initiativeUpdateId?: (Scalars['String'] | null),
/** The issue to associate the reaction with. */
issueId?: (Scalars['String'] | null),
/** [Internal] The post to associate the reaction with. */
postId?: (Scalars['String'] | null),
/** [Internal] The pull request to associate the reaction with. */
pullRequestId?: (Scalars['String'] | null),
/** [Internal] The pull request comment to associate the reaction with. */
pullRequestCommentId?: (Scalars['String'] | null)}

export interface PushSubscriptionPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The push subscription that was created or updated. */
    entity?: PushSubscriptionGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** A user's web or mobile push notification subscription. */
export interface PushSubscriptionGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface PushSubscriptionCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The data of the subscription in stringified JSON format. */
data: Scalars['String'],
/** Whether this is a subscription payload for Google Cloud Messaging or Apple Push Notification service. */
type?: (PushSubscriptionType | null)}

export interface ProjectUpdatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project update that was created or updated. */
    projectUpdate?: ProjectUpdateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectUpdateCreateInput {
/** The identifier. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The content of the project update in markdown format. */
body?: (Scalars['String'] | null),
/** [Internal] The content of the project update as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** The project to associate the project update with. */
projectId: Scalars['String'],
/** The health of the project at the time of the update. */
health?: (ProjectUpdateHealthType | null),
/** Whether the diff between the current update and the previous one should be hidden. */
isDiffHidden?: (Scalars['Boolean'] | null)}

export interface ProjectUpdateUpdateInput {
/** The content of the project update in markdown format. */
body?: (Scalars['String'] | null),
/** The content of the project update as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** The health of the project at the time of the update. */
health?: (ProjectUpdateHealthType | null),
/** Whether the diff between the current update and the previous one should be hidden. */
isDiffHidden?: (Scalars['Boolean'] | null)}


/** A generic payload return from entity archive mutations. */
export interface ProjectUpdateArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: ProjectUpdateGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectUpdateReminderPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectStatusPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project status that was created or updated. */
    status?: ProjectStatusGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectStatusCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the status. */
name: Scalars['String'],
/** The UI color of the status as a HEX string. */
color: Scalars['String'],
/** Description of the status. */
description?: (Scalars['String'] | null),
/** The position of the status in the workspace's project flow. */
position: Scalars['Float'],
/** The type of the project status. */
type: ProjectStatusType,
/** Whether or not a project can be in this status indefinitely. */
indefinite?: (Scalars['Boolean'] | null)}

export interface ProjectStatusUpdateInput {
/** The name of the status. */
name?: (Scalars['String'] | null),
/** The UI color of the status as a HEX string. */
color?: (Scalars['String'] | null),
/** Description of the status. */
description?: (Scalars['String'] | null),
/** The position of the status in the workspace's project flow. */
position?: (Scalars['Float'] | null),
/** The type of the project status. */
type?: (ProjectStatusType | null),
/** Whether or not a project can be in this status indefinitely. */
indefinite?: (Scalars['Boolean'] | null)}


/** A generic payload return from entity archive mutations. */
export interface ProjectStatusArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: ProjectStatusGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectRelationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project relation that was created or updated. */
    projectRelation?: ProjectRelationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectRelationCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The type of relation of the project to the related project. */
type: Scalars['String'],
/** The identifier of the project that is related to another project. */
projectId: Scalars['String'],
/** The identifier of the project milestone. */
projectMilestoneId?: (Scalars['String'] | null),
/** The type of the anchor for the project. */
anchorType: Scalars['String'],
/** The identifier of the related project. */
relatedProjectId: Scalars['String'],
/** The identifier of the related project milestone. */
relatedProjectMilestoneId?: (Scalars['String'] | null),
/** The type of the anchor for the related project. */
relatedAnchorType: Scalars['String']}

export interface ProjectRelationUpdateInput {
/** The type of relation of the project to the related project. */
type?: (Scalars['String'] | null),
/** The identifier of the project that is related to another project. */
projectId?: (Scalars['String'] | null),
/** The identifier of the project milestone. */
projectMilestoneId?: (Scalars['String'] | null),
/** The type of the anchor for the project. */
anchorType?: (Scalars['String'] | null),
/** The identifier of the related project. */
relatedProjectId?: (Scalars['String'] | null),
/** The identifier of the related project milestone. */
relatedProjectMilestoneId?: (Scalars['String'] | null),
/** The type of the anchor for the related project. */
relatedAnchorType?: (Scalars['String'] | null)}

export interface ProjectMilestonePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project milestone that was created or updated. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the project milestone. */
name: Scalars['String'],
/** The description of the project milestone in markdown format. */
description?: (Scalars['String'] | null),
/** [Internal] The description of the project milestone as a Prosemirror document. */
descriptionData?: (Scalars['JSONObject'] | null),
/** The planned target date of the project milestone. */
targetDate?: (Scalars['TimelessDate'] | null),
/** Related project for the project milestone. */
projectId: Scalars['String'],
/** The sort order for the project milestone within a project. */
sortOrder?: (Scalars['Float'] | null)}

export interface ProjectMilestoneUpdateInput {
/** The name of the project milestone. */
name?: (Scalars['String'] | null),
/** The description of the project milestone in markdown format. */
description?: (Scalars['String'] | null),
/** [Internal] The description of the project milestone as a Prosemirror document. */
descriptionData?: (Scalars['JSONObject'] | null),
/** The planned target date of the project milestone. */
targetDate?: (Scalars['TimelessDate'] | null),
/** The sort order for the project milestone within a project. */
sortOrder?: (Scalars['Float'] | null),
/** Related project for the project milestone. */
projectId?: (Scalars['String'] | null)}

export interface ProjectMilestoneMovePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The project milestone that was created or updated. */
    projectMilestone?: ProjectMilestoneGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** A snapshot of the issues that were moved to new teams, if the user selected to do it, containing an array of mappings between an issue and its previous team. Store on the client to use for undoing a previous milestone move. */
    previousIssueTeamIds?: ProjectMilestoneMoveIssueToTeamGenqlSelection
    /** A snapshot of the project that had new teams added to it, if the user selected to do it, containing an array of mappings between a project and its previous teams. Store on the client to use for undoing a previous milestone move. */
    previousProjectTeamIds?: ProjectMilestoneMoveProjectTeamsGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneMoveIssueToTeamGenqlSelection{
    /** The issue id in this relationship, you can use * as wildcard if all issues are being moved to the same team */
    issueId?: boolean | number
    /** The team id in this relationship */
    teamId?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneMoveProjectTeamsGenqlSelection{
    /** The project id */
    projectId?: boolean | number
    /** The team ids for the project */
    teamIds?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ProjectMilestoneMoveInput {
/** The identifier of the project to move the milestone to. */
projectId: Scalars['String'],
/** The team id to move the attached issues to. This is needed when there is a mismatch between a project's teams and the milestone's issues' teams. Either this or addIssueTeamToProject is required in that situation to resolve constraints. */
newIssueTeamId?: (Scalars['String'] | null),
/** Whether to add each milestone issue's team to the project. This is needed when there is a mismatch between a project's teams and the milestone's issues' teams. Either this or newIssueTeamId is required in that situation to resolve constraints. */
addIssueTeamToProject?: (Scalars['Boolean'] | null),
/** A list of issue id to team ids, used for undoing a previous milestone move where the specified issues were moved from the specified teams. */
undoIssueTeamIds?: (ProjectMilestoneMoveIssueToTeamInput[] | null),
/** A mapping of project id to a previous set of team ids, used for undoing a previous milestone move where the specified teams were added to the project. */
undoProjectTeamIds?: (ProjectMilestoneMoveProjectTeamsInput | null)}


/** [Internal] Used for ProjectMilestoneMoveInput to describe a mapping between an issue and its team. */
export interface ProjectMilestoneMoveIssueToTeamInput {
/** The issue id in this relationship, you can use * as wildcard if all issues are being moved to the same team */
issueId: Scalars['String'],
/** The team id in this relationship */
teamId: Scalars['String']}


/** [Internal] Used for ProjectMilestoneMoveInput to describe a snapshot of a project and its team ids */
export interface ProjectMilestoneMoveProjectTeamsInput {
/** The project id */
projectId: Scalars['String'],
/** The team ids for the project */
teamIds: Scalars['String'][]}

export interface OrganizationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The organization that was created or updated. */
    organization?: OrganizationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationUpdateInput {
/** The name of the organization. */
name?: (Scalars['String'] | null),
/** The logo of the organization. */
logoUrl?: (Scalars['String'] | null),
/** The URL key of the organization. */
urlKey?: (Scalars['String'] | null),
/** How git branches are formatted. If null, default formatting will be used. */
gitBranchFormat?: (Scalars['String'] | null),
/** Whether the Git integration linkback messages should be sent for private repositories. */
gitLinkbackMessagesEnabled?: (Scalars['Boolean'] | null),
/** Whether the Git integration linkback messages should be sent for public repositories. */
gitPublicLinkbackMessagesEnabled?: (Scalars['Boolean'] | null),
/** Whether the organization is using roadmap. */
roadmapEnabled?: (Scalars['Boolean'] | null),
/** The n-weekly frequency at which to prompt for project updates. */
projectUpdateReminderFrequencyInWeeks?: (Scalars['Float'] | null),
/** The day at which project updates are sent. */
projectUpdateRemindersDay?: (Day | null),
/** The hour at which project updates are sent. */
projectUpdateRemindersHour?: (Scalars['Float'] | null),
/** [ALPHA] The n-weekly frequency at which to prompt for initiative updates. */
initiativeUpdateReminderFrequencyInWeeks?: (Scalars['Float'] | null),
/** [ALPHA] The day at which initiative updates are sent. */
initiativeUpdateRemindersDay?: (Day | null),
/** [ALPHA] The hour at which initiative updates are sent. */
initiativeUpdateRemindersHour?: (Scalars['Float'] | null),
/** The month at which the fiscal year starts. */
fiscalYearStartMonth?: (Scalars['Float'] | null),
/** [Internal] The list of working days. Sunday is 0, Monday is 1, etc. */
workingDays?: (Scalars['Float'][] | null),
/** Whether the organization has opted for reduced customer support attachment information. */
reducedPersonalInformation?: (Scalars['Boolean'] | null),
/** Whether the organization has opted for having to approve all OAuth applications for install. */
oauthAppReview?: (Scalars['Boolean'] | null),
/** List of services that are allowed to be used for login. */
allowedAuthServices?: (Scalars['String'][] | null),
/** Internal. Whether SLAs have been enabled for the organization. */
slaEnabled?: (Scalars['Boolean'] | null),
/** Whether member users are allowed to send invites. */
allowMembersToInvite?: (Scalars['Boolean'] | null),
/** Whether team creation is restricted to admins. */
restrictTeamCreationToAdmins?: (Scalars['Boolean'] | null),
/** Whether label creation is restricted to admins. */
restrictLabelManagementToAdmins?: (Scalars['Boolean'] | null),
/** Whether agent invocation is restricted to full workspace members. */
restrictAgentInvocationToMembers?: (Scalars['Boolean'] | null),
/** IP restriction configurations controlling allowed access the workspace. */
ipRestrictions?: (OrganizationIpRestrictionInput[] | null),
/** [ALPHA] Theme settings for the organization. */
themeSettings?: (Scalars['JSONObject'] | null),
/** [INTERNAL] Whether the organization is using customers. */
customersEnabled?: (Scalars['Boolean'] | null),
/** [INTERNAL] Configuration settings for the Customers feature. */
customersConfiguration?: (Scalars['JSONObject'] | null),
/** Whether the organization has enabled the feed feature. */
feedEnabled?: (Scalars['Boolean'] | null),
/** Default schedule for how often feed summaries are generated. */
defaultFeedSummarySchedule?: (FeedSummarySchedule | null),
/** [INTERNAL] Whether the organization has enabled the AI add-on. */
aiAddonEnabled?: (Scalars['Boolean'] | null),
/** [INTERNAL] Whether the organization has opted in to AI telemetry. */
aiTelemetryEnabled?: (Scalars['Boolean'] | null),
/** [INTERNAL] Whether the organization has enabled the member API keys. */
personalApiKeysEnabled?: (Scalars['Boolean'] | null)}


/** [INTERNAL] Organization IP restriction configuration. */
export interface OrganizationIpRestrictionInput {
/** IP range in CIDR format. */
range: Scalars['String'],
/** Restriction type. */
type: Scalars['String'],
/** Optional restriction description. */
description?: (Scalars['String'] | null),
/** Whether the restriction is enabled. */
enabled: Scalars['Boolean']}

export interface OrganizationDeletePayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DeleteOrganizationInput {
/** The deletion code to confirm operation. */
deletionCode: Scalars['String']}

export interface OrganizationCancelDeletePayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationStartTrialPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationStartTrialInput {
/** The plan type to trial. */
planType: Scalars['String']}

export interface OrganizationInvitePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The organization invite that was created or updated. */
    organizationInvite?: OrganizationInviteGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationInviteCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The email of the invitee. */
email: Scalars['String'],
/** What user role the invite should grant. */
role?: (UserRoleType | null),
/** The teams that the user has been invited to. */
teamIds?: (Scalars['String'][] | null),
/** [INTERNAL] Optional metadata about the invite. */
metadata?: (Scalars['JSONObject'] | null)}

export interface OrganizationInviteUpdateInput {
/** The teams that the user has been invited to. */
teamIds: Scalars['String'][]}


/** [INTERNAL] Organization domain operation response. */
export interface OrganizationDomainSimplePayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** [INTERNAL] Organization domain operation response. */
export interface OrganizationDomainPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The organization domain that was created or updated. */
    organizationDomain?: OrganizationDomainGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Defines the use of a domain by an organization. */
export interface OrganizationDomainGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Domain name. */
    name?: boolean | number
    /** Is this domain verified. */
    verified?: boolean | number
    /** E-mail used to verify this domain. */
    verificationEmail?: boolean | number
    /** The user who added the domain. */
    creator?: UserGenqlSelection
    /** What type of auth is the domain used for. */
    authType?: boolean | number
    /** Whether the domains was claimed by the organization through DNS verification. */
    claimed?: boolean | number
    /** Prevent users with this domain to create new workspaces. */
    disableOrganizationCreation?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OrganizationDomainVerificationInput {
/** The identifier in UUID v4 format of the domain being verified. */
organizationDomainId: Scalars['String'],
/** The verification code sent via email. */
verificationCode: Scalars['String']}

export interface OrganizationDomainCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The domain name to add. */
name: Scalars['String'],
/** The email address to which to send the verification code. */
verificationEmail?: (Scalars['String'] | null),
/** The authentication type this domain is for. */
authType?: (Scalars['String'] | null)}

export interface OrganizationDomainUpdateInput {
/** Prevent users with this domain to create new workspaces. Only allowed to set on claimed domains! */
disableOrganizationCreation?: (Scalars['Boolean'] | null)}

export interface NotificationSubscriptionPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The notification subscription that was created or updated. */
    notificationSubscription?: NotificationSubscriptionGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationSubscriptionCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the customer to subscribe to. */
customerId?: (Scalars['String'] | null),
/** The identifier of the custom view to subscribe to. */
customViewId?: (Scalars['String'] | null),
/** The identifier of the cycle to subscribe to. */
cycleId?: (Scalars['String'] | null),
/** The identifier of the initiative to subscribe to. */
initiativeId?: (Scalars['String'] | null),
/** The identifier of the label to subscribe to. */
labelId?: (Scalars['String'] | null),
/** The identifier of the project to subscribe to. */
projectId?: (Scalars['String'] | null),
/** The identifier of the team to subscribe to. */
teamId?: (Scalars['String'] | null),
/** The identifier of the user to subscribe to. */
userId?: (Scalars['String'] | null),
/** The type of view to which the notification subscription context is associated with. */
contextViewType?: (ContextViewType | null),
/** The type of user view to which the notification subscription context is associated with. */
userContextViewType?: (UserContextViewType | null),
/** The types of notifications of the subscription. */
notificationSubscriptionTypes?: (Scalars['String'][] | null),
/** Whether the subscription is active. */
active?: (Scalars['Boolean'] | null)}

export interface NotificationSubscriptionUpdateInput {
/** The types of notifications of the subscription. */
notificationSubscriptionTypes?: (Scalars['String'][] | null),
/** Whether the subscription is active. */
active?: (Scalars['Boolean'] | null)}

export interface NotificationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The notification that was created or updated. */
    notification?: NotificationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface NotificationUpdateInput {
/** The time when notification was marked as read. */
readAt?: (Scalars['DateTime'] | null),
/** The time until a notification will be snoozed. After that it will appear in the inbox again. */
snoozedUntilAt?: (Scalars['DateTime'] | null),
/** The id of the project update related to the notification. */
projectUpdateId?: (Scalars['String'] | null),
/** The id of the project update related to the notification. */
initiativeUpdateId?: (Scalars['String'] | null)}

export interface NotificationBatchActionPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The notifications that were updated. */
    notifications?: NotificationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Describes the type and id of the entity to target for notifications. */
export interface NotificationEntityInput {
/** The id of the issue related to the notification. */
issueId?: (Scalars['String'] | null),
/** [DEPRECATED] The id of the project related to the notification. */
projectId?: (Scalars['String'] | null),
/** The id of the initiative related to the notification. */
initiativeId?: (Scalars['String'] | null),
/** The id of the project update related to the notification. */
projectUpdateId?: (Scalars['String'] | null),
/** The id of the initiative update related to the notification. */
initiativeUpdateId?: (Scalars['String'] | null),
/** The id of the OAuth client approval related to the notification. */
oauthClientApprovalId?: (Scalars['String'] | null),
/** The id of the notification. */
id?: (Scalars['String'] | null)}


/** A generic payload return from entity archive mutations. */
export interface NotificationArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: NotificationGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssuePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The issue that was created or updated. */
    issue?: IssueGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The title of the issue. */
title?: (Scalars['String'] | null),
/** The issue description in markdown format. */
description?: (Scalars['String'] | null),
/** [Internal] The issue description as a Prosemirror document. */
descriptionData?: (Scalars['JSON'] | null),
/** The identifier of the user to assign the issue to. */
assigneeId?: (Scalars['String'] | null),
/** The identifier of the parent issue. */
parentId?: (Scalars['String'] | null),
/** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
priority?: (Scalars['Int'] | null),
/** The estimated complexity of the issue. */
estimate?: (Scalars['Int'] | null),
/** The identifiers of the users subscribing to this ticket. */
subscriberIds?: (Scalars['String'][] | null),
/** The identifiers of the issue labels associated with this ticket. */
labelIds?: (Scalars['String'][] | null),
/** The identifier of the team associated with the issue. */
teamId: Scalars['String'],
/** The cycle associated with the issue. */
cycleId?: (Scalars['String'] | null),
/** The project associated with the issue. */
projectId?: (Scalars['String'] | null),
/** The project milestone associated with the issue. */
projectMilestoneId?: (Scalars['String'] | null),
/** The ID of the last template applied to the issue. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The team state of the issue. */
stateId?: (Scalars['String'] | null),
/** The comment the issue is referencing. */
referenceCommentId?: (Scalars['String'] | null),
/** The comment the issue is created from. */
sourceCommentId?: (Scalars['String'] | null),
/** [Internal] The pull request comment the issue is created from. */
sourcePullRequestCommentId?: (Scalars['String'] | null),
/** The position of the issue related to other issues. */
sortOrder?: (Scalars['Float'] | null),
/** The position of the issue related to other issues, when ordered by priority. */
prioritySortOrder?: (Scalars['Float'] | null),
/** The position of the issue in parent's sub-issue list. */
subIssueSortOrder?: (Scalars['Float'] | null),
/** The date at which the issue is due. */
dueDate?: (Scalars['TimelessDate'] | null),
/** Create issue as a user with the provided name. This option is only available to OAuth applications creating issues in `actor=app` mode. */
createAsUser?: (Scalars['String'] | null),
/** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
displayIconUrl?: (Scalars['String'] | null),
/** Whether the passed sort order should be preserved. */
preserveSortOrderOnCreate?: (Scalars['Boolean'] | null),
/** The date when the issue was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
createdAt?: (Scalars['DateTime'] | null),
/** [Internal] The timestamp at which an issue will be considered in breach of SLA. */
slaBreachesAt?: (Scalars['DateTime'] | null),
/** [Internal] The timestamp at which the issue's SLA was started. */
slaStartedAt?: (Scalars['DateTime'] | null),
/** The identifier of a template the issue should be created from. If other values are provided in the input, they will override template values. */
templateId?: (Scalars['String'] | null),
/** The date when the issue was completed (e.g. if importing from another system). Must be a date in the past and after createdAt date. Cannot be provided with an incompatible workflow state. */
completedAt?: (Scalars['DateTime'] | null),
/** The SLA day count type for the issue. Whether SLA should be business days only or calendar days (default). */
slaType?: (SLADayCountType | null)}

export interface IssueBatchPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The issues that were updated. */
    issues?: IssueGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueBatchCreateInput {
/** The issues to create. */
issues: IssueCreateInput[]}

export interface IssueUpdateInput {
/** The issue title. */
title?: (Scalars['String'] | null),
/** The issue description in markdown format. */
description?: (Scalars['String'] | null),
/** [Internal] The issue description as a Prosemirror document. */
descriptionData?: (Scalars['JSON'] | null),
/** The identifier of the user to assign the issue to. */
assigneeId?: (Scalars['String'] | null),
/** The identifier of the parent issue. */
parentId?: (Scalars['String'] | null),
/** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
priority?: (Scalars['Int'] | null),
/** The estimated complexity of the issue. */
estimate?: (Scalars['Int'] | null),
/** The identifiers of the users subscribing to this ticket. */
subscriberIds?: (Scalars['String'][] | null),
/** The identifiers of the issue labels associated with this ticket. */
labelIds?: (Scalars['String'][] | null),
/** The identifiers of the issue labels to be added to this issue. */
addedLabelIds?: (Scalars['String'][] | null),
/** The identifiers of the issue labels to be removed from this issue. */
removedLabelIds?: (Scalars['String'][] | null),
/** The identifier of the team associated with the issue. */
teamId?: (Scalars['String'] | null),
/** The cycle associated with the issue. */
cycleId?: (Scalars['String'] | null),
/** The project associated with the issue. */
projectId?: (Scalars['String'] | null),
/** The project milestone associated with the issue. */
projectMilestoneId?: (Scalars['String'] | null),
/** The ID of the last template applied to the issue. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The team state of the issue. */
stateId?: (Scalars['String'] | null),
/** The position of the issue related to other issues. */
sortOrder?: (Scalars['Float'] | null),
/** The position of the issue related to other issues, when ordered by priority. */
prioritySortOrder?: (Scalars['Float'] | null),
/** The position of the issue in parent's sub-issue list. */
subIssueSortOrder?: (Scalars['Float'] | null),
/** The date at which the issue is due. */
dueDate?: (Scalars['TimelessDate'] | null),
/** Whether the issue has been trashed. */
trashed?: (Scalars['Boolean'] | null),
/** [Internal] The timestamp at which an issue will be considered in breach of SLA. */
slaBreachesAt?: (Scalars['DateTime'] | null),
/** [Internal] The timestamp at which the issue's SLA was started. */
slaStartedAt?: (Scalars['DateTime'] | null),
/** The time until an issue will be snoozed in Triage view. */
snoozedUntilAt?: (Scalars['DateTime'] | null),
/** The identifier of the user who snoozed the issue. */
snoozedById?: (Scalars['String'] | null),
/** The SLA day count type for the issue. Whether SLA should be business days only or calendar days (default). */
slaType?: (SLADayCountType | null),
/** Whether the issue was automatically closed because its parent issue was closed. */
autoClosedByParentClosing?: (Scalars['Boolean'] | null)}


/** A generic payload return from entity archive mutations. */
export interface IssueArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: IssueGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueRelationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The issue relation that was created or updated. */
    issueRelation?: IssueRelationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueRelationCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The type of relation of the issue to the related issue. */
type: IssueRelationType,
/** The identifier of the issue that is related to another issue. */
issueId: Scalars['String'],
/** The identifier of the related issue. */
relatedIssueId: Scalars['String']}

export interface IssueRelationUpdateInput {
/** The type of relation of the issue to the related issue. */
type?: (Scalars['String'] | null),
/** The identifier of the issue that is related to another issue. */
issueId?: (Scalars['String'] | null),
/** The identifier of the related issue. */
relatedIssueId?: (Scalars['String'] | null)}

export interface IssueLabelPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The label that was created or updated. */
    issueLabel?: IssueLabelGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueLabelCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the label. */
name: Scalars['String'],
/** The description of the label. */
description?: (Scalars['String'] | null),
/** The color of the label. */
color?: (Scalars['String'] | null),
/** The identifier of the parent label. */
parentId?: (Scalars['String'] | null),
/** The team associated with the label. If not given, the label will be associated with the entire workspace. */
teamId?: (Scalars['String'] | null),
/** Whether the label is a group. */
isGroup?: (Scalars['Boolean'] | null)}

export interface IssueLabelUpdateInput {
/** The name of the label. */
name?: (Scalars['String'] | null),
/** The description of the label. */
description?: (Scalars['String'] | null),
/** The identifier of the parent label. */
parentId?: (Scalars['String'] | null),
/** The color of the label. */
color?: (Scalars['String'] | null)}

export interface IssueImportPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The import job that was created or updated. */
    issueImport?: IssueImportGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueImportDeletePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The import job that was deleted. */
    issueImport?: IssueImportGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IssueImportUpdateInput {
/** The mapping configuration for the import. */
mapping: Scalars['JSONObject']}

export interface IntegrationsSettingsPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The settings that were created or updated. */
    integrationsSettings?: IntegrationsSettingsGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationsSettingsCreateInput {
/** Whether to send a Slack message when a new issue is created for the project or the team. */
slackIssueCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an issue is added to a view. */
slackIssueAddedToView?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
slackIssueNewComment?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
slackIssueStatusChangedDone?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when any of the project or team's issues has a change in status. */
slackIssueStatusChangedAll?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created. */
slackProjectUpdateCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created to team channels. */
slackProjectUpdateCreatedToTeam?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created to workspace channel. */
slackProjectUpdateCreatedToWorkspace?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an initiative update is created. */
slackInitiativeUpdateCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a new issue is added to triage. */
slackIssueAddedToTriage?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an SLA is at high risk. */
slackIssueSlaHighRisk?: (Scalars['Boolean'] | null),
/** Whether to receive notification when an SLA has breached on Slack. */
slackIssueSlaBreached?: (Scalars['Boolean'] | null),
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the team to create settings for. */
teamId?: (Scalars['String'] | null),
/** The identifier of the project to create settings for. */
projectId?: (Scalars['String'] | null),
/** The identifier of the initiative to create settings for. */
initiativeId?: (Scalars['String'] | null),
/** The identifier of the custom view to create settings for. */
customViewId?: (Scalars['String'] | null),
/** The type of view to which the integration settings context is associated with. */
contextViewType?: (ContextViewType | null)}

export interface IntegrationsSettingsUpdateInput {
/** Whether to send a Slack message when a new issue is created for the project or the team. */
slackIssueCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an issue is added to a view. */
slackIssueAddedToView?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
slackIssueNewComment?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
slackIssueStatusChangedDone?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when any of the project or team's issues has a change in status. */
slackIssueStatusChangedAll?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created. */
slackProjectUpdateCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created to team channels. */
slackProjectUpdateCreatedToTeam?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a project update is created to workspace channel. */
slackProjectUpdateCreatedToWorkspace?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an initiative update is created. */
slackInitiativeUpdateCreated?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when a new issue is added to triage. */
slackIssueAddedToTriage?: (Scalars['Boolean'] | null),
/** Whether to send a Slack message when an SLA is at high risk. */
slackIssueSlaHighRisk?: (Scalars['Boolean'] | null),
/** Whether to receive notification when an SLA has breached on Slack. */
slackIssueSlaBreached?: (Scalars['Boolean'] | null)}

export interface IntegrationTemplatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The IntegrationTemplate that was created or updated. */
    integrationTemplate?: IntegrationTemplateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationTemplateCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the integration. */
integrationId: Scalars['String'],
/** The identifier of the template. */
templateId: Scalars['String'],
/** The foreign identifier in the other service. */
foreignEntityId?: (Scalars['String'] | null)}

export interface IntegrationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationUpdateInput {
/** The settings to update. */
settings?: (IntegrationSettingsInput | null)}

export interface IntegrationSettingsInput {slack?: (SlackSettingsInput | null),slackAsks?: (SlackAsksSettingsInput | null),slackPost?: (SlackPostSettingsInput | null),slackProjectPost?: (SlackPostSettingsInput | null),slackInitiativePost?: (SlackPostSettingsInput | null),slackCustomViewNotifications?: (SlackPostSettingsInput | null),slackOrgProjectUpdatesPost?: (SlackPostSettingsInput | null),slackOrgInitiativeUpdatesPost?: (SlackPostSettingsInput | null),googleSheets?: (GoogleSheetsSettingsInput | null),gitHub?: (GitHubSettingsInput | null),gitHubImport?: (GitHubImportSettingsInput | null),gitHubPersonal?: (GitHubPersonalSettingsInput | null),gitLab?: (GitLabSettingsInput | null),sentry?: (SentrySettingsInput | null),zendesk?: (ZendeskSettingsInput | null),intercom?: (IntercomSettingsInput | null),front?: (FrontSettingsInput | null),jira?: (JiraSettingsInput | null),notion?: (NotionSettingsInput | null),opsgenie?: (OpsgenieInput | null),pagerDuty?: (PagerDutyInput | null),launchDarkly?: (LaunchDarklySettingsInput | null),jiraPersonal?: (JiraPersonalSettingsInput | null),salesforce?: (SalesforceSettingsInput | null)}

export interface SlackSettingsInput {
/** Slack workspace name */
teamName?: (Scalars['String'] | null),
/** Slack workspace id */
teamId?: (Scalars['String'] | null),
/** Enterprise name of the connected Slack enterprise */
enterpriseName?: (Scalars['String'] | null),
/** Enterprise id of the connected Slack enterprise */
enterpriseId?: (Scalars['String'] | null),
/** Whether to show unfurl previews in Slack */
shouldUnfurl?: (Scalars['Boolean'] | null),
/** Whether Linear should automatically respond with issue unfurls when an issue identifier is mentioned in a Slack message. */
linkOnIssueIdMention: Scalars['Boolean']}

export interface SlackAsksSettingsInput {
/** Slack workspace name */
teamName?: (Scalars['String'] | null),
/** Slack workspace id */
teamId?: (Scalars['String'] | null),
/** Enterprise name of the connected Slack enterprise */
enterpriseName?: (Scalars['String'] | null),
/** Enterprise id of the connected Slack enterprise */
enterpriseId?: (Scalars['String'] | null),
/** Whether to show unfurl previews in Slack */
shouldUnfurl?: (Scalars['Boolean'] | null),
/** The mapping of Slack channel ID => Slack channel name for connected channels. */
slackChannelMapping?: (SlackChannelNameMappingInput[] | null),
/** The user role type that is allowed to manage Asks settings. */
canAdministrate: UserRoleType}

export interface SlackChannelNameMappingInput {
/** The Slack channel ID. */
id: Scalars['String'],
/** The Slack channel name. */
name: Scalars['String'],
/** Whether or not the Slack channel is private. */
isPrivate?: (Scalars['Boolean'] | null),
/** Whether or not the Slack channel is shared with an external org. */
isShared?: (Scalars['Boolean'] | null),
/** Whether or not the Linear Asks bot has been added to this Slack channel. */
botAdded?: (Scalars['Boolean'] | null),
/** Which teams are connected to the channel and settings for those teams. */
teams: SlackAsksTeamSettingsInput[],
/** Whether or not top-level messages in this channel should automatically create Asks. */
autoCreateOnMessage?: (Scalars['Boolean'] | null),
/** Whether or not using the :ticket: emoji in this channel should automatically create Asks. */
autoCreateOnEmoji?: (Scalars['Boolean'] | null),
/** Whether or not @-mentioning the bot should automatically create an Ask with the message. */
autoCreateOnBotMention?: (Scalars['Boolean'] | null),
/** The optional template ID to use for Asks auto-created in this channel. If not set, auto-created Asks won't use any template. */
autoCreateTemplateId?: (Scalars['String'] | null),
/** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is canceled. */
postCancellationUpdates?: (Scalars['Boolean'] | null),
/** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is completed. */
postCompletionUpdates?: (Scalars['Boolean'] | null),
/** Whether or not synced Slack threads should be updated with a message when their Ask is accepted from triage. */
postAcceptedFromTriageUpdates?: (Scalars['Boolean'] | null),
/** Whether or not to use AI to generate titles for Asks created in this channel. */
aiTitles?: (Scalars['Boolean'] | null)}

export interface SlackAsksTeamSettingsInput {
/** The Linear team ID. */
id: Scalars['String'],
/** Whether the default Asks template is enabled in the given channel for this team. */
hasDefaultAsk: Scalars['Boolean']}

export interface SlackPostSettingsInput {channel: Scalars['String'],channelId: Scalars['String'],configurationUrl: Scalars['String'],
/** Slack workspace id */
teamId?: (Scalars['String'] | null),channelType?: (SlackChannelType | null)}

export interface GoogleSheetsSettingsInput {
/** [Deprecated] The ID of the exported Google Sheet. */
spreadsheetId?: (Scalars['String'] | null),
/** [Deprecated] The URL of the exported Google Sheet. */
spreadsheetUrl?: (Scalars['String'] | null),
/** [Deprecated] The ID of the target sheet (tab) within the Google Sheet. */
sheetId?: (Scalars['Float'] | null),
/** [Deprecated] The date of the most recent export. */
updatedIssuesAt?: (Scalars['DateTime'] | null),
/** The export settings for issues. */
issue?: (GoogleSheetsExportSettings | null),
/** The export settings for projects. */
project?: (GoogleSheetsExportSettings | null)}

export interface GoogleSheetsExportSettings {
/** Whether the export is enabled. */
enabled?: (Scalars['Boolean'] | null),
/** The ID of the exported Google Sheet. */
spreadsheetId?: (Scalars['String'] | null),
/** The URL of the exported Google Sheet. */
spreadsheetUrl?: (Scalars['String'] | null),
/** The ID of the target sheet (tab) within the Google Sheet. */
sheetId?: (Scalars['Float'] | null),
/** The date of the most recent export. */
updatedAt?: (Scalars['DateTime'] | null)}

export interface GitHubSettingsInput {pullRequestReviewTool?: (PullRequestReviewTool | null),
/** The avatar URL for the GitHub organization. */
orgAvatarUrl?: (Scalars['String'] | null),
/** The GitHub organization's name. */
orgLogin: Scalars['String'],
/** The names of the repositories connected for the GitHub integration. */
repositories?: (GitHubRepoInput[] | null),
/** Mapping of team to repository for syncing. */
repositoriesMapping?: (GitHubRepoMappingInput[] | null),
/** The type of Github org */
orgType?: (GithubOrgType | null)}

export interface GitHubRepoInput {
/** The GitHub repo id. */
id: Scalars['Float'],
/** The full name of the repository. */
fullName: Scalars['String'],
/** Whether the repository is archived. */
archived?: (Scalars['Boolean'] | null)}

export interface GitHubRepoMappingInput {
/** The unique identifier for this mapping. */
id: Scalars['String'],
/** The Linear team id to map to the given project. */
linearTeamId: Scalars['String'],
/** The GitHub repo id. */
gitHubRepoId: Scalars['Float'],
/** Labels to filter incoming GitHub issue creation by. */
gitHubLabels?: (Scalars['String'][] | null),
/** Whether the sync for this mapping is bidirectional. */
bidirectional?: (Scalars['Boolean'] | null),
/** Whether this mapping is the default one for issue creation. */
default?: (Scalars['Boolean'] | null)}

export interface GitHubImportSettingsInput {
/** The GitHub organization's name. */
orgLogin: Scalars['String'],
/** The avatar URL for the GitHub organization. */
orgAvatarUrl: Scalars['String'],
/** The names of the repositories connected for the GitHub integration. */
repositories: GitHubRepoInput[],
/** A map storing all available issue labels per repository */
labels?: (Scalars['JSONObject'] | null),
/** The type of Github org */
orgType: GithubOrgType}

export interface GitHubPersonalSettingsInput {
/** The GitHub user's name. */
login: Scalars['String']}

export interface GitLabSettingsInput {
/** The self-hosted URL of the GitLab instance. */
url?: (Scalars['String'] | null),
/** Whether the token is limited to a read-only scope. */
readonly?: (Scalars['Boolean'] | null),
/** The ISO timestamp the GitLab access token expires. */
expiresAt?: (Scalars['String'] | null)}

export interface SentrySettingsInput {
/** The slug of the Sentry organization being connected. */
organizationSlug: Scalars['String'],
/** The ID of the Sentry organization being connected. */
organizationId: Scalars['ID'],
/** Whether Sentry issues resolving completes Linear issues. */
resolvingCompletesIssues: Scalars['Boolean'],
/** Whether Sentry issues unresolving reopens Linear issues. */
unresolvingReopensIssues: Scalars['Boolean']}

export interface ZendeskSettingsInput {
/** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
sendNoteOnStatusChange?: (Scalars['Boolean'] | null),
/** Whether an internal message should be added when someone comments on an issue. */
sendNoteOnComment?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
automateTicketReopeningOnCompletion?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
automateTicketReopeningOnCancellation?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
automateTicketReopeningOnComment?: (Scalars['Boolean'] | null),
/** The subdomain of the Zendesk organization being connected. */
subdomain: Scalars['String'],
/** The URL of the connected Zendesk organization. */
url: Scalars['String'],
/** The ID of the Linear bot user. */
botUserId?: (Scalars['String'] | null),
/** [INTERNAL] Temporary flag indicating if the integration has the necessary scopes for Customers */
canReadCustomers?: (Scalars['Boolean'] | null)}

export interface IntercomSettingsInput {
/** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
sendNoteOnStatusChange?: (Scalars['Boolean'] | null),
/** Whether an internal message should be added when someone comments on an issue. */
sendNoteOnComment?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
automateTicketReopeningOnCompletion?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
automateTicketReopeningOnCancellation?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
automateTicketReopeningOnComment?: (Scalars['Boolean'] | null)}

export interface FrontSettingsInput {
/** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
sendNoteOnStatusChange?: (Scalars['Boolean'] | null),
/** Whether an internal message should be added when someone comments on an issue. */
sendNoteOnComment?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
automateTicketReopeningOnCompletion?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
automateTicketReopeningOnCancellation?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
automateTicketReopeningOnComment?: (Scalars['Boolean'] | null)}

export interface JiraSettingsInput {
/** The mapping of Jira project id => Linear team id. */
projectMapping?: (JiraLinearMappingInput[] | null),
/** The Jira projects for the organization. */
projects: JiraProjectDataInput[],
/** Whether this integration is for Jira Server or not. */
isJiraServer?: (Scalars['Boolean'] | null),
/** Whether the user needs to provide setup information about the webhook to complete the integration setup. Only relevant for integrations that use a manual setup flow */
setupPending?: (Scalars['Boolean'] | null),
/** Whether this integration is using a manual setup flow. */
manualSetup?: (Scalars['Boolean'] | null),
/** The label of the Jira instance, for visual identification purposes only */
label?: (Scalars['String'] | null)}

export interface JiraLinearMappingInput {
/** The Jira id for this project. */
jiraProjectId: Scalars['String'],
/** The Linear team id to map to the given project. */
linearTeamId: Scalars['String'],
/** Whether the sync for this mapping is bidirectional. */
bidirectional?: (Scalars['Boolean'] | null),
/** Whether this mapping is the default one for issue creation. */
default?: (Scalars['Boolean'] | null)}

export interface JiraProjectDataInput {
/** The Jira id for this project. */
id: Scalars['String'],
/** The Jira key for this project, such as ENG. */
key: Scalars['String'],
/** The Jira name for this project, such as Engineering. */
name: Scalars['String']}

export interface NotionSettingsInput {
/** The ID of the Notion workspace being connected. */
workspaceId: Scalars['String'],
/** The name of the Notion workspace being connected. */
workspaceName: Scalars['String']}

export interface OpsgenieInput {
/** The date when the Opsgenie API failed with an unauthorized error. */
apiFailedWithUnauthorizedErrorAt?: (Scalars['DateTime'] | null)}

export interface PagerDutyInput {
/** The date when the PagerDuty API failed with an unauthorized error. */
apiFailedWithUnauthorizedErrorAt?: (Scalars['DateTime'] | null)}

export interface LaunchDarklySettingsInput {
/** The project key of the LaunchDarkly integration. */
projectKey: Scalars['String'],
/** The environment of the LaunchDarkly integration. */
environment: Scalars['String']}

export interface JiraPersonalSettingsInput {
/** The name of the Jira site currently authorized through the integration. */
siteName?: (Scalars['String'] | null)}

export interface SalesforceSettingsInput {
/** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
sendNoteOnStatusChange?: (Scalars['Boolean'] | null),
/** Whether an internal message should be added when someone comments on an issue. */
sendNoteOnComment?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
automateTicketReopeningOnCompletion?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
automateTicketReopeningOnCancellation?: (Scalars['Boolean'] | null),
/** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
automateTicketReopeningOnComment?: (Scalars['Boolean'] | null),
/** The Salesforce subdomain. */
subdomain?: (Scalars['String'] | null),
/** The Salesforce instance URL. */
url?: (Scalars['String'] | null),
/** The Salesforce case status to use to reopen cases. */
reopenCaseStatus?: (Scalars['String'] | null),
/** Whether to restrict visibility of the integration to issues that have been either created from Salesforce or linked to Salesforce. */
restrictVisibility?: (Scalars['Boolean'] | null)}

export interface GitHubCommitIntegrationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The webhook secret to provide to GitHub. */
    webhookSecret?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitHubEnterpriseServerPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The setup address. */
    setupUrl?: boolean | number
    /** The app install address. */
    installUrl?: boolean | number
    /** The webhook secret to provide to GitHub. */
    webhookSecret?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitLabIntegrationCreatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The webhook secret to provide to GitLab. */
    webhookSecret?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AirbyteConfigurationInput {
/** Linear export API key. */
apiKey: Scalars['String']}

export interface JiraConfigurationInput {
/** The Jira personal access token. */
accessToken: Scalars['String'],
/** The Jira user's email address. */
email: Scalars['String'],
/** The Jira installation hostname. */
hostname: Scalars['String'],
/** Whether this integration will be setup using the manual webhook flow. */
manualSetup?: (Scalars['Boolean'] | null)}

export interface JiraUpdateInput {
/** The id of the integration to update. */
id: Scalars['String'],
/** Whether to refresh Jira Projects for the integration. */
updateProjects?: (Scalars['Boolean'] | null),
/** Whether to refresh Jira metadata for the integration. */
updateMetadata?: (Scalars['Boolean'] | null),
/** Whether to delete the current manual webhook configuration. */
deleteWebhook?: (Scalars['Boolean'] | null),
/** Webhook secret for a new manual configuration. */
webhookSecret?: (Scalars['String'] | null),
/** The Jira personal access token. */
accessToken?: (Scalars['String'] | null),
/** The Jira user email address associated with the personal access token. */
email?: (Scalars['String'] | null)}

export interface IntegrationCustomerDataAttributesRefreshInput {
/** The integration service to refresh customer data attributes from. */
service: Scalars['String']}

export interface AsksChannelConnectPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The new Asks Slack channel mapping for the connected channel. */
    mapping?: SlackChannelNameMappingGenqlSelection
    /** Whether the bot needs to be manually added to the channel. */
    addBot?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Object for mapping Slack channel IDs to names and other settings. */
export interface SlackChannelNameMappingGenqlSelection{
    /** The Slack channel ID. */
    id?: boolean | number
    /** The Slack channel name. */
    name?: boolean | number
    /** Whether or not the Slack channel is private. */
    isPrivate?: boolean | number
    /** Whether or not the Slack channel is shared with an external org. */
    isShared?: boolean | number
    /** Whether or not the Linear Asks bot has been added to this Slack channel. */
    botAdded?: boolean | number
    /** Which teams are connected to the channel and settings for those teams. */
    teams?: SlackAsksTeamSettingsGenqlSelection
    /** Whether or not top-level messages in this channel should automatically create Asks. */
    autoCreateOnMessage?: boolean | number
    /** Whether or not using the :ticket: emoji in this channel should automatically create Asks. */
    autoCreateOnEmoji?: boolean | number
    /** Whether or not @-mentioning the bot should automatically create an Ask with the message. */
    autoCreateOnBotMention?: boolean | number
    /** The optional template ID to use for Asks auto-created in this channel. If not set, auto-created Asks won't use any template. */
    autoCreateTemplateId?: boolean | number
    /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is canceled. */
    postCancellationUpdates?: boolean | number
    /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is completed. */
    postCompletionUpdates?: boolean | number
    /** Whether or not synced Slack threads should be updated with a message when their Ask is accepted from triage. */
    postAcceptedFromTriageUpdates?: boolean | number
    /** Whether or not to use AI to generate titles for Asks created in this channel. */
    aiTitles?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Tuple for mapping Slack channel IDs to names. */
export interface SlackAsksTeamSettingsGenqlSelection{
    /** The Linear team ID. */
    id?: boolean | number
    /** Whether the default Asks template is enabled in the given channel for this team. */
    hasDefaultAsk?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface SlackChannelConnectPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The integration that was created or updated. */
    integration?: IntegrationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** Whether the bot needs to be manually added to the channel. */
    addBot?: boolean | number
    /** Whether it's recommended to connect main Slack integration. */
    nudgeToConnectMainSlackIntegration?: boolean | number
    /** Whether it's recommended to update main Slack integration. */
    nudgeToUpdateMainSlackIntegration?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationRequestPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface IntegrationRequestInput {
/** Email associated with the request. */
email?: (Scalars['String'] | null),
/** Name of the requested integration. */
name: Scalars['String']}

export interface InitiativeUpdatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The initiative update that was created. */
    initiativeUpdate?: InitiativeUpdateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeUpdateCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The content of the update in markdown format. */
body?: (Scalars['String'] | null),
/** [Internal] The content of the update as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** The health of the initiative at the time of the update. */
health?: (InitiativeUpdateHealthType | null),
/** The initiative to associate the update with. */
initiativeId: Scalars['String'],
/** Whether the diff between the current update and the previous one should be hidden. */
isDiffHidden?: (Scalars['Boolean'] | null)}

export interface InitiativeUpdateUpdateInput {
/** The content of the update in markdown format. */
body?: (Scalars['String'] | null),
/** The content of the update as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** The health of the initiative at the time of the update. */
health?: (InitiativeUpdateHealthType | null),
/** Whether the diff between the current update and the previous one should be hidden. */
isDiffHidden?: (Scalars['Boolean'] | null)}


/** A generic payload return from entity archive mutations. */
export interface InitiativeUpdateArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: InitiativeUpdateGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeUpdateReminderPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The result of a initiativeToProject mutation. */
export interface InitiativeToProjectPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The initiativeToProject that was created or updated. */
    initiativeToProject?: InitiativeToProjectGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The properties of the initiativeToProject to create. */
export interface InitiativeToProjectCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the project. */
projectId: Scalars['String'],
/** The identifier of the initiative. */
initiativeId: Scalars['String'],
/** The sort order for the project within its organization. */
sortOrder?: (Scalars['Float'] | null)}


/** The properties of the initiativeToProject to update. */
export interface InitiativeToProjectUpdateInput {
/** The sort order for the project within its organization. */
sortOrder?: (Scalars['Float'] | null)}


/** The payload returned by the initiative mutations. */
export interface InitiativePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The initiative that was created or updated. */
    initiative?: InitiativeGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** The properties of the initiative to create. */
export interface InitiativeCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the initiative. */
name: Scalars['String'],
/** The description of the initiative. */
description?: (Scalars['String'] | null),
/** The owner of the initiative. */
ownerId?: (Scalars['String'] | null),
/** The sort order of the initiative within the organization. */
sortOrder?: (Scalars['Float'] | null),
/** The initiative's color. */
color?: (Scalars['String'] | null),
/** The initiative's icon. */
icon?: (Scalars['String'] | null),
/** The initiative's status. */
status?: (InitiativeStatus | null),
/** The estimated completion date of the initiative. */
targetDate?: (Scalars['TimelessDate'] | null),
/** The resolution of the initiative's estimated completion date. */
targetDateResolution?: (DateResolutionType | null),
/** The initiative's content in markdown format. */
content?: (Scalars['String'] | null)}


/** The properties of the initiative to update. */
export interface InitiativeUpdateInput {
/** The name of the initiative. */
name?: (Scalars['String'] | null),
/** The description of the initiative. */
description?: (Scalars['String'] | null),
/** The owner of the initiative. */
ownerId?: (Scalars['String'] | null),
/** The sort order of the initiative within the organization. */
sortOrder?: (Scalars['Float'] | null),
/** The initiative's color. */
color?: (Scalars['String'] | null),
/** The initiative's icon. */
icon?: (Scalars['String'] | null),
/** The estimated completion date of the initiative. */
targetDate?: (Scalars['TimelessDate'] | null),
/** The initiative's status. */
status?: (InitiativeStatus | null),
/** The resolution of the initiative's estimated completion date. */
targetDateResolution?: (DateResolutionType | null),
/** Whether the initiative has been trashed. */
trashed?: (Scalars['Boolean'] | null),
/** The initiative's content in markdown format. */
content?: (Scalars['String'] | null),
/** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
updateReminderFrequencyInWeeks?: (Scalars['Float'] | null),
/** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
updateReminderFrequency?: (Scalars['Float'] | null),
/** The frequency resolution. */
frequencyResolution?: (FrequencyResolutionType | null),
/** The day at which to prompt for updates. */
updateRemindersDay?: (Day | null),
/** The hour at which to prompt for updates. */
updateRemindersHour?: (Scalars['Int'] | null)}


/** A generic payload return from entity archive mutations. */
export interface InitiativeArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: InitiativeGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeRelationPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The initiative relation that was created or updated. */
    initiativeRelation?: InitiativeRelationGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface InitiativeRelationCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier of the parent initiative. */
initiativeId: Scalars['String'],
/** The identifier of the child initiative. */
relatedInitiativeId: Scalars['String'],
/** The sort order of the initiative relation. */
sortOrder?: (Scalars['Float'] | null)}


/** The properties of the initiativeRelation to update. */
export interface InitiativeRelationUpdateInput {
/** The sort order of the initiative relation. */
sortOrder?: (Scalars['Float'] | null)}

export interface GitAutomationTargetBranchPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The Git target branch automation that was created or updated. */
    targetBranch?: GitAutomationTargetBranchGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitAutomationTargetBranchCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The team associated with the Git target branch automation. */
teamId: Scalars['String'],
/** The target branch pattern. */
branchPattern: Scalars['String'],
/** Whether the branch pattern is a regular expression. */
isRegex?: (Scalars['Boolean'] | null)}

export interface GitAutomationTargetBranchUpdateInput {
/** The target branch pattern. */
branchPattern?: (Scalars['String'] | null),
/** Whether the branch pattern is a regular expression. */
isRegex?: (Scalars['Boolean'] | null)}

export interface GitAutomationStatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The automation state that was created or updated. */
    gitAutomationState?: GitAutomationStateGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface GitAutomationStateCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The team associated with the automation state. */
teamId: Scalars['String'],
/** The associated workflow state. If null, will override default behaviour and take no action. */
stateId?: (Scalars['String'] | null),
/** The associated target branch. If null, all branches are targeted. */
targetBranchId?: (Scalars['String'] | null),
/** The event that triggers the automation. */
event: GitAutomationStates}

export interface GitAutomationStateUpdateInput {
/** The associated workflow state. */
stateId?: (Scalars['String'] | null),
/** The associated target branch. If null, all branches are targeted. */
targetBranchId?: (Scalars['String'] | null),
/** The event that triggers the automation. */
event?: (GitAutomationStates | null)}

export interface UploadPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Object describing the file to be uploaded. */
    uploadFile?: UploadFileGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Object representing Google Cloud upload policy, plus additional data. */
export interface UploadFileGenqlSelection{
    /** The filename. */
    filename?: boolean | number
    /** The content type. */
    contentType?: boolean | number
    /** The size of the uploaded file. */
    size?: boolean | number
    /** The signed URL the for the uploaded file. (assigned automatically). */
    uploadUrl?: boolean | number
    /** The asset URL for the uploaded file. (assigned automatically). */
    assetUrl?: boolean | number
    metaData?: boolean | number
    headers?: UploadFileHeaderGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface UploadFileHeaderGenqlSelection{
    /** Upload file header key. */
    key?: boolean | number
    /** Upload file header value. */
    value?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ImageUploadFromUrlPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The URL containing the image. */
    url?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface FavoritePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The object that was added as a favorite. */
    favorite?: FavoriteGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface FavoriteCreateInput {
/** The identifier. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the favorite folder. */
folderName?: (Scalars['String'] | null),
/** The parent folder of the favorite. */
parentId?: (Scalars['String'] | null),
/** The identifier of the issue to favorite. */
issueId?: (Scalars['String'] | null),
/** The identifier of the facet to favorite. */
facetId?: (Scalars['String'] | null),
/** The identifier of the project to favorite. */
projectId?: (Scalars['String'] | null),
/** The tab of the project to favorite. */
projectTab?: (ProjectTab | null),
/** The type of the predefined view to favorite. */
predefinedViewType?: (Scalars['String'] | null),
/** The identifier of team for the predefined view to favorite. */
predefinedViewTeamId?: (Scalars['String'] | null),
/** The identifier of the cycle to favorite. */
cycleId?: (Scalars['String'] | null),
/** The identifier of the custom view to favorite. */
customViewId?: (Scalars['String'] | null),
/** The identifier of the document to favorite. */
documentId?: (Scalars['String'] | null),
/** The identifier of the roadmap to favorite. */
roadmapId?: (Scalars['String'] | null),
/** [INTERNAL] The identifier of the initiative to favorite. */
initiativeId?: (Scalars['String'] | null),
/** The tab of the initiative to favorite. */
initiativeTab?: (InitiativeTab | null),
/** The identifier of the label to favorite. */
labelId?: (Scalars['String'] | null),
/** [Internal] The identifier of the label to favorite. */
projectLabelId?: (Scalars['String'] | null),
/** The identifier of the user to favorite. */
userId?: (Scalars['String'] | null),
/** The position of the item in the favorites list. */
sortOrder?: (Scalars['Float'] | null),
/** The identifier of the customer to favorite. */
customerId?: (Scalars['String'] | null),
/** The identifier of the dashboard to favorite. */
dashboardId?: (Scalars['String'] | null)}

export interface FavoriteUpdateInput {
/** The position of the item in the favorites list. */
sortOrder?: (Scalars['Float'] | null),
/** The identifier (in UUID v4 format) of the folder to move the favorite under. */
parentId?: (Scalars['String'] | null),
/** The name of the favorite folder. */
folderName?: (Scalars['String'] | null)}

export interface EntityExternalLinkPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The link that was created or updated. */
    entityExternalLink?: EntityExternalLinkGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EntityExternalLinkCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The URL of the link. */
url: Scalars['String'],
/** The label for the link. */
label: Scalars['String'],
/** The initiative associated with the link. */
initiativeId?: (Scalars['String'] | null),
/** The project associated with the link. */
projectId?: (Scalars['String'] | null),
/** [Internal] The team associated with the link. */
teamId?: (Scalars['String'] | null),
/** [Internal] The resource folder containing the link. */
resourceFolderId?: (Scalars['String'] | null),
/** The order of the item in the entities resources list. */
sortOrder?: (Scalars['Float'] | null)}

export interface EntityExternalLinkUpdateInput {
/** The URL of the link. */
url?: (Scalars['String'] | null),
/** The label for the link. */
label?: (Scalars['String'] | null),
/** The order of the item in the entities resources list. */
sortOrder?: (Scalars['Float'] | null),
/** [Internal] The resource folder containing the link. */
resourceFolderId?: (Scalars['String'] | null)}

export interface EmojiPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The emoji that was created. */
    emoji?: EmojiGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmojiCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the custom emoji. */
name: Scalars['String'],
/** The URL for the emoji. */
url: Scalars['String']}

export interface EmailUnsubscribePayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmailUnsubscribeInput {
/** Email type to unsubscribed from. */
type: Scalars['String'],
/** The user's email validation token. */
token: Scalars['String'],
/** The identifier of the user. */
userId: Scalars['String']}

export interface EmailIntakeAddressPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The email address that was created or updated. */
    emailIntakeAddress?: EmailIntakeAddressGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** An email address that can be used for submitting issues. */
export interface EmailIntakeAddressGenqlSelection{
    /** The unique identifier of the entity. */
    id?: boolean | number
    /** The time at which the entity was created. */
    createdAt?: boolean | number
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt?: boolean | number
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: boolean | number
    /** Unique email address user name (before @) used for incoming email. */
    address?: boolean | number
    /** Whether the email address is enabled. */
    enabled?: boolean | number
    /** Whether email replies are enabled. */
    repliesEnabled?: boolean | number
    /** The template that the email address is associated with. */
    template?: TemplateGenqlSelection
    /** The team that the email address is associated with. */
    team?: TeamGenqlSelection
    /** The organization that the email address is associated with. */
    organization?: OrganizationGenqlSelection
    /** The user who created the email intake address. */
    creator?: UserGenqlSelection
    /** Whether issues created from that email address will be turned into customer requests. */
    customerRequestsEnabled?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmailIntakeAddressCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The identifier or key of the team this email address will intake issues for. */
teamId?: (Scalars['String'] | null),
/** The identifier of the template this email address will intake issues for. */
templateId?: (Scalars['String'] | null)}

export interface EmailIntakeAddressUpdateInput {
/** Whether the email address is currently enabled. If set to false, the email address will be disabled and no longer accept incoming emails. */
enabled?: (Scalars['Boolean'] | null),
/** Whether email replies are enabled. */
repliesEnabled?: (Scalars['Boolean'] | null),
/** Whether customer requests are enabled. */
customerRequestsEnabled?: (Scalars['Boolean'] | null)}

export interface DocumentPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The document that was created or updated. */
    document?: DocumentGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface DocumentCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The title of the document. */
title: Scalars['String'],
/** The icon of the document. */
icon?: (Scalars['String'] | null),
/** The color of the icon. */
color?: (Scalars['String'] | null),
/** The document content as markdown. */
content?: (Scalars['String'] | null),
/** Related project for the document. */
projectId?: (Scalars['String'] | null),
/** [Internal] Related initiative for the document. */
initiativeId?: (Scalars['String'] | null),
/** [Internal] Related team for the document. */
teamId?: (Scalars['String'] | null),
/** [Internal] The resource folder containing the document. */
resourceFolderId?: (Scalars['String'] | null),
/** The ID of the last template applied to the document. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The order of the item in the resources list. */
sortOrder?: (Scalars['Float'] | null),
/** [INTERNAL] The identifiers of the users subscribing to this document. */
subscriberIds?: (Scalars['String'][] | null)}

export interface DocumentUpdateInput {
/** The title of the document. */
title?: (Scalars['String'] | null),
/** The icon of the document. */
icon?: (Scalars['String'] | null),
/** The color of the icon. */
color?: (Scalars['String'] | null),
/** The document content as markdown. */
content?: (Scalars['String'] | null),
/** Related project for the document. */
projectId?: (Scalars['String'] | null),
/** [Internal] Related initiative for the document. */
initiativeId?: (Scalars['String'] | null),
/** [Internal] Related team for the document. */
teamId?: (Scalars['String'] | null),
/** [Internal] The resource folder containing the document. */
resourceFolderId?: (Scalars['String'] | null),
/** The ID of the last template applied to the document. */
lastAppliedTemplateId?: (Scalars['String'] | null),
/** The time at which the document was hidden. */
hiddenAt?: (Scalars['DateTime'] | null),
/** The order of the item in the resources list. */
sortOrder?: (Scalars['Float'] | null),
/** Whether the document has been trashed. */
trashed?: (Scalars['Boolean'] | null),
/** [INTERNAL] The identifiers of the users subscribing to this document. */
subscriberIds?: (Scalars['String'][] | null)}


/** A generic payload return from entity archive mutations. */
export interface DocumentArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: DocumentGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CyclePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The Cycle that was created or updated. */
    cycle?: CycleGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CycleCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The custom name of the cycle. */
name?: (Scalars['String'] | null),
/** The description of the cycle. */
description?: (Scalars['String'] | null),
/** The team to associate the cycle with. */
teamId: Scalars['String'],
/** The start date of the cycle. */
startsAt: Scalars['DateTime'],
/** The end date of the cycle. */
endsAt: Scalars['DateTime'],
/** The completion time of the cycle. If null, the cycle hasn't been completed. */
completedAt?: (Scalars['DateTime'] | null)}

export interface CycleUpdateInput {
/** The custom name of the cycle. */
name?: (Scalars['String'] | null),
/** The description of the cycle. */
description?: (Scalars['String'] | null),
/** The start date of the cycle. */
startsAt?: (Scalars['DateTime'] | null),
/** The end date of the cycle. */
endsAt?: (Scalars['DateTime'] | null),
/** The end date of the cycle. */
completedAt?: (Scalars['DateTime'] | null)}


/** A generic payload return from entity archive mutations. */
export interface CycleArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: CycleGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}


/** Input for shifting all cycles from a certain cycle onwards by a certain number of days */
export interface CycleShiftAllInput {
/** The cycle ID at which to start the shift. */
id: Scalars['String'],
/** The number of days to shift the cycles by. */
daysToShift: Scalars['Float']}

export interface CustomerTierPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The customer tier that was created or updated. */
    tier?: CustomerTierGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerTierCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the tier. */
name?: (Scalars['String'] | null),
/** The UI color of the tier as a HEX string. */
color: Scalars['String'],
/** Description of the tier. */
description?: (Scalars['String'] | null),
/** The position of the tier in the workspace's customer flow. */
position?: (Scalars['Float'] | null),
/** The display name of the tier. */
displayName?: (Scalars['String'] | null)}

export interface CustomerTierUpdateInput {
/** The name of the tier. */
name?: (Scalars['String'] | null),
/** The UI color of the tier as a HEX string. */
color?: (Scalars['String'] | null),
/** Description of the tier. */
description?: (Scalars['String'] | null),
/** The position of the tier in the workspace's customer flow. */
position?: (Scalars['Float'] | null),
/** The display name of the tier. */
displayName?: (Scalars['String'] | null)}

export interface CustomerStatusPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The customer status that was created or updated. */
    status?: CustomerStatusGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerStatusCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the status. */
name?: (Scalars['String'] | null),
/** The UI color of the status as a HEX string. */
color: Scalars['String'],
/** Description of the status. */
description?: (Scalars['String'] | null),
/** The position of the status in the workspace's customer flow. */
position?: (Scalars['Float'] | null),
/** The display name of the status. */
displayName?: (Scalars['String'] | null)}

export interface CustomerStatusUpdateInput {
/** The name of the status. */
name?: (Scalars['String'] | null),
/** The UI color of the status as a HEX string. */
color?: (Scalars['String'] | null),
/** Description of the status. */
description?: (Scalars['String'] | null),
/** The position of the status in the workspace's customer flow. */
position?: (Scalars['Float'] | null),
/** The display name of the status. */
displayName?: (Scalars['String'] | null)}

export interface CustomerPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The customer that was created or updated. */
    customer?: CustomerGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the customer. */
name: Scalars['String'],
/** The domains associated with this customer. */
domains?: (Scalars['String'][] | null),
/** The ids of the customers in external systems. */
externalIds?: (Scalars['String'][] | null),
/** The ID of the Slack channel used to interact with the customer. */
slackChannelId?: (Scalars['String'] | null),
/** The user who owns the customer. */
ownerId?: (Scalars['String'] | null),
/** The status of the customer. */
statusId?: (Scalars['String'] | null),
/** The annual revenue generated by the customer. */
revenue?: (Scalars['Int'] | null),
/** The size of the customer. */
size?: (Scalars['Int'] | null),
/** The tier of the customer customer. */
tierId?: (Scalars['String'] | null),
/** The URL of the customer's logo. */
logoUrl?: (Scalars['String'] | null),
/** The main source of the customer, for customers with multiple sources. Must be one of externalIds. */
mainSourceId?: (Scalars['String'] | null)}

export interface CustomerUpdateInput {
/** The name of the customer. */
name?: (Scalars['String'] | null),
/** The domains associated with this customer. */
domains?: (Scalars['String'][] | null),
/** The ids of the customers in external systems. */
externalIds?: (Scalars['String'][] | null),
/** The ID of the Slack channel used to interact with the customer. */
slackChannelId?: (Scalars['String'] | null),
/** The user who owns the customer. */
ownerId?: (Scalars['String'] | null),
/** The status of the customer. */
statusId?: (Scalars['String'] | null),
/** The annual revenue generated by the customer. */
revenue?: (Scalars['Int'] | null),
/** The size of the customer. */
size?: (Scalars['Int'] | null),
/** The tier of the customer customer. */
tierId?: (Scalars['String'] | null),
/** The URL of the customer's logo. */
logoUrl?: (Scalars['String'] | null),
/** The main source of the customer, for customers with multiple sources. Must be one of externalIds. */
mainSourceId?: (Scalars['String'] | null)}

export interface CustomerUpsertInput {
/** The identifier in UUID v4 format. */
id?: (Scalars['String'] | null),
/** The name of the customer. */
name?: (Scalars['String'] | null),
/** The domains associated with this customer. */
domains?: (Scalars['String'][] | null),
/** The id of the customers in external systems. */
externalId?: (Scalars['String'] | null),
/** The ID of the Slack channel used to interact with the customer. */
slackChannelId?: (Scalars['String'] | null),
/** The user who owns the customer. */
ownerId?: (Scalars['String'] | null),
/** The status of the customer. */
statusId?: (Scalars['String'] | null),
/** The annual revenue generated by the customer. */
revenue?: (Scalars['Int'] | null),
/** The size of the customer. */
size?: (Scalars['Int'] | null),
/** The tier of the customer. */
tierId?: (Scalars['String'] | null),
/** The URL of the customer's logo. */
logoUrl?: (Scalars['String'] | null),
/** The name tier of the customer. Will be created if doesn't exist */
tierName?: (Scalars['String'] | null)}

export interface CustomerNeedPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The customer need that was created or updated. */
    need?: CustomerNeedGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerNeedCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The uuid of the customer the need belongs to. */
customerId?: (Scalars['String'] | null),
/** The external ID of the customer the need belongs to. */
customerExternalId?: (Scalars['String'] | null),
/** The issue this need is referencing. */
issueId?: (Scalars['String'] | null),
/** [INTERNAL] The project this need is referencing. */
projectId?: (Scalars['String'] | null),
/** The comment this need is referencing. */
commentId?: (Scalars['String'] | null),
/** The attachment this need is referencing. */
attachmentId?: (Scalars['String'] | null),
/** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
priority?: (Scalars['Float'] | null),
/** The content of the need in markdown format. */
body?: (Scalars['String'] | null),
/** [Internal] The content of the need as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** Optional URL for the attachment associated with the customer need. */
attachmentUrl?: (Scalars['String'] | null),
/** Create need as a user with the provided name. This option is only available to OAuth applications creating needs in `actor=app` mode. */
createAsUser?: (Scalars['String'] | null),
/** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating needs in `actor=app` mode. */
displayIconUrl?: (Scalars['String'] | null)}

export interface CustomerNeedCreateFromAttachmentInput {
/** The attachment this need is created from. */
attachmentId: Scalars['String']}

export interface CustomerNeedUpdatePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The customer need that was created or updated. */
    need?: CustomerNeedGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The related customer needs that were updated. */
    updatedRelatedNeeds?: CustomerNeedGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomerNeedUpdateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The uuid of the customer the need belongs to. */
customerId?: (Scalars['String'] | null),
/** The external ID of the customer the need belongs to. */
customerExternalId?: (Scalars['String'] | null),
/** The issue this need is referencing. */
issueId?: (Scalars['String'] | null),
/** [INTERNAL] The project this need is referencing. */
projectId?: (Scalars['String'] | null),
/** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
priority?: (Scalars['Float'] | null),
/** Whether to also update the priority of needs from the same customer on the same issue/project. */
applyPriorityToRelatedNeeds?: (Scalars['Boolean'] | null),
/** The content of the need in markdown format. */
body?: (Scalars['String'] | null),
/** [Internal] The content of the need as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** Optional URL for the attachment associated with the customer need. */
attachmentUrl?: (Scalars['String'] | null)}


/** A generic payload return from entity archive mutations. */
export interface CustomerNeedArchivePayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** Whether the operation was successful. */
    success?: boolean | number
    /** The archived/unarchived entity. Null if entity was deleted. */
    entity?: CustomerNeedGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomViewPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The custom view that was created or updated. */
    customView?: CustomViewGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CustomViewCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The name of the custom view. */
name: Scalars['String'],
/** The description of the custom view. */
description?: (Scalars['String'] | null),
/** The icon of the custom view. */
icon?: (Scalars['String'] | null),
/** The color of the icon of the custom view. */
color?: (Scalars['String'] | null),
/** The id of the team associated with the custom view. */
teamId?: (Scalars['String'] | null),
/** The id of the project associated with the custom view. */
projectId?: (Scalars['String'] | null),
/** The id of the initiative associated with the custom view. */
initiativeId?: (Scalars['String'] | null),
/** The owner of the custom view. */
ownerId?: (Scalars['String'] | null),
/** The filter applied to issues in the custom view. */
filterData?: (IssueFilter | null),
/** The project filter applied to issues in the custom view. */
projectFilterData?: (ProjectFilter | null),
/** The feed item filter applied to issues in the custom view. */
feedItemFilterData?: (FeedItemFilter | null),
/** Whether the custom view is shared with everyone in the organization. */
shared?: (Scalars['Boolean'] | null)}


/** Feed item filtering options */
export interface FeedItemFilter {
/** Comparator for the identifier. */
id?: (IDComparator | null),
/** Comparator for the created at date. */
createdAt?: (DateComparator | null),
/** Comparator for the updated at date. */
updatedAt?: (DateComparator | null),
/** Filters that the feed item author must satisfy. */
author?: (UserFilter | null),
/** Comparator for the update type: initiative, project */
updateType?: (StringComparator | null),
/** Comparator for the project or initiative update health: onTrack, atRisk, offTrack */
updateHealth?: (StringComparator | null),
/** Filters that the feed item's project update must satisfy. */
projectUpdate?: (ProjectUpdateFilter | null),
/** Filters that the related feed item initiatives must satisfy. */
relatedInitiatives?: (InitiativeCollectionFilter | null),
/** Filters that the related feed item team must satisfy. */
relatedTeams?: (TeamCollectionFilter | null),
/** Compound filters, all of which need to be matched by the feed item. */
and?: (FeedItemFilter[] | null),
/** Compound filters, one of which need to be matched by the feed item. */
or?: (FeedItemFilter[] | null)}

export interface CustomViewUpdateInput {
/** The name of the custom view. */
name?: (Scalars['String'] | null),
/** The description of the custom view. */
description?: (Scalars['String'] | null),
/** The icon of the custom view. */
icon?: (Scalars['String'] | null),
/** The color of the icon of the custom view. */
color?: (Scalars['String'] | null),
/** The id of the team associated with the custom view. */
teamId?: (Scalars['String'] | null),
/** [Internal] The id of the project associated with the custom view. */
projectId?: (Scalars['String'] | null),
/** [Internal] The id of the initiative associated with the custom view. */
initiativeId?: (Scalars['String'] | null),
/** The owner of the custom view. */
ownerId?: (Scalars['String'] | null),
/** The filter applied to issues in the custom view. */
filterData?: (IssueFilter | null),
/** The project filter applied to issues in the custom view. */
projectFilterData?: (ProjectFilter | null),
/** The feed item filter applied to issues in the custom view. */
feedItemFilterData?: (FeedItemFilter | null),
/** Whether the custom view is shared with everyone in the organization. */
shared?: (Scalars['Boolean'] | null)}

export interface ContactPayloadGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ContactCreateInput {
/** The type of support contact. */
type: Scalars['String'],
/** The message the user sent. */
message: Scalars['String'],
/** User's operating system. */
operatingSystem?: (Scalars['String'] | null),
/** User's browser information. */
browser?: (Scalars['String'] | null),
/** User's device information. */
device?: (Scalars['String'] | null),
/** User's Linear client information. */
clientVersion?: (Scalars['String'] | null),
/** How disappointed the user would be if they could no longer use Linear. */
disappointmentRating?: (Scalars['Int'] | null)}


/** [INTERNAL] Input for sending a message to the Linear Sales team. */
export interface ContactSalesCreateInput {
/** Name of the person requesting information. */
name: Scalars['String'],
/** Work email of the person requesting information. */
email: Scalars['String'],
/** Size of the company. */
companySize?: (Scalars['String'] | null),
/** The message the user sent. */
message?: (Scalars['String'] | null)}

export interface CommentPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The comment that was created or updated. */
    comment?: CommentGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CommentCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The comment content in markdown format. */
body?: (Scalars['String'] | null),
/** [Internal] The comment content as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** The issue to associate the comment with. */
issueId?: (Scalars['String'] | null),
/** The project update to associate the comment with. */
projectUpdateId?: (Scalars['String'] | null),
/** The initiative update to associate the comment with. */
initiativeUpdateId?: (Scalars['String'] | null),
/** The post to associate the comment with. */
postId?: (Scalars['String'] | null),
/** The document content to associate the comment with. */
documentContentId?: (Scalars['String'] | null),
/** The parent comment under which to nest a current comment. */
parentId?: (Scalars['String'] | null),
/** Create comment as a user with the provided name. This option is only available to OAuth applications creating comments in `actor=app` mode. */
createAsUser?: (Scalars['String'] | null),
/** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
displayIconUrl?: (Scalars['String'] | null),
/** The date when the comment was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
createdAt?: (Scalars['DateTime'] | null),
/** Flag to prevent auto subscription to the issue the comment is created on. */
doNotSubscribeToIssue?: (Scalars['Boolean'] | null),
/** Flag to indicate this comment should be created on the issue's synced Slack comment thread. If no synced Slack comment thread exists, the mutation will fail. */
createOnSyncedSlackThread?: (Scalars['Boolean'] | null),
/** The text that this comment references. Only defined for inline comments. */
quotedText?: (Scalars['String'] | null),
/** [INTERNAL] The identifiers of the users subscribing to this comment thread. */
subscriberIds?: (Scalars['String'][] | null)}

export interface CommentUpdateInput {
/** The comment content. */
body?: (Scalars['String'] | null),
/** [Internal] The comment content as a Prosemirror document. */
bodyData?: (Scalars['JSON'] | null),
/** [INTERNAL] The user who resolved this thread. */
resolvingUserId?: (Scalars['String'] | null),
/** [INTERNAL] The child comment that resolves this thread. */
resolvingCommentId?: (Scalars['String'] | null),
/** The text that this comment references. Only defined for inline comments. */
quotedText?: (Scalars['String'] | null),
/** [INTERNAL] The identifiers of the users subscribing to this comment. */
subscriberIds?: (Scalars['String'][] | null),
/** [INTERNAL] Flag to prevent auto subscription to the issue the comment is updated on. */
doNotSubscribeToIssue?: (Scalars['Boolean'] | null)}

export interface EmailUserAccountAuthChallengeResponseGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    /** Supported challenge for this user account. Can be either verificationCode or password. */
    authType?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface EmailUserAccountAuthChallengeInput {
/** The email for which to generate the magic login code. */
email: Scalars['String'],
/** Whether the login was requested from the desktop app. */
isDesktop?: (Scalars['Boolean'] | null),
/** Auth code for the client initiating the sequence. */
clientAuthCode?: (Scalars['String'] | null),
/** The organization invite link to associate with this authentication. */
inviteLink?: (Scalars['String'] | null),
/** Whether to only return the login code. This is used by mobile apps to skip showing the login link. */
loginCodeOnly?: (Scalars['Boolean'] | null)}

export interface TokenUserAccountAuthInput {
/** The email which to login via the magic login code. */
email: Scalars['String'],
/** The magic login code. */
token: Scalars['String'],
/** The timezone of the user's browser. */
timezone: Scalars['String'],
/** An optional invite link for an organization. */
inviteLink?: (Scalars['String'] | null)}

export interface GoogleUserAccountAuthInput {
/** Code returned from Google's OAuth flow. */
code: Scalars['String'],
/** The URI to redirect the user to. */
redirectUri?: (Scalars['String'] | null),
/** The timezone of the user's browser. */
timezone: Scalars['String'],
/** An optional invite link for an organization used to populate available organizations. */
inviteLink?: (Scalars['String'] | null),
/** An optional parameter to disable new user signup and force login. Default: false. */
disallowSignup?: (Scalars['Boolean'] | null)}

export interface PasskeyLoginStartResponseGenqlSelection{
    success?: boolean | number
    options?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface CreateOrJoinOrganizationResponseGenqlSelection{
    organization?: AuthOrganizationGenqlSelection
    user?: AuthUserGenqlSelection
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface OnboardingCustomerSurvey {companyRole?: (Scalars['String'] | null),companySize?: (Scalars['String'] | null)}

export interface CreateOrganizationInput {
/** The name of the organization. */
name: Scalars['String'],
/** The URL key of the organization. */
urlKey: Scalars['String'],
/** Whether the organization should allow email domain access. */
domainAccess?: (Scalars['Boolean'] | null),
/** The timezone of the organization, passed in by client. */
timezone?: (Scalars['String'] | null),
/** JSON serialized UTM parameters associated with the creation of the workspace. */
utm?: (Scalars['String'] | null)}

export interface JoinOrganizationInput {
/** The identifier of the organization. */
organizationId: Scalars['String'],
/** An optional invite link for an organization. */
inviteLink?: (Scalars['String'] | null)}

export interface LogoutResponseGenqlSelection{
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AttachmentPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The issue attachment that was created. */
    attachment?: AttachmentGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AttachmentCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The attachment title. */
title: Scalars['String'],
/** The attachment subtitle. */
subtitle?: (Scalars['String'] | null),
/** Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead. */
url: Scalars['String'],
/** The issue to associate the attachment with. */
issueId: Scalars['String'],
/** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
iconUrl?: (Scalars['String'] | null),
/** Attachment metadata object with string and number values. */
metadata?: (Scalars['JSONObject'] | null),
/** Indicates if attachments for the same source application should be grouped in the Linear UI. */
groupBySource?: (Scalars['Boolean'] | null),
/** Create a linked comment with markdown body. */
commentBody?: (Scalars['String'] | null),
/** [Internal] Create a linked comment with Prosemirror body. Please use `commentBody` instead. */
commentBodyData?: (Scalars['JSONObject'] | null),
/** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=application` mode. */
createAsUser?: (Scalars['String'] | null)}

export interface AttachmentUpdateInput {
/** The attachment title. */
title: Scalars['String'],
/** The attachment subtitle. */
subtitle?: (Scalars['String'] | null),
/** Attachment metadata object with string and number values. */
metadata?: (Scalars['JSONObject'] | null),
/** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
iconUrl?: (Scalars['String'] | null)}

export interface FrontAttachmentPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The issue attachment that was created. */
    attachment?: AttachmentGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ApiKeyPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The API key that was created. */
    apiKey?: ApiKeyGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface ApiKeyCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The label for the API key. */
label: Scalars['String'],
/** The API key value. */
key: Scalars['String'],
/** List of team IDs to restrict this API key to. Default is all teams the user has access to. */
teamIds?: (Scalars['String'][] | null),
/** Scopes the API key has access to. Default is all scopes. */
scope?: (Scalars['String'][] | null)}

export interface ApiKeyUpdateInput {
/** The new label for the API key. */
label?: (Scalars['String'] | null),
/** List of team IDs to restrict this API key to. Default is all teams the user has access to. */
teamIds?: (Scalars['String'][] | null),
/** Scopes the API key has access to. Default is all scopes. */
scope?: (Scalars['String'][] | null)}

export interface AgentContextPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The agent context that was created or updated. */
    agentContext?: AgentContextGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentContextCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The comment this agent context is associated with. */
commentId: Scalars['String'],
/** The type of the agent context. */
type: AgentContextType,
/** The user who created this agent context. */
creatorId: Scalars['String'],
/** URL to the external source where this agent context was created (e.g., Slack thread, GitHub comment). */
sourceUrl: Scalars['String']}

export interface AgentContextUpdateInput {
/** The current status of the agent context. */
status?: (AgentContextStatus | null),
/** The summary of the agent context. */
summary?: (Scalars['String'] | null)}

export interface AgentActivityPayloadGenqlSelection{
    /** The identifier of the last sync operation. */
    lastSyncId?: boolean | number
    /** The agent activity that was created or updated. */
    agentActivity?: AgentActivityGenqlSelection
    /** Whether the operation was successful. */
    success?: boolean | number
    __typename?: boolean | number
    __scalar?: boolean | number
}

export interface AgentActivityCreateInput {
/** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
id?: (Scalars['String'] | null),
/** The agent context this activity belongs to. */
agentContextId: Scalars['String'],
/** The type of the activity. */
type: AgentActivityType,
/** The content payload of the agent activity. */
content: Scalars['JSONObject']}


    const CustomerNotificationSubscription_possibleTypes: string[] = ['CustomerNotificationSubscription']
    export const isCustomerNotificationSubscription = (obj?: { __typename?: any } | null): obj is CustomerNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNotificationSubscription"')
      return CustomerNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationSubscription_possibleTypes: string[] = ['CustomerNotificationSubscription','CustomViewNotificationSubscription','CycleNotificationSubscription','LabelNotificationSubscription','ProjectNotificationSubscription','InitiativeNotificationSubscription','TeamNotificationSubscription','UserNotificationSubscription']
    export const isNotificationSubscription = (obj?: { __typename?: any } | null): obj is NotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationSubscription"')
      return NotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const Entity_possibleTypes: string[] = ['CustomerNotificationSubscription','CustomViewNotificationSubscription','CycleNotificationSubscription','LabelNotificationSubscription','ProjectNotificationSubscription','InitiativeNotificationSubscription','TeamNotificationSubscription','UserNotificationSubscription','IssueNotification','ProjectNotification','InitiativeNotification','OauthClientApprovalNotification','DocumentNotification','PostNotification','CustomerNeedNotification','PullRequestNotification']
    export const isEntity = (obj?: { __typename?: any } | null): obj is Entity => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEntity"')
      return Entity_possibleTypes.includes(obj.__typename)
    }
    


    const Node_possibleTypes: string[] = ['CustomerNotificationSubscription','User','Organization','Facet','Team','WorkflowState','Issue','DocumentContent','Project','ProjectStatus','Template','ProjectUpdate','Reaction','Comment','InitiativeUpdate','Initiative','EntityExternalLink','IntegrationsSettings','InitiativeHistory','Post','ExternalUser','Favorite','Cycle','CustomView','ViewPreferences','Document','Roadmap','IssueLabel','ProjectLabel','Customer','CustomerStatus','CustomerTier','Integration','Dashboard','ProjectMilestone','ProjectHistory','ProjectRelation','CustomerNeed','Attachment','ProjectAttachment','Meeting','IssueHistory','IssueImport','IssueRelation','IssueSuggestion','TriageResponsibility','TimeSchedule','TeamMembership','GitAutomationState','GitAutomationTargetBranch','Webhook','PaidSubscription','IssueDraft','Draft','CustomViewNotificationSubscription','CycleNotificationSubscription','LabelNotificationSubscription','ProjectNotificationSubscription','InitiativeNotificationSubscription','TeamNotificationSubscription','UserNotificationSubscription','IssueNotification','ProjectNotification','InitiativeNotification','OauthClientApprovalNotification','OauthClientApproval','DocumentNotification','PostNotification','CustomerNeedNotification','PullRequestNotification','PullRequest','UserSettings','SemanticSearchResult','DocumentSearchResult','ProjectSearchResult','IssueSearchResult','RoadmapToProject','OrganizationInvite','IntegrationTemplate','InitiativeToProject','InitiativeRelation','Emoji','AuditEntry','ApiKey','AgentContext','AgentActivity','PushSubscription','OrganizationDomain','EmailIntakeAddress']
    export const isNode = (obj?: { __typename?: any } | null): obj is Node => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNode"')
      return Node_possibleTypes.includes(obj.__typename)
    }
    


    const User_possibleTypes: string[] = ['User']
    export const isUser = (obj?: { __typename?: any } | null): obj is User => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUser"')
      return User_possibleTypes.includes(obj.__typename)
    }
    


    const Organization_possibleTypes: string[] = ['Organization']
    export const isOrganization = (obj?: { __typename?: any } | null): obj is Organization => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganization"')
      return Organization_possibleTypes.includes(obj.__typename)
    }
    


    const Facet_possibleTypes: string[] = ['Facet']
    export const isFacet = (obj?: { __typename?: any } | null): obj is Facet => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFacet"')
      return Facet_possibleTypes.includes(obj.__typename)
    }
    


    const Team_possibleTypes: string[] = ['Team']
    export const isTeam = (obj?: { __typename?: any } | null): obj is Team => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeam"')
      return Team_possibleTypes.includes(obj.__typename)
    }
    


    const WorkflowState_possibleTypes: string[] = ['WorkflowState']
    export const isWorkflowState = (obj?: { __typename?: any } | null): obj is WorkflowState => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowState"')
      return WorkflowState_possibleTypes.includes(obj.__typename)
    }
    


    const IssueConnection_possibleTypes: string[] = ['IssueConnection']
    export const isIssueConnection = (obj?: { __typename?: any } | null): obj is IssueConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueConnection"')
      return IssueConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueEdge_possibleTypes: string[] = ['IssueEdge']
    export const isIssueEdge = (obj?: { __typename?: any } | null): obj is IssueEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueEdge"')
      return IssueEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Issue_possibleTypes: string[] = ['Issue']
    export const isIssue = (obj?: { __typename?: any } | null): obj is Issue => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssue"')
      return Issue_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentContent_possibleTypes: string[] = ['DocumentContent']
    export const isDocumentContent = (obj?: { __typename?: any } | null): obj is DocumentContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentContent"')
      return DocumentContent_possibleTypes.includes(obj.__typename)
    }
    


    const Project_possibleTypes: string[] = ['Project']
    export const isProject = (obj?: { __typename?: any } | null): obj is Project => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProject"')
      return Project_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatus_possibleTypes: string[] = ['ProjectStatus']
    export const isProjectStatus = (obj?: { __typename?: any } | null): obj is ProjectStatus => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatus"')
      return ProjectStatus_possibleTypes.includes(obj.__typename)
    }
    


    const Template_possibleTypes: string[] = ['Template']
    export const isTemplate = (obj?: { __typename?: any } | null): obj is Template => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTemplate"')
      return Template_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdate_possibleTypes: string[] = ['ProjectUpdate']
    export const isProjectUpdate = (obj?: { __typename?: any } | null): obj is ProjectUpdate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdate"')
      return ProjectUpdate_possibleTypes.includes(obj.__typename)
    }
    


    const Reaction_possibleTypes: string[] = ['Reaction']
    export const isReaction = (obj?: { __typename?: any } | null): obj is Reaction => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isReaction"')
      return Reaction_possibleTypes.includes(obj.__typename)
    }
    


    const Comment_possibleTypes: string[] = ['Comment']
    export const isComment = (obj?: { __typename?: any } | null): obj is Comment => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isComment"')
      return Comment_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdate_possibleTypes: string[] = ['InitiativeUpdate']
    export const isInitiativeUpdate = (obj?: { __typename?: any } | null): obj is InitiativeUpdate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdate"')
      return InitiativeUpdate_possibleTypes.includes(obj.__typename)
    }
    


    const Initiative_possibleTypes: string[] = ['Initiative']
    export const isInitiative = (obj?: { __typename?: any } | null): obj is Initiative => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiative"')
      return Initiative_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectConnection_possibleTypes: string[] = ['ProjectConnection']
    export const isProjectConnection = (obj?: { __typename?: any } | null): obj is ProjectConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectConnection"')
      return ProjectConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectEdge_possibleTypes: string[] = ['ProjectEdge']
    export const isProjectEdge = (obj?: { __typename?: any } | null): obj is ProjectEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectEdge"')
      return ProjectEdge_possibleTypes.includes(obj.__typename)
    }
    


    const PageInfo_possibleTypes: string[] = ['PageInfo']
    export const isPageInfo = (obj?: { __typename?: any } | null): obj is PageInfo => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPageInfo"')
      return PageInfo_possibleTypes.includes(obj.__typename)
    }
    


    const EntityExternalLinkConnection_possibleTypes: string[] = ['EntityExternalLinkConnection']
    export const isEntityExternalLinkConnection = (obj?: { __typename?: any } | null): obj is EntityExternalLinkConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEntityExternalLinkConnection"')
      return EntityExternalLinkConnection_possibleTypes.includes(obj.__typename)
    }
    


    const EntityExternalLinkEdge_possibleTypes: string[] = ['EntityExternalLinkEdge']
    export const isEntityExternalLinkEdge = (obj?: { __typename?: any } | null): obj is EntityExternalLinkEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEntityExternalLinkEdge"')
      return EntityExternalLinkEdge_possibleTypes.includes(obj.__typename)
    }
    


    const EntityExternalLink_possibleTypes: string[] = ['EntityExternalLink']
    export const isEntityExternalLink = (obj?: { __typename?: any } | null): obj is EntityExternalLink => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEntityExternalLink"')
      return EntityExternalLink_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationsSettings_possibleTypes: string[] = ['IntegrationsSettings']
    export const isIntegrationsSettings = (obj?: { __typename?: any } | null): obj is IntegrationsSettings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationsSettings"')
      return IntegrationsSettings_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeHistoryConnection_possibleTypes: string[] = ['InitiativeHistoryConnection']
    export const isInitiativeHistoryConnection = (obj?: { __typename?: any } | null): obj is InitiativeHistoryConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeHistoryConnection"')
      return InitiativeHistoryConnection_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeHistoryEdge_possibleTypes: string[] = ['InitiativeHistoryEdge']
    export const isInitiativeHistoryEdge = (obj?: { __typename?: any } | null): obj is InitiativeHistoryEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeHistoryEdge"')
      return InitiativeHistoryEdge_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeHistory_possibleTypes: string[] = ['InitiativeHistory']
    export const isInitiativeHistory = (obj?: { __typename?: any } | null): obj is InitiativeHistory => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeHistory"')
      return InitiativeHistory_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeConnection_possibleTypes: string[] = ['InitiativeConnection']
    export const isInitiativeConnection = (obj?: { __typename?: any } | null): obj is InitiativeConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeConnection"')
      return InitiativeConnection_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeEdge_possibleTypes: string[] = ['InitiativeEdge']
    export const isInitiativeEdge = (obj?: { __typename?: any } | null): obj is InitiativeEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeEdge"')
      return InitiativeEdge_possibleTypes.includes(obj.__typename)
    }
    


    const CommentConnection_possibleTypes: string[] = ['CommentConnection']
    export const isCommentConnection = (obj?: { __typename?: any } | null): obj is CommentConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCommentConnection"')
      return CommentConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CommentEdge_possibleTypes: string[] = ['CommentEdge']
    export const isCommentEdge = (obj?: { __typename?: any } | null): obj is CommentEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCommentEdge"')
      return CommentEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Post_possibleTypes: string[] = ['Post']
    export const isPost = (obj?: { __typename?: any } | null): obj is Post => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPost"')
      return Post_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalUser_possibleTypes: string[] = ['ExternalUser']
    export const isExternalUser = (obj?: { __typename?: any } | null): obj is ExternalUser => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalUser"')
      return ExternalUser_possibleTypes.includes(obj.__typename)
    }
    


    const ActorBot_possibleTypes: string[] = ['ActorBot']
    export const isActorBot = (obj?: { __typename?: any } | null): obj is ActorBot => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isActorBot"')
      return ActorBot_possibleTypes.includes(obj.__typename)
    }
    


    const SyncedExternalThread_possibleTypes: string[] = ['SyncedExternalThread']
    export const isSyncedExternalThread = (obj?: { __typename?: any } | null): obj is SyncedExternalThread => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSyncedExternalThread"')
      return SyncedExternalThread_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalEntityInfo_possibleTypes: string[] = ['ExternalEntityInfo']
    export const isExternalEntityInfo = (obj?: { __typename?: any } | null): obj is ExternalEntityInfo => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalEntityInfo"')
      return ExternalEntityInfo_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalEntityInfoMetadata_possibleTypes: string[] = ['ExternalEntityInfoGithubMetadata','ExternalEntityInfoJiraMetadata','ExternalEntitySlackMetadata']
    export const isExternalEntityInfoMetadata = (obj?: { __typename?: any } | null): obj is ExternalEntityInfoMetadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalEntityInfoMetadata"')
      return ExternalEntityInfoMetadata_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalEntityInfoGithubMetadata_possibleTypes: string[] = ['ExternalEntityInfoGithubMetadata']
    export const isExternalEntityInfoGithubMetadata = (obj?: { __typename?: any } | null): obj is ExternalEntityInfoGithubMetadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalEntityInfoGithubMetadata"')
      return ExternalEntityInfoGithubMetadata_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalEntityInfoJiraMetadata_possibleTypes: string[] = ['ExternalEntityInfoJiraMetadata']
    export const isExternalEntityInfoJiraMetadata = (obj?: { __typename?: any } | null): obj is ExternalEntityInfoJiraMetadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalEntityInfoJiraMetadata"')
      return ExternalEntityInfoJiraMetadata_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalEntitySlackMetadata_possibleTypes: string[] = ['ExternalEntitySlackMetadata']
    export const isExternalEntitySlackMetadata = (obj?: { __typename?: any } | null): obj is ExternalEntitySlackMetadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalEntitySlackMetadata"')
      return ExternalEntitySlackMetadata_possibleTypes.includes(obj.__typename)
    }
    


    const Favorite_possibleTypes: string[] = ['Favorite']
    export const isFavorite = (obj?: { __typename?: any } | null): obj is Favorite => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFavorite"')
      return Favorite_possibleTypes.includes(obj.__typename)
    }
    


    const FavoriteConnection_possibleTypes: string[] = ['FavoriteConnection']
    export const isFavoriteConnection = (obj?: { __typename?: any } | null): obj is FavoriteConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFavoriteConnection"')
      return FavoriteConnection_possibleTypes.includes(obj.__typename)
    }
    


    const FavoriteEdge_possibleTypes: string[] = ['FavoriteEdge']
    export const isFavoriteEdge = (obj?: { __typename?: any } | null): obj is FavoriteEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFavoriteEdge"')
      return FavoriteEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Cycle_possibleTypes: string[] = ['Cycle']
    export const isCycle = (obj?: { __typename?: any } | null): obj is Cycle => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCycle"')
      return Cycle_possibleTypes.includes(obj.__typename)
    }
    


    const CustomView_possibleTypes: string[] = ['CustomView']
    export const isCustomView = (obj?: { __typename?: any } | null): obj is CustomView => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomView"')
      return CustomView_possibleTypes.includes(obj.__typename)
    }
    


    const ViewPreferences_possibleTypes: string[] = ['ViewPreferences']
    export const isViewPreferences = (obj?: { __typename?: any } | null): obj is ViewPreferences => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isViewPreferences"')
      return ViewPreferences_possibleTypes.includes(obj.__typename)
    }
    


    const ViewPreferencesValues_possibleTypes: string[] = ['ViewPreferencesValues']
    export const isViewPreferencesValues = (obj?: { __typename?: any } | null): obj is ViewPreferencesValues => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isViewPreferencesValues"')
      return ViewPreferencesValues_possibleTypes.includes(obj.__typename)
    }
    


    const Document_possibleTypes: string[] = ['Document']
    export const isDocument = (obj?: { __typename?: any } | null): obj is Document => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocument"')
      return Document_possibleTypes.includes(obj.__typename)
    }
    


    const Roadmap_possibleTypes: string[] = ['Roadmap']
    export const isRoadmap = (obj?: { __typename?: any } | null): obj is Roadmap => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmap"')
      return Roadmap_possibleTypes.includes(obj.__typename)
    }
    


    const IssueLabel_possibleTypes: string[] = ['IssueLabel']
    export const isIssueLabel = (obj?: { __typename?: any } | null): obj is IssueLabel => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueLabel"')
      return IssueLabel_possibleTypes.includes(obj.__typename)
    }
    


    const IssueLabelConnection_possibleTypes: string[] = ['IssueLabelConnection']
    export const isIssueLabelConnection = (obj?: { __typename?: any } | null): obj is IssueLabelConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueLabelConnection"')
      return IssueLabelConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueLabelEdge_possibleTypes: string[] = ['IssueLabelEdge']
    export const isIssueLabelEdge = (obj?: { __typename?: any } | null): obj is IssueLabelEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueLabelEdge"')
      return IssueLabelEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectLabel_possibleTypes: string[] = ['ProjectLabel']
    export const isProjectLabel = (obj?: { __typename?: any } | null): obj is ProjectLabel => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectLabel"')
      return ProjectLabel_possibleTypes.includes(obj.__typename)
    }
    


    const Customer_possibleTypes: string[] = ['Customer']
    export const isCustomer = (obj?: { __typename?: any } | null): obj is Customer => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomer"')
      return Customer_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerStatus_possibleTypes: string[] = ['CustomerStatus']
    export const isCustomerStatus = (obj?: { __typename?: any } | null): obj is CustomerStatus => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerStatus"')
      return CustomerStatus_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerTier_possibleTypes: string[] = ['CustomerTier']
    export const isCustomerTier = (obj?: { __typename?: any } | null): obj is CustomerTier => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerTier"')
      return CustomerTier_possibleTypes.includes(obj.__typename)
    }
    


    const Integration_possibleTypes: string[] = ['Integration']
    export const isIntegration = (obj?: { __typename?: any } | null): obj is Integration => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegration"')
      return Integration_possibleTypes.includes(obj.__typename)
    }
    


    const Dashboard_possibleTypes: string[] = ['Dashboard']
    export const isDashboard = (obj?: { __typename?: any } | null): obj is Dashboard => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDashboard"')
      return Dashboard_possibleTypes.includes(obj.__typename)
    }
    


    const TeamConnection_possibleTypes: string[] = ['TeamConnection']
    export const isTeamConnection = (obj?: { __typename?: any } | null): obj is TeamConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamConnection"')
      return TeamConnection_possibleTypes.includes(obj.__typename)
    }
    


    const TeamEdge_possibleTypes: string[] = ['TeamEdge']
    export const isTeamEdge = (obj?: { __typename?: any } | null): obj is TeamEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamEdge"')
      return TeamEdge_possibleTypes.includes(obj.__typename)
    }
    


    const UserConnection_possibleTypes: string[] = ['UserConnection']
    export const isUserConnection = (obj?: { __typename?: any } | null): obj is UserConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserConnection"')
      return UserConnection_possibleTypes.includes(obj.__typename)
    }
    


    const UserEdge_possibleTypes: string[] = ['UserEdge']
    export const isUserEdge = (obj?: { __typename?: any } | null): obj is UserEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserEdge"')
      return UserEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdateConnection_possibleTypes: string[] = ['ProjectUpdateConnection']
    export const isProjectUpdateConnection = (obj?: { __typename?: any } | null): obj is ProjectUpdateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdateConnection"')
      return ProjectUpdateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdateEdge_possibleTypes: string[] = ['ProjectUpdateEdge']
    export const isProjectUpdateEdge = (obj?: { __typename?: any } | null): obj is ProjectUpdateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdateEdge"')
      return ProjectUpdateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentConnection_possibleTypes: string[] = ['DocumentConnection']
    export const isDocumentConnection = (obj?: { __typename?: any } | null): obj is DocumentConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentConnection"')
      return DocumentConnection_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentEdge_possibleTypes: string[] = ['DocumentEdge']
    export const isDocumentEdge = (obj?: { __typename?: any } | null): obj is DocumentEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentEdge"')
      return DocumentEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestoneConnection_possibleTypes: string[] = ['ProjectMilestoneConnection']
    export const isProjectMilestoneConnection = (obj?: { __typename?: any } | null): obj is ProjectMilestoneConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestoneConnection"')
      return ProjectMilestoneConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestoneEdge_possibleTypes: string[] = ['ProjectMilestoneEdge']
    export const isProjectMilestoneEdge = (obj?: { __typename?: any } | null): obj is ProjectMilestoneEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestoneEdge"')
      return ProjectMilestoneEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestone_possibleTypes: string[] = ['ProjectMilestone']
    export const isProjectMilestone = (obj?: { __typename?: any } | null): obj is ProjectMilestone => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestone"')
      return ProjectMilestone_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectHistoryConnection_possibleTypes: string[] = ['ProjectHistoryConnection']
    export const isProjectHistoryConnection = (obj?: { __typename?: any } | null): obj is ProjectHistoryConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectHistoryConnection"')
      return ProjectHistoryConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectHistoryEdge_possibleTypes: string[] = ['ProjectHistoryEdge']
    export const isProjectHistoryEdge = (obj?: { __typename?: any } | null): obj is ProjectHistoryEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectHistoryEdge"')
      return ProjectHistoryEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectHistory_possibleTypes: string[] = ['ProjectHistory']
    export const isProjectHistory = (obj?: { __typename?: any } | null): obj is ProjectHistory => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectHistory"')
      return ProjectHistory_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectLabelConnection_possibleTypes: string[] = ['ProjectLabelConnection']
    export const isProjectLabelConnection = (obj?: { __typename?: any } | null): obj is ProjectLabelConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectLabelConnection"')
      return ProjectLabelConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectLabelEdge_possibleTypes: string[] = ['ProjectLabelEdge']
    export const isProjectLabelEdge = (obj?: { __typename?: any } | null): obj is ProjectLabelEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectLabelEdge"')
      return ProjectLabelEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectRelationConnection_possibleTypes: string[] = ['ProjectRelationConnection']
    export const isProjectRelationConnection = (obj?: { __typename?: any } | null): obj is ProjectRelationConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectRelationConnection"')
      return ProjectRelationConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectRelationEdge_possibleTypes: string[] = ['ProjectRelationEdge']
    export const isProjectRelationEdge = (obj?: { __typename?: any } | null): obj is ProjectRelationEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectRelationEdge"')
      return ProjectRelationEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectRelation_possibleTypes: string[] = ['ProjectRelation']
    export const isProjectRelation = (obj?: { __typename?: any } | null): obj is ProjectRelation => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectRelation"')
      return ProjectRelation_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedConnection_possibleTypes: string[] = ['CustomerNeedConnection']
    export const isCustomerNeedConnection = (obj?: { __typename?: any } | null): obj is CustomerNeedConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedConnection"')
      return CustomerNeedConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedEdge_possibleTypes: string[] = ['CustomerNeedEdge']
    export const isCustomerNeedEdge = (obj?: { __typename?: any } | null): obj is CustomerNeedEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedEdge"')
      return CustomerNeedEdge_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeed_possibleTypes: string[] = ['CustomerNeed']
    export const isCustomerNeed = (obj?: { __typename?: any } | null): obj is CustomerNeed => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeed"')
      return CustomerNeed_possibleTypes.includes(obj.__typename)
    }
    


    const Attachment_possibleTypes: string[] = ['Attachment']
    export const isAttachment = (obj?: { __typename?: any } | null): obj is Attachment => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAttachment"')
      return Attachment_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectAttachment_possibleTypes: string[] = ['ProjectAttachment']
    export const isProjectAttachment = (obj?: { __typename?: any } | null): obj is ProjectAttachment => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectAttachment"')
      return ProjectAttachment_possibleTypes.includes(obj.__typename)
    }
    


    const Meeting_possibleTypes: string[] = ['Meeting']
    export const isMeeting = (obj?: { __typename?: any } | null): obj is Meeting => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMeeting"')
      return Meeting_possibleTypes.includes(obj.__typename)
    }
    


    const IssueHistoryConnection_possibleTypes: string[] = ['IssueHistoryConnection']
    export const isIssueHistoryConnection = (obj?: { __typename?: any } | null): obj is IssueHistoryConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueHistoryConnection"')
      return IssueHistoryConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueHistoryEdge_possibleTypes: string[] = ['IssueHistoryEdge']
    export const isIssueHistoryEdge = (obj?: { __typename?: any } | null): obj is IssueHistoryEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueHistoryEdge"')
      return IssueHistoryEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueHistory_possibleTypes: string[] = ['IssueHistory']
    export const isIssueHistory = (obj?: { __typename?: any } | null): obj is IssueHistory => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueHistory"')
      return IssueHistory_possibleTypes.includes(obj.__typename)
    }
    


    const IssueRelationHistoryPayload_possibleTypes: string[] = ['IssueRelationHistoryPayload']
    export const isIssueRelationHistoryPayload = (obj?: { __typename?: any } | null): obj is IssueRelationHistoryPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueRelationHistoryPayload"')
      return IssueRelationHistoryPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImport_possibleTypes: string[] = ['IssueImport']
    export const isIssueImport = (obj?: { __typename?: any } | null): obj is IssueImport => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImport"')
      return IssueImport_possibleTypes.includes(obj.__typename)
    }
    


    const IssueRelationConnection_possibleTypes: string[] = ['IssueRelationConnection']
    export const isIssueRelationConnection = (obj?: { __typename?: any } | null): obj is IssueRelationConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueRelationConnection"')
      return IssueRelationConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueRelationEdge_possibleTypes: string[] = ['IssueRelationEdge']
    export const isIssueRelationEdge = (obj?: { __typename?: any } | null): obj is IssueRelationEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueRelationEdge"')
      return IssueRelationEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueRelation_possibleTypes: string[] = ['IssueRelation']
    export const isIssueRelation = (obj?: { __typename?: any } | null): obj is IssueRelation => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueRelation"')
      return IssueRelation_possibleTypes.includes(obj.__typename)
    }
    


    const AttachmentConnection_possibleTypes: string[] = ['AttachmentConnection']
    export const isAttachmentConnection = (obj?: { __typename?: any } | null): obj is AttachmentConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAttachmentConnection"')
      return AttachmentConnection_possibleTypes.includes(obj.__typename)
    }
    


    const AttachmentEdge_possibleTypes: string[] = ['AttachmentEdge']
    export const isAttachmentEdge = (obj?: { __typename?: any } | null): obj is AttachmentEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAttachmentEdge"')
      return AttachmentEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSuggestionConnection_possibleTypes: string[] = ['IssueSuggestionConnection']
    export const isIssueSuggestionConnection = (obj?: { __typename?: any } | null): obj is IssueSuggestionConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSuggestionConnection"')
      return IssueSuggestionConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSuggestionEdge_possibleTypes: string[] = ['IssueSuggestionEdge']
    export const isIssueSuggestionEdge = (obj?: { __typename?: any } | null): obj is IssueSuggestionEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSuggestionEdge"')
      return IssueSuggestionEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSuggestion_possibleTypes: string[] = ['IssueSuggestion']
    export const isIssueSuggestion = (obj?: { __typename?: any } | null): obj is IssueSuggestion => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSuggestion"')
      return IssueSuggestion_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSuggestionMetadata_possibleTypes: string[] = ['IssueSuggestionMetadata']
    export const isIssueSuggestionMetadata = (obj?: { __typename?: any } | null): obj is IssueSuggestionMetadata => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSuggestionMetadata"')
      return IssueSuggestionMetadata_possibleTypes.includes(obj.__typename)
    }
    


    const CycleConnection_possibleTypes: string[] = ['CycleConnection']
    export const isCycleConnection = (obj?: { __typename?: any } | null): obj is CycleConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCycleConnection"')
      return CycleConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CycleEdge_possibleTypes: string[] = ['CycleEdge']
    export const isCycleEdge = (obj?: { __typename?: any } | null): obj is CycleEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCycleEdge"')
      return CycleEdge_possibleTypes.includes(obj.__typename)
    }
    


    const TriageResponsibility_possibleTypes: string[] = ['TriageResponsibility']
    export const isTriageResponsibility = (obj?: { __typename?: any } | null): obj is TriageResponsibility => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTriageResponsibility"')
      return TriageResponsibility_possibleTypes.includes(obj.__typename)
    }
    


    const TriageResponsibilityManualSelection_possibleTypes: string[] = ['TriageResponsibilityManualSelection']
    export const isTriageResponsibilityManualSelection = (obj?: { __typename?: any } | null): obj is TriageResponsibilityManualSelection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTriageResponsibilityManualSelection"')
      return TriageResponsibilityManualSelection_possibleTypes.includes(obj.__typename)
    }
    


    const TimeSchedule_possibleTypes: string[] = ['TimeSchedule']
    export const isTimeSchedule = (obj?: { __typename?: any } | null): obj is TimeSchedule => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTimeSchedule"')
      return TimeSchedule_possibleTypes.includes(obj.__typename)
    }
    


    const TimeScheduleEntry_possibleTypes: string[] = ['TimeScheduleEntry']
    export const isTimeScheduleEntry = (obj?: { __typename?: any } | null): obj is TimeScheduleEntry => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTimeScheduleEntry"')
      return TimeScheduleEntry_possibleTypes.includes(obj.__typename)
    }
    


    const TeamMembership_possibleTypes: string[] = ['TeamMembership']
    export const isTeamMembership = (obj?: { __typename?: any } | null): obj is TeamMembership => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMembership"')
      return TeamMembership_possibleTypes.includes(obj.__typename)
    }
    


    const TeamMembershipConnection_possibleTypes: string[] = ['TeamMembershipConnection']
    export const isTeamMembershipConnection = (obj?: { __typename?: any } | null): obj is TeamMembershipConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMembershipConnection"')
      return TeamMembershipConnection_possibleTypes.includes(obj.__typename)
    }
    


    const TeamMembershipEdge_possibleTypes: string[] = ['TeamMembershipEdge']
    export const isTeamMembershipEdge = (obj?: { __typename?: any } | null): obj is TeamMembershipEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMembershipEdge"')
      return TeamMembershipEdge_possibleTypes.includes(obj.__typename)
    }
    


    const WorkflowStateConnection_possibleTypes: string[] = ['WorkflowStateConnection']
    export const isWorkflowStateConnection = (obj?: { __typename?: any } | null): obj is WorkflowStateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowStateConnection"')
      return WorkflowStateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const WorkflowStateEdge_possibleTypes: string[] = ['WorkflowStateEdge']
    export const isWorkflowStateEdge = (obj?: { __typename?: any } | null): obj is WorkflowStateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowStateEdge"')
      return WorkflowStateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationStateConnection_possibleTypes: string[] = ['GitAutomationStateConnection']
    export const isGitAutomationStateConnection = (obj?: { __typename?: any } | null): obj is GitAutomationStateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationStateConnection"')
      return GitAutomationStateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationStateEdge_possibleTypes: string[] = ['GitAutomationStateEdge']
    export const isGitAutomationStateEdge = (obj?: { __typename?: any } | null): obj is GitAutomationStateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationStateEdge"')
      return GitAutomationStateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationState_possibleTypes: string[] = ['GitAutomationState']
    export const isGitAutomationState = (obj?: { __typename?: any } | null): obj is GitAutomationState => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationState"')
      return GitAutomationState_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationTargetBranch_possibleTypes: string[] = ['GitAutomationTargetBranch']
    export const isGitAutomationTargetBranch = (obj?: { __typename?: any } | null): obj is GitAutomationTargetBranch => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationTargetBranch"')
      return GitAutomationTargetBranch_possibleTypes.includes(obj.__typename)
    }
    


    const TemplateConnection_possibleTypes: string[] = ['TemplateConnection']
    export const isTemplateConnection = (obj?: { __typename?: any } | null): obj is TemplateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTemplateConnection"')
      return TemplateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const TemplateEdge_possibleTypes: string[] = ['TemplateEdge']
    export const isTemplateEdge = (obj?: { __typename?: any } | null): obj is TemplateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTemplateEdge"')
      return TemplateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const WebhookConnection_possibleTypes: string[] = ['WebhookConnection']
    export const isWebhookConnection = (obj?: { __typename?: any } | null): obj is WebhookConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWebhookConnection"')
      return WebhookConnection_possibleTypes.includes(obj.__typename)
    }
    


    const WebhookEdge_possibleTypes: string[] = ['WebhookEdge']
    export const isWebhookEdge = (obj?: { __typename?: any } | null): obj is WebhookEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWebhookEdge"')
      return WebhookEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Webhook_possibleTypes: string[] = ['Webhook']
    export const isWebhook = (obj?: { __typename?: any } | null): obj is Webhook => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWebhook"')
      return Webhook_possibleTypes.includes(obj.__typename)
    }
    


    const WebhookFailureEvent_possibleTypes: string[] = ['WebhookFailureEvent']
    export const isWebhookFailureEvent = (obj?: { __typename?: any } | null): obj is WebhookFailureEvent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWebhookFailureEvent"')
      return WebhookFailureEvent_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationIpRestriction_possibleTypes: string[] = ['OrganizationIpRestriction']
    export const isOrganizationIpRestriction = (obj?: { __typename?: any } | null): obj is OrganizationIpRestriction => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationIpRestriction"')
      return OrganizationIpRestriction_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationConnection_possibleTypes: string[] = ['IntegrationConnection']
    export const isIntegrationConnection = (obj?: { __typename?: any } | null): obj is IntegrationConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationConnection"')
      return IntegrationConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationEdge_possibleTypes: string[] = ['IntegrationEdge']
    export const isIntegrationEdge = (obj?: { __typename?: any } | null): obj is IntegrationEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationEdge"')
      return IntegrationEdge_possibleTypes.includes(obj.__typename)
    }
    


    const PaidSubscription_possibleTypes: string[] = ['PaidSubscription']
    export const isPaidSubscription = (obj?: { __typename?: any } | null): obj is PaidSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPaidSubscription"')
      return PaidSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const IssueDraftConnection_possibleTypes: string[] = ['IssueDraftConnection']
    export const isIssueDraftConnection = (obj?: { __typename?: any } | null): obj is IssueDraftConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueDraftConnection"')
      return IssueDraftConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IssueDraftEdge_possibleTypes: string[] = ['IssueDraftEdge']
    export const isIssueDraftEdge = (obj?: { __typename?: any } | null): obj is IssueDraftEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueDraftEdge"')
      return IssueDraftEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueDraft_possibleTypes: string[] = ['IssueDraft']
    export const isIssueDraft = (obj?: { __typename?: any } | null): obj is IssueDraft => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueDraft"')
      return IssueDraft_possibleTypes.includes(obj.__typename)
    }
    


    const DraftConnection_possibleTypes: string[] = ['DraftConnection']
    export const isDraftConnection = (obj?: { __typename?: any } | null): obj is DraftConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDraftConnection"')
      return DraftConnection_possibleTypes.includes(obj.__typename)
    }
    


    const DraftEdge_possibleTypes: string[] = ['DraftEdge']
    export const isDraftEdge = (obj?: { __typename?: any } | null): obj is DraftEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDraftEdge"')
      return DraftEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Draft_possibleTypes: string[] = ['Draft']
    export const isDraft = (obj?: { __typename?: any } | null): obj is Draft => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDraft"')
      return Draft_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewNotificationSubscription_possibleTypes: string[] = ['CustomViewNotificationSubscription']
    export const isCustomViewNotificationSubscription = (obj?: { __typename?: any } | null): obj is CustomViewNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewNotificationSubscription"')
      return CustomViewNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const CycleNotificationSubscription_possibleTypes: string[] = ['CycleNotificationSubscription']
    export const isCycleNotificationSubscription = (obj?: { __typename?: any } | null): obj is CycleNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCycleNotificationSubscription"')
      return CycleNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const LabelNotificationSubscription_possibleTypes: string[] = ['LabelNotificationSubscription']
    export const isLabelNotificationSubscription = (obj?: { __typename?: any } | null): obj is LabelNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isLabelNotificationSubscription"')
      return LabelNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectNotificationSubscription_possibleTypes: string[] = ['ProjectNotificationSubscription']
    export const isProjectNotificationSubscription = (obj?: { __typename?: any } | null): obj is ProjectNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectNotificationSubscription"')
      return ProjectNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeNotificationSubscription_possibleTypes: string[] = ['InitiativeNotificationSubscription']
    export const isInitiativeNotificationSubscription = (obj?: { __typename?: any } | null): obj is InitiativeNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeNotificationSubscription"')
      return InitiativeNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const TeamNotificationSubscription_possibleTypes: string[] = ['TeamNotificationSubscription']
    export const isTeamNotificationSubscription = (obj?: { __typename?: any } | null): obj is TeamNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamNotificationSubscription"')
      return TeamNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const UserNotificationSubscription_possibleTypes: string[] = ['UserNotificationSubscription']
    export const isUserNotificationSubscription = (obj?: { __typename?: any } | null): obj is UserNotificationSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserNotificationSubscription"')
      return UserNotificationSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const IssueNotification_possibleTypes: string[] = ['IssueNotification']
    export const isIssueNotification = (obj?: { __typename?: any } | null): obj is IssueNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueNotification"')
      return IssueNotification_possibleTypes.includes(obj.__typename)
    }
    


    const Notification_possibleTypes: string[] = ['IssueNotification','ProjectNotification','InitiativeNotification','OauthClientApprovalNotification','DocumentNotification','PostNotification','CustomerNeedNotification','PullRequestNotification']
    export const isNotification = (obj?: { __typename?: any } | null): obj is Notification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotification"')
      return Notification_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectNotification_possibleTypes: string[] = ['ProjectNotification']
    export const isProjectNotification = (obj?: { __typename?: any } | null): obj is ProjectNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectNotification"')
      return ProjectNotification_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeNotification_possibleTypes: string[] = ['InitiativeNotification']
    export const isInitiativeNotification = (obj?: { __typename?: any } | null): obj is InitiativeNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeNotification"')
      return InitiativeNotification_possibleTypes.includes(obj.__typename)
    }
    


    const OauthClientApprovalNotification_possibleTypes: string[] = ['OauthClientApprovalNotification']
    export const isOauthClientApprovalNotification = (obj?: { __typename?: any } | null): obj is OauthClientApprovalNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOauthClientApprovalNotification"')
      return OauthClientApprovalNotification_possibleTypes.includes(obj.__typename)
    }
    


    const OauthClientApproval_possibleTypes: string[] = ['OauthClientApproval']
    export const isOauthClientApproval = (obj?: { __typename?: any } | null): obj is OauthClientApproval => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOauthClientApproval"')
      return OauthClientApproval_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentNotification_possibleTypes: string[] = ['DocumentNotification']
    export const isDocumentNotification = (obj?: { __typename?: any } | null): obj is DocumentNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentNotification"')
      return DocumentNotification_possibleTypes.includes(obj.__typename)
    }
    


    const PostNotification_possibleTypes: string[] = ['PostNotification']
    export const isPostNotification = (obj?: { __typename?: any } | null): obj is PostNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPostNotification"')
      return PostNotification_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedNotification_possibleTypes: string[] = ['CustomerNeedNotification']
    export const isCustomerNeedNotification = (obj?: { __typename?: any } | null): obj is CustomerNeedNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedNotification"')
      return CustomerNeedNotification_possibleTypes.includes(obj.__typename)
    }
    


    const PullRequestNotification_possibleTypes: string[] = ['PullRequestNotification']
    export const isPullRequestNotification = (obj?: { __typename?: any } | null): obj is PullRequestNotification => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequestNotification"')
      return PullRequestNotification_possibleTypes.includes(obj.__typename)
    }
    


    const PullRequest_possibleTypes: string[] = ['PullRequest']
    export const isPullRequest = (obj?: { __typename?: any } | null): obj is PullRequest => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPullRequest"')
      return PullRequest_possibleTypes.includes(obj.__typename)
    }
    


    const Query_possibleTypes: string[] = ['Query']
    export const isQuery = (obj?: { __typename?: any } | null): obj is Query => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isQuery"')
      return Query_possibleTypes.includes(obj.__typename)
    }
    


    const UserSettings_possibleTypes: string[] = ['UserSettings']
    export const isUserSettings = (obj?: { __typename?: any } | null): obj is UserSettings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserSettings"')
      return UserSettings_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationDeliveryPreferences_possibleTypes: string[] = ['NotificationDeliveryPreferences']
    export const isNotificationDeliveryPreferences = (obj?: { __typename?: any } | null): obj is NotificationDeliveryPreferences => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationDeliveryPreferences"')
      return NotificationDeliveryPreferences_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationDeliveryPreferencesChannel_possibleTypes: string[] = ['NotificationDeliveryPreferencesChannel']
    export const isNotificationDeliveryPreferencesChannel = (obj?: { __typename?: any } | null): obj is NotificationDeliveryPreferencesChannel => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationDeliveryPreferencesChannel"')
      return NotificationDeliveryPreferencesChannel_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationDeliveryPreferencesSchedule_possibleTypes: string[] = ['NotificationDeliveryPreferencesSchedule']
    export const isNotificationDeliveryPreferencesSchedule = (obj?: { __typename?: any } | null): obj is NotificationDeliveryPreferencesSchedule => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationDeliveryPreferencesSchedule"')
      return NotificationDeliveryPreferencesSchedule_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationDeliveryPreferencesDay_possibleTypes: string[] = ['NotificationDeliveryPreferencesDay']
    export const isNotificationDeliveryPreferencesDay = (obj?: { __typename?: any } | null): obj is NotificationDeliveryPreferencesDay => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationDeliveryPreferencesDay"')
      return NotificationDeliveryPreferencesDay_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationCategoryPreferences_possibleTypes: string[] = ['NotificationCategoryPreferences']
    export const isNotificationCategoryPreferences = (obj?: { __typename?: any } | null): obj is NotificationCategoryPreferences => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationCategoryPreferences"')
      return NotificationCategoryPreferences_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationChannelPreferences_possibleTypes: string[] = ['NotificationChannelPreferences']
    export const isNotificationChannelPreferences = (obj?: { __typename?: any } | null): obj is NotificationChannelPreferences => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationChannelPreferences"')
      return NotificationChannelPreferences_possibleTypes.includes(obj.__typename)
    }
    


    const TriageResponsibilityConnection_possibleTypes: string[] = ['TriageResponsibilityConnection']
    export const isTriageResponsibilityConnection = (obj?: { __typename?: any } | null): obj is TriageResponsibilityConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTriageResponsibilityConnection"')
      return TriageResponsibilityConnection_possibleTypes.includes(obj.__typename)
    }
    


    const TriageResponsibilityEdge_possibleTypes: string[] = ['TriageResponsibilityEdge']
    export const isTriageResponsibilityEdge = (obj?: { __typename?: any } | null): obj is TriageResponsibilityEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTriageResponsibilityEdge"')
      return TriageResponsibilityEdge_possibleTypes.includes(obj.__typename)
    }
    


    const TimeScheduleConnection_possibleTypes: string[] = ['TimeScheduleConnection']
    export const isTimeScheduleConnection = (obj?: { __typename?: any } | null): obj is TimeScheduleConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTimeScheduleConnection"')
      return TimeScheduleConnection_possibleTypes.includes(obj.__typename)
    }
    


    const TimeScheduleEdge_possibleTypes: string[] = ['TimeScheduleEdge']
    export const isTimeScheduleEdge = (obj?: { __typename?: any } | null): obj is TimeScheduleEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTimeScheduleEdge"')
      return TimeScheduleEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectFilterSuggestionPayload_possibleTypes: string[] = ['ProjectFilterSuggestionPayload']
    export const isProjectFilterSuggestionPayload = (obj?: { __typename?: any } | null): obj is ProjectFilterSuggestionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectFilterSuggestionPayload"')
      return ProjectFilterSuggestionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const SemanticSearchPayload_possibleTypes: string[] = ['SemanticSearchPayload']
    export const isSemanticSearchPayload = (obj?: { __typename?: any } | null): obj is SemanticSearchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSemanticSearchPayload"')
      return SemanticSearchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const SemanticSearchResult_possibleTypes: string[] = ['SemanticSearchResult']
    export const isSemanticSearchResult = (obj?: { __typename?: any } | null): obj is SemanticSearchResult => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSemanticSearchResult"')
      return SemanticSearchResult_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentSearchPayload_possibleTypes: string[] = ['DocumentSearchPayload']
    export const isDocumentSearchPayload = (obj?: { __typename?: any } | null): obj is DocumentSearchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentSearchPayload"')
      return DocumentSearchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentSearchResultEdge_possibleTypes: string[] = ['DocumentSearchResultEdge']
    export const isDocumentSearchResultEdge = (obj?: { __typename?: any } | null): obj is DocumentSearchResultEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentSearchResultEdge"')
      return DocumentSearchResultEdge_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentSearchResult_possibleTypes: string[] = ['DocumentSearchResult']
    export const isDocumentSearchResult = (obj?: { __typename?: any } | null): obj is DocumentSearchResult => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentSearchResult"')
      return DocumentSearchResult_possibleTypes.includes(obj.__typename)
    }
    


    const ArchiveResponse_possibleTypes: string[] = ['ArchiveResponse']
    export const isArchiveResponse = (obj?: { __typename?: any } | null): obj is ArchiveResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isArchiveResponse"')
      return ArchiveResponse_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectSearchPayload_possibleTypes: string[] = ['ProjectSearchPayload']
    export const isProjectSearchPayload = (obj?: { __typename?: any } | null): obj is ProjectSearchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectSearchPayload"')
      return ProjectSearchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectSearchResultEdge_possibleTypes: string[] = ['ProjectSearchResultEdge']
    export const isProjectSearchResultEdge = (obj?: { __typename?: any } | null): obj is ProjectSearchResultEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectSearchResultEdge"')
      return ProjectSearchResultEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectSearchResult_possibleTypes: string[] = ['ProjectSearchResult']
    export const isProjectSearchResult = (obj?: { __typename?: any } | null): obj is ProjectSearchResult => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectSearchResult"')
      return ProjectSearchResult_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSearchPayload_possibleTypes: string[] = ['IssueSearchPayload']
    export const isIssueSearchPayload = (obj?: { __typename?: any } | null): obj is IssueSearchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSearchPayload"')
      return IssueSearchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSearchResultEdge_possibleTypes: string[] = ['IssueSearchResultEdge']
    export const isIssueSearchResultEdge = (obj?: { __typename?: any } | null): obj is IssueSearchResultEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSearchResultEdge"')
      return IssueSearchResultEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueSearchResult_possibleTypes: string[] = ['IssueSearchResult']
    export const isIssueSearchResult = (obj?: { __typename?: any } | null): obj is IssueSearchResult => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueSearchResult"')
      return IssueSearchResult_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapToProjectConnection_possibleTypes: string[] = ['RoadmapToProjectConnection']
    export const isRoadmapToProjectConnection = (obj?: { __typename?: any } | null): obj is RoadmapToProjectConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapToProjectConnection"')
      return RoadmapToProjectConnection_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapToProjectEdge_possibleTypes: string[] = ['RoadmapToProjectEdge']
    export const isRoadmapToProjectEdge = (obj?: { __typename?: any } | null): obj is RoadmapToProjectEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapToProjectEdge"')
      return RoadmapToProjectEdge_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapToProject_possibleTypes: string[] = ['RoadmapToProject']
    export const isRoadmapToProject = (obj?: { __typename?: any } | null): obj is RoadmapToProject => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapToProject"')
      return RoadmapToProject_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapConnection_possibleTypes: string[] = ['RoadmapConnection']
    export const isRoadmapConnection = (obj?: { __typename?: any } | null): obj is RoadmapConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapConnection"')
      return RoadmapConnection_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapEdge_possibleTypes: string[] = ['RoadmapEdge']
    export const isRoadmapEdge = (obj?: { __typename?: any } | null): obj is RoadmapEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapEdge"')
      return RoadmapEdge_possibleTypes.includes(obj.__typename)
    }
    


    const RateLimitPayload_possibleTypes: string[] = ['RateLimitPayload']
    export const isRateLimitPayload = (obj?: { __typename?: any } | null): obj is RateLimitPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRateLimitPayload"')
      return RateLimitPayload_possibleTypes.includes(obj.__typename)
    }
    


    const RateLimitResultPayload_possibleTypes: string[] = ['RateLimitResultPayload']
    export const isRateLimitResultPayload = (obj?: { __typename?: any } | null): obj is RateLimitResultPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRateLimitResultPayload"')
      return RateLimitResultPayload_possibleTypes.includes(obj.__typename)
    }
    


    const PushSubscriptionTestPayload_possibleTypes: string[] = ['PushSubscriptionTestPayload']
    export const isPushSubscriptionTestPayload = (obj?: { __typename?: any } | null): obj is PushSubscriptionTestPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPushSubscriptionTestPayload"')
      return PushSubscriptionTestPayload_possibleTypes.includes(obj.__typename)
    }
    


    const SummaryPayload_possibleTypes: string[] = ['SummaryPayload']
    export const isSummaryPayload = (obj?: { __typename?: any } | null): obj is SummaryPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSummaryPayload"')
      return SummaryPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatusConnection_possibleTypes: string[] = ['ProjectStatusConnection']
    export const isProjectStatusConnection = (obj?: { __typename?: any } | null): obj is ProjectStatusConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatusConnection"')
      return ProjectStatusConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatusEdge_possibleTypes: string[] = ['ProjectStatusEdge']
    export const isProjectStatusEdge = (obj?: { __typename?: any } | null): obj is ProjectStatusEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatusEdge"')
      return ProjectStatusEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatusCountPayload_possibleTypes: string[] = ['ProjectStatusCountPayload']
    export const isProjectStatusCountPayload = (obj?: { __typename?: any } | null): obj is ProjectStatusCountPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatusCountPayload"')
      return ProjectStatusCountPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationExistsPayload_possibleTypes: string[] = ['OrganizationExistsPayload']
    export const isOrganizationExistsPayload = (obj?: { __typename?: any } | null): obj is OrganizationExistsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationExistsPayload"')
      return OrganizationExistsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationMeta_possibleTypes: string[] = ['OrganizationMeta']
    export const isOrganizationMeta = (obj?: { __typename?: any } | null): obj is OrganizationMeta => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationMeta"')
      return OrganizationMeta_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInviteConnection_possibleTypes: string[] = ['OrganizationInviteConnection']
    export const isOrganizationInviteConnection = (obj?: { __typename?: any } | null): obj is OrganizationInviteConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInviteConnection"')
      return OrganizationInviteConnection_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInviteEdge_possibleTypes: string[] = ['OrganizationInviteEdge']
    export const isOrganizationInviteEdge = (obj?: { __typename?: any } | null): obj is OrganizationInviteEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInviteEdge"')
      return OrganizationInviteEdge_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInvite_possibleTypes: string[] = ['OrganizationInvite']
    export const isOrganizationInvite = (obj?: { __typename?: any } | null): obj is OrganizationInvite => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInvite"')
      return OrganizationInvite_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInviteDetailsPayload_possibleTypes: string[] = ['OrganizationInviteFullDetailsPayload','OrganizationAcceptedOrExpiredInviteDetailsPayload']
    export const isOrganizationInviteDetailsPayload = (obj?: { __typename?: any } | null): obj is OrganizationInviteDetailsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInviteDetailsPayload"')
      return OrganizationInviteDetailsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInviteFullDetailsPayload_possibleTypes: string[] = ['OrganizationInviteFullDetailsPayload']
    export const isOrganizationInviteFullDetailsPayload = (obj?: { __typename?: any } | null): obj is OrganizationInviteFullDetailsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInviteFullDetailsPayload"')
      return OrganizationInviteFullDetailsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationAcceptedOrExpiredInviteDetailsPayload_possibleTypes: string[] = ['OrganizationAcceptedOrExpiredInviteDetailsPayload']
    export const isOrganizationAcceptedOrExpiredInviteDetailsPayload = (obj?: { __typename?: any } | null): obj is OrganizationAcceptedOrExpiredInviteDetailsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationAcceptedOrExpiredInviteDetailsPayload"')
      return OrganizationAcceptedOrExpiredInviteDetailsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationDomainClaimPayload_possibleTypes: string[] = ['OrganizationDomainClaimPayload']
    export const isOrganizationDomainClaimPayload = (obj?: { __typename?: any } | null): obj is OrganizationDomainClaimPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationDomainClaimPayload"')
      return OrganizationDomainClaimPayload_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationSubscriptionConnection_possibleTypes: string[] = ['NotificationSubscriptionConnection']
    export const isNotificationSubscriptionConnection = (obj?: { __typename?: any } | null): obj is NotificationSubscriptionConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationSubscriptionConnection"')
      return NotificationSubscriptionConnection_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationSubscriptionEdge_possibleTypes: string[] = ['NotificationSubscriptionEdge']
    export const isNotificationSubscriptionEdge = (obj?: { __typename?: any } | null): obj is NotificationSubscriptionEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationSubscriptionEdge"')
      return NotificationSubscriptionEdge_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationConnection_possibleTypes: string[] = ['NotificationConnection']
    export const isNotificationConnection = (obj?: { __typename?: any } | null): obj is NotificationConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationConnection"')
      return NotificationConnection_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationEdge_possibleTypes: string[] = ['NotificationEdge']
    export const isNotificationEdge = (obj?: { __typename?: any } | null): obj is NotificationEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationEdge"')
      return NotificationEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssuePriorityValue_possibleTypes: string[] = ['IssuePriorityValue']
    export const isIssuePriorityValue = (obj?: { __typename?: any } | null): obj is IssuePriorityValue => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssuePriorityValue"')
      return IssuePriorityValue_possibleTypes.includes(obj.__typename)
    }
    


    const IssueFilterSuggestionPayload_possibleTypes: string[] = ['IssueFilterSuggestionPayload']
    export const isIssueFilterSuggestionPayload = (obj?: { __typename?: any } | null): obj is IssueFilterSuggestionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueFilterSuggestionPayload"')
      return IssueFilterSuggestionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImportCheckPayload_possibleTypes: string[] = ['IssueImportCheckPayload']
    export const isIssueImportCheckPayload = (obj?: { __typename?: any } | null): obj is IssueImportCheckPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImportCheckPayload"')
      return IssueImportCheckPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImportSyncCheckPayload_possibleTypes: string[] = ['IssueImportSyncCheckPayload']
    export const isIssueImportSyncCheckPayload = (obj?: { __typename?: any } | null): obj is IssueImportSyncCheckPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImportSyncCheckPayload"')
      return IssueImportSyncCheckPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImportJqlCheckPayload_possibleTypes: string[] = ['IssueImportJqlCheckPayload']
    export const isIssueImportJqlCheckPayload = (obj?: { __typename?: any } | null): obj is IssueImportJqlCheckPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImportJqlCheckPayload"')
      return IssueImportJqlCheckPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationTemplateConnection_possibleTypes: string[] = ['IntegrationTemplateConnection']
    export const isIntegrationTemplateConnection = (obj?: { __typename?: any } | null): obj is IntegrationTemplateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationTemplateConnection"')
      return IntegrationTemplateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationTemplateEdge_possibleTypes: string[] = ['IntegrationTemplateEdge']
    export const isIntegrationTemplateEdge = (obj?: { __typename?: any } | null): obj is IntegrationTemplateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationTemplateEdge"')
      return IntegrationTemplateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationTemplate_possibleTypes: string[] = ['IntegrationTemplate']
    export const isIntegrationTemplate = (obj?: { __typename?: any } | null): obj is IntegrationTemplate => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationTemplate"')
      return IntegrationTemplate_possibleTypes.includes(obj.__typename)
    }
    


    const GitHubEnterpriseServerInstallVerificationPayload_possibleTypes: string[] = ['GitHubEnterpriseServerInstallVerificationPayload']
    export const isGitHubEnterpriseServerInstallVerificationPayload = (obj?: { __typename?: any } | null): obj is GitHubEnterpriseServerInstallVerificationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitHubEnterpriseServerInstallVerificationPayload"')
      return GitHubEnterpriseServerInstallVerificationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationHasScopesPayload_possibleTypes: string[] = ['IntegrationHasScopesPayload']
    export const isIntegrationHasScopesPayload = (obj?: { __typename?: any } | null): obj is IntegrationHasScopesPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationHasScopesPayload"')
      return IntegrationHasScopesPayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdateConnection_possibleTypes: string[] = ['InitiativeUpdateConnection']
    export const isInitiativeUpdateConnection = (obj?: { __typename?: any } | null): obj is InitiativeUpdateConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdateConnection"')
      return InitiativeUpdateConnection_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdateEdge_possibleTypes: string[] = ['InitiativeUpdateEdge']
    export const isInitiativeUpdateEdge = (obj?: { __typename?: any } | null): obj is InitiativeUpdateEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdateEdge"')
      return InitiativeUpdateEdge_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeToProjectConnection_possibleTypes: string[] = ['InitiativeToProjectConnection']
    export const isInitiativeToProjectConnection = (obj?: { __typename?: any } | null): obj is InitiativeToProjectConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeToProjectConnection"')
      return InitiativeToProjectConnection_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeToProjectEdge_possibleTypes: string[] = ['InitiativeToProjectEdge']
    export const isInitiativeToProjectEdge = (obj?: { __typename?: any } | null): obj is InitiativeToProjectEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeToProjectEdge"')
      return InitiativeToProjectEdge_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeToProject_possibleTypes: string[] = ['InitiativeToProject']
    export const isInitiativeToProject = (obj?: { __typename?: any } | null): obj is InitiativeToProject => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeToProject"')
      return InitiativeToProject_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeRelationConnection_possibleTypes: string[] = ['InitiativeRelationConnection']
    export const isInitiativeRelationConnection = (obj?: { __typename?: any } | null): obj is InitiativeRelationConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeRelationConnection"')
      return InitiativeRelationConnection_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeRelationEdge_possibleTypes: string[] = ['InitiativeRelationEdge']
    export const isInitiativeRelationEdge = (obj?: { __typename?: any } | null): obj is InitiativeRelationEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeRelationEdge"')
      return InitiativeRelationEdge_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeRelation_possibleTypes: string[] = ['InitiativeRelation']
    export const isInitiativeRelation = (obj?: { __typename?: any } | null): obj is InitiativeRelation => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeRelation"')
      return InitiativeRelation_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalUserConnection_possibleTypes: string[] = ['ExternalUserConnection']
    export const isExternalUserConnection = (obj?: { __typename?: any } | null): obj is ExternalUserConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalUserConnection"')
      return ExternalUserConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ExternalUserEdge_possibleTypes: string[] = ['ExternalUserEdge']
    export const isExternalUserEdge = (obj?: { __typename?: any } | null): obj is ExternalUserEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isExternalUserEdge"')
      return ExternalUserEdge_possibleTypes.includes(obj.__typename)
    }
    


    const EmojiConnection_possibleTypes: string[] = ['EmojiConnection']
    export const isEmojiConnection = (obj?: { __typename?: any } | null): obj is EmojiConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmojiConnection"')
      return EmojiConnection_possibleTypes.includes(obj.__typename)
    }
    


    const EmojiEdge_possibleTypes: string[] = ['EmojiEdge']
    export const isEmojiEdge = (obj?: { __typename?: any } | null): obj is EmojiEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmojiEdge"')
      return EmojiEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Emoji_possibleTypes: string[] = ['Emoji']
    export const isEmoji = (obj?: { __typename?: any } | null): obj is Emoji => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmoji"')
      return Emoji_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentContentHistoryPayload_possibleTypes: string[] = ['DocumentContentHistoryPayload']
    export const isDocumentContentHistoryPayload = (obj?: { __typename?: any } | null): obj is DocumentContentHistoryPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentContentHistoryPayload"')
      return DocumentContentHistoryPayload_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentContentHistoryType_possibleTypes: string[] = ['DocumentContentHistoryType']
    export const isDocumentContentHistoryType = (obj?: { __typename?: any } | null): obj is DocumentContentHistoryType => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentContentHistoryType"')
      return DocumentContentHistoryType_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerTierConnection_possibleTypes: string[] = ['CustomerTierConnection']
    export const isCustomerTierConnection = (obj?: { __typename?: any } | null): obj is CustomerTierConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerTierConnection"')
      return CustomerTierConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerTierEdge_possibleTypes: string[] = ['CustomerTierEdge']
    export const isCustomerTierEdge = (obj?: { __typename?: any } | null): obj is CustomerTierEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerTierEdge"')
      return CustomerTierEdge_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerStatusConnection_possibleTypes: string[] = ['CustomerStatusConnection']
    export const isCustomerStatusConnection = (obj?: { __typename?: any } | null): obj is CustomerStatusConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerStatusConnection"')
      return CustomerStatusConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerStatusEdge_possibleTypes: string[] = ['CustomerStatusEdge']
    export const isCustomerStatusEdge = (obj?: { __typename?: any } | null): obj is CustomerStatusEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerStatusEdge"')
      return CustomerStatusEdge_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerConnection_possibleTypes: string[] = ['CustomerConnection']
    export const isCustomerConnection = (obj?: { __typename?: any } | null): obj is CustomerConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerConnection"')
      return CustomerConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerEdge_possibleTypes: string[] = ['CustomerEdge']
    export const isCustomerEdge = (obj?: { __typename?: any } | null): obj is CustomerEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerEdge"')
      return CustomerEdge_possibleTypes.includes(obj.__typename)
    }
    


    const IssueTitleSuggestionFromCustomerRequestPayload_possibleTypes: string[] = ['IssueTitleSuggestionFromCustomerRequestPayload']
    export const isIssueTitleSuggestionFromCustomerRequestPayload = (obj?: { __typename?: any } | null): obj is IssueTitleSuggestionFromCustomerRequestPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueTitleSuggestionFromCustomerRequestPayload"')
      return IssueTitleSuggestionFromCustomerRequestPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewConnection_possibleTypes: string[] = ['CustomViewConnection']
    export const isCustomViewConnection = (obj?: { __typename?: any } | null): obj is CustomViewConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewConnection"')
      return CustomViewConnection_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewEdge_possibleTypes: string[] = ['CustomViewEdge']
    export const isCustomViewEdge = (obj?: { __typename?: any } | null): obj is CustomViewEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewEdge"')
      return CustomViewEdge_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewSuggestionPayload_possibleTypes: string[] = ['CustomViewSuggestionPayload']
    export const isCustomViewSuggestionPayload = (obj?: { __typename?: any } | null): obj is CustomViewSuggestionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewSuggestionPayload"')
      return CustomViewSuggestionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewHasSubscribersPayload_possibleTypes: string[] = ['CustomViewHasSubscribersPayload']
    export const isCustomViewHasSubscribersPayload = (obj?: { __typename?: any } | null): obj is CustomViewHasSubscribersPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewHasSubscribersPayload"')
      return CustomViewHasSubscribersPayload_possibleTypes.includes(obj.__typename)
    }
    


    const AuthResolverResponse_possibleTypes: string[] = ['AuthResolverResponse']
    export const isAuthResolverResponse = (obj?: { __typename?: any } | null): obj is AuthResolverResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthResolverResponse"')
      return AuthResolverResponse_possibleTypes.includes(obj.__typename)
    }
    


    const AuthUser_possibleTypes: string[] = ['AuthUser']
    export const isAuthUser = (obj?: { __typename?: any } | null): obj is AuthUser => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthUser"')
      return AuthUser_possibleTypes.includes(obj.__typename)
    }
    


    const AuthOrganization_possibleTypes: string[] = ['AuthOrganization']
    export const isAuthOrganization = (obj?: { __typename?: any } | null): obj is AuthOrganization => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthOrganization"')
      return AuthOrganization_possibleTypes.includes(obj.__typename)
    }
    


    const AuthenticationSessionResponse_possibleTypes: string[] = ['AuthenticationSessionResponse']
    export const isAuthenticationSessionResponse = (obj?: { __typename?: any } | null): obj is AuthenticationSessionResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthenticationSessionResponse"')
      return AuthenticationSessionResponse_possibleTypes.includes(obj.__typename)
    }
    


    const SsoUrlFromEmailResponse_possibleTypes: string[] = ['SsoUrlFromEmailResponse']
    export const isSsoUrlFromEmailResponse = (obj?: { __typename?: any } | null): obj is SsoUrlFromEmailResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSsoUrlFromEmailResponse"')
      return SsoUrlFromEmailResponse_possibleTypes.includes(obj.__typename)
    }
    


    const AuditEntryType_possibleTypes: string[] = ['AuditEntryType']
    export const isAuditEntryType = (obj?: { __typename?: any } | null): obj is AuditEntryType => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntryType"')
      return AuditEntryType_possibleTypes.includes(obj.__typename)
    }
    


    const AuditEntryConnection_possibleTypes: string[] = ['AuditEntryConnection']
    export const isAuditEntryConnection = (obj?: { __typename?: any } | null): obj is AuditEntryConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntryConnection"')
      return AuditEntryConnection_possibleTypes.includes(obj.__typename)
    }
    


    const AuditEntryEdge_possibleTypes: string[] = ['AuditEntryEdge']
    export const isAuditEntryEdge = (obj?: { __typename?: any } | null): obj is AuditEntryEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntryEdge"')
      return AuditEntryEdge_possibleTypes.includes(obj.__typename)
    }
    


    const AuditEntry_possibleTypes: string[] = ['AuditEntry']
    export const isAuditEntry = (obj?: { __typename?: any } | null): obj is AuditEntry => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuditEntry"')
      return AuditEntry_possibleTypes.includes(obj.__typename)
    }
    


    const AttachmentSourcesPayload_possibleTypes: string[] = ['AttachmentSourcesPayload']
    export const isAttachmentSourcesPayload = (obj?: { __typename?: any } | null): obj is AttachmentSourcesPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAttachmentSourcesPayload"')
      return AttachmentSourcesPayload_possibleTypes.includes(obj.__typename)
    }
    


    const Application_possibleTypes: string[] = ['Application']
    export const isApplication = (obj?: { __typename?: any } | null): obj is Application => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isApplication"')
      return Application_possibleTypes.includes(obj.__typename)
    }
    


    const WorkspaceAuthorizedApplication_possibleTypes: string[] = ['WorkspaceAuthorizedApplication']
    export const isWorkspaceAuthorizedApplication = (obj?: { __typename?: any } | null): obj is WorkspaceAuthorizedApplication => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkspaceAuthorizedApplication"')
      return WorkspaceAuthorizedApplication_possibleTypes.includes(obj.__typename)
    }
    


    const AuthMembership_possibleTypes: string[] = ['AuthMembership']
    export const isAuthMembership = (obj?: { __typename?: any } | null): obj is AuthMembership => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthMembership"')
      return AuthMembership_possibleTypes.includes(obj.__typename)
    }
    


    const UserAuthorizedApplication_possibleTypes: string[] = ['UserAuthorizedApplication']
    export const isUserAuthorizedApplication = (obj?: { __typename?: any } | null): obj is UserAuthorizedApplication => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserAuthorizedApplication"')
      return UserAuthorizedApplication_possibleTypes.includes(obj.__typename)
    }
    


    const AppUserAuthentication_possibleTypes: string[] = ['AppUserAuthentication']
    export const isAppUserAuthentication = (obj?: { __typename?: any } | null): obj is AppUserAuthentication => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAppUserAuthentication"')
      return AppUserAuthentication_possibleTypes.includes(obj.__typename)
    }
    


    const AuthorizingUser_possibleTypes: string[] = ['AuthorizingUser']
    export const isAuthorizingUser = (obj?: { __typename?: any } | null): obj is AuthorizingUser => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthorizingUser"')
      return AuthorizingUser_possibleTypes.includes(obj.__typename)
    }
    


    const AuthorizedApplication_possibleTypes: string[] = ['AuthorizedApplication']
    export const isAuthorizedApplication = (obj?: { __typename?: any } | null): obj is AuthorizedApplication => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAuthorizedApplication"')
      return AuthorizedApplication_possibleTypes.includes(obj.__typename)
    }
    


    const WorkspaceAuthorizedApplicationWithAppUser_possibleTypes: string[] = ['WorkspaceAuthorizedApplicationWithAppUser']
    export const isWorkspaceAuthorizedApplicationWithAppUser = (obj?: { __typename?: any } | null): obj is WorkspaceAuthorizedApplicationWithAppUser => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkspaceAuthorizedApplicationWithAppUser"')
      return WorkspaceAuthorizedApplicationWithAppUser_possibleTypes.includes(obj.__typename)
    }
    


    const WorkspaceAuthorizedApplicationWithMemberships_possibleTypes: string[] = ['WorkspaceAuthorizedApplicationWithMemberships']
    export const isWorkspaceAuthorizedApplicationWithMemberships = (obj?: { __typename?: any } | null): obj is WorkspaceAuthorizedApplicationWithMemberships => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkspaceAuthorizedApplicationWithMemberships"')
      return WorkspaceAuthorizedApplicationWithMemberships_possibleTypes.includes(obj.__typename)
    }
    


    const ApiKeyConnection_possibleTypes: string[] = ['ApiKeyConnection']
    export const isApiKeyConnection = (obj?: { __typename?: any } | null): obj is ApiKeyConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isApiKeyConnection"')
      return ApiKeyConnection_possibleTypes.includes(obj.__typename)
    }
    


    const ApiKeyEdge_possibleTypes: string[] = ['ApiKeyEdge']
    export const isApiKeyEdge = (obj?: { __typename?: any } | null): obj is ApiKeyEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isApiKeyEdge"')
      return ApiKeyEdge_possibleTypes.includes(obj.__typename)
    }
    


    const ApiKey_possibleTypes: string[] = ['ApiKey']
    export const isApiKey = (obj?: { __typename?: any } | null): obj is ApiKey => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isApiKey"')
      return ApiKey_possibleTypes.includes(obj.__typename)
    }
    


    const AgentContextConnection_possibleTypes: string[] = ['AgentContextConnection']
    export const isAgentContextConnection = (obj?: { __typename?: any } | null): obj is AgentContextConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentContextConnection"')
      return AgentContextConnection_possibleTypes.includes(obj.__typename)
    }
    


    const AgentContextEdge_possibleTypes: string[] = ['AgentContextEdge']
    export const isAgentContextEdge = (obj?: { __typename?: any } | null): obj is AgentContextEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentContextEdge"')
      return AgentContextEdge_possibleTypes.includes(obj.__typename)
    }
    


    const AgentContext_possibleTypes: string[] = ['AgentContext']
    export const isAgentContext = (obj?: { __typename?: any } | null): obj is AgentContext => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentContext"')
      return AgentContext_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivity_possibleTypes: string[] = ['AgentActivity']
    export const isAgentActivity = (obj?: { __typename?: any } | null): obj is AgentActivity => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivity"')
      return AgentActivity_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityContent_possibleTypes: string[] = ['AgentActivityObservationContent','AgentActivityActionContent','AgentActivityResponseContent','AgentActivityErrorContent']
    export const isAgentActivityContent = (obj?: { __typename?: any } | null): obj is AgentActivityContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityContent"')
      return AgentActivityContent_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityObservationContent_possibleTypes: string[] = ['AgentActivityObservationContent']
    export const isAgentActivityObservationContent = (obj?: { __typename?: any } | null): obj is AgentActivityObservationContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityObservationContent"')
      return AgentActivityObservationContent_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityActionContent_possibleTypes: string[] = ['AgentActivityActionContent']
    export const isAgentActivityActionContent = (obj?: { __typename?: any } | null): obj is AgentActivityActionContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityActionContent"')
      return AgentActivityActionContent_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityResponseContent_possibleTypes: string[] = ['AgentActivityResponseContent']
    export const isAgentActivityResponseContent = (obj?: { __typename?: any } | null): obj is AgentActivityResponseContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityResponseContent"')
      return AgentActivityResponseContent_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityErrorContent_possibleTypes: string[] = ['AgentActivityErrorContent']
    export const isAgentActivityErrorContent = (obj?: { __typename?: any } | null): obj is AgentActivityErrorContent => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityErrorContent"')
      return AgentActivityErrorContent_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityConnection_possibleTypes: string[] = ['AgentActivityConnection']
    export const isAgentActivityConnection = (obj?: { __typename?: any } | null): obj is AgentActivityConnection => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityConnection"')
      return AgentActivityConnection_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityEdge_possibleTypes: string[] = ['AgentActivityEdge']
    export const isAgentActivityEdge = (obj?: { __typename?: any } | null): obj is AgentActivityEdge => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityEdge"')
      return AgentActivityEdge_possibleTypes.includes(obj.__typename)
    }
    


    const Mutation_possibleTypes: string[] = ['Mutation']
    export const isMutation = (obj?: { __typename?: any } | null): obj is Mutation => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isMutation"')
      return Mutation_possibleTypes.includes(obj.__typename)
    }
    


    const WorkflowStatePayload_possibleTypes: string[] = ['WorkflowStatePayload']
    export const isWorkflowStatePayload = (obj?: { __typename?: any } | null): obj is WorkflowStatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowStatePayload"')
      return WorkflowStatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const WorkflowStateArchivePayload_possibleTypes: string[] = ['WorkflowStateArchivePayload']
    export const isWorkflowStateArchivePayload = (obj?: { __typename?: any } | null): obj is WorkflowStateArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWorkflowStateArchivePayload"')
      return WorkflowStateArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ArchivePayload_possibleTypes: string[] = ['WorkflowStateArchivePayload','DeletePayload','ProjectArchivePayload','TeamArchivePayload','RoadmapArchivePayload','ProjectUpdateArchivePayload','ProjectStatusArchivePayload','NotificationArchivePayload','IssueArchivePayload','InitiativeUpdateArchivePayload','InitiativeArchivePayload','DocumentArchivePayload','CycleArchivePayload','CustomerNeedArchivePayload']
    export const isArchivePayload = (obj?: { __typename?: any } | null): obj is ArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isArchivePayload"')
      return ArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const WebhookPayload_possibleTypes: string[] = ['WebhookPayload']
    export const isWebhookPayload = (obj?: { __typename?: any } | null): obj is WebhookPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isWebhookPayload"')
      return WebhookPayload_possibleTypes.includes(obj.__typename)
    }
    


    const DeletePayload_possibleTypes: string[] = ['DeletePayload']
    export const isDeletePayload = (obj?: { __typename?: any } | null): obj is DeletePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDeletePayload"')
      return DeletePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ViewPreferencesPayload_possibleTypes: string[] = ['ViewPreferencesPayload']
    export const isViewPreferencesPayload = (obj?: { __typename?: any } | null): obj is ViewPreferencesPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isViewPreferencesPayload"')
      return ViewPreferencesPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UserSettingsPayload_possibleTypes: string[] = ['UserSettingsPayload']
    export const isUserSettingsPayload = (obj?: { __typename?: any } | null): obj is UserSettingsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserSettingsPayload"')
      return UserSettingsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UserSettingsFlagsResetPayload_possibleTypes: string[] = ['UserSettingsFlagsResetPayload']
    export const isUserSettingsFlagsResetPayload = (obj?: { __typename?: any } | null): obj is UserSettingsFlagsResetPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserSettingsFlagsResetPayload"')
      return UserSettingsFlagsResetPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UserSettingsFlagPayload_possibleTypes: string[] = ['UserSettingsFlagPayload']
    export const isUserSettingsFlagPayload = (obj?: { __typename?: any } | null): obj is UserSettingsFlagPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserSettingsFlagPayload"')
      return UserSettingsFlagPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UserPayload_possibleTypes: string[] = ['UserPayload']
    export const isUserPayload = (obj?: { __typename?: any } | null): obj is UserPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserPayload"')
      return UserPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UserAdminPayload_possibleTypes: string[] = ['UserAdminPayload']
    export const isUserAdminPayload = (obj?: { __typename?: any } | null): obj is UserAdminPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUserAdminPayload"')
      return UserAdminPayload_possibleTypes.includes(obj.__typename)
    }
    


    const TriageResponsibilityPayload_possibleTypes: string[] = ['TriageResponsibilityPayload']
    export const isTriageResponsibilityPayload = (obj?: { __typename?: any } | null): obj is TriageResponsibilityPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTriageResponsibilityPayload"')
      return TriageResponsibilityPayload_possibleTypes.includes(obj.__typename)
    }
    


    const TimeSchedulePayload_possibleTypes: string[] = ['TimeSchedulePayload']
    export const isTimeSchedulePayload = (obj?: { __typename?: any } | null): obj is TimeSchedulePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTimeSchedulePayload"')
      return TimeSchedulePayload_possibleTypes.includes(obj.__typename)
    }
    


    const TemplatePayload_possibleTypes: string[] = ['TemplatePayload']
    export const isTemplatePayload = (obj?: { __typename?: any } | null): obj is TemplatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTemplatePayload"')
      return TemplatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectPayload_possibleTypes: string[] = ['ProjectPayload']
    export const isProjectPayload = (obj?: { __typename?: any } | null): obj is ProjectPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectPayload"')
      return ProjectPayload_possibleTypes.includes(obj.__typename)
    }
    


    const SuccessPayload_possibleTypes: string[] = ['SuccessPayload']
    export const isSuccessPayload = (obj?: { __typename?: any } | null): obj is SuccessPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSuccessPayload"')
      return SuccessPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectArchivePayload_possibleTypes: string[] = ['ProjectArchivePayload']
    export const isProjectArchivePayload = (obj?: { __typename?: any } | null): obj is ProjectArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectArchivePayload"')
      return ProjectArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const TeamPayload_possibleTypes: string[] = ['TeamPayload']
    export const isTeamPayload = (obj?: { __typename?: any } | null): obj is TeamPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamPayload"')
      return TeamPayload_possibleTypes.includes(obj.__typename)
    }
    


    const TeamArchivePayload_possibleTypes: string[] = ['TeamArchivePayload']
    export const isTeamArchivePayload = (obj?: { __typename?: any } | null): obj is TeamArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamArchivePayload"')
      return TeamArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const TeamMembershipPayload_possibleTypes: string[] = ['TeamMembershipPayload']
    export const isTeamMembershipPayload = (obj?: { __typename?: any } | null): obj is TeamMembershipPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isTeamMembershipPayload"')
      return TeamMembershipPayload_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapToProjectPayload_possibleTypes: string[] = ['RoadmapToProjectPayload']
    export const isRoadmapToProjectPayload = (obj?: { __typename?: any } | null): obj is RoadmapToProjectPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapToProjectPayload"')
      return RoadmapToProjectPayload_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapPayload_possibleTypes: string[] = ['RoadmapPayload']
    export const isRoadmapPayload = (obj?: { __typename?: any } | null): obj is RoadmapPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapPayload"')
      return RoadmapPayload_possibleTypes.includes(obj.__typename)
    }
    


    const RoadmapArchivePayload_possibleTypes: string[] = ['RoadmapArchivePayload']
    export const isRoadmapArchivePayload = (obj?: { __typename?: any } | null): obj is RoadmapArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isRoadmapArchivePayload"')
      return RoadmapArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CreateCsvExportReportPayload_possibleTypes: string[] = ['CreateCsvExportReportPayload']
    export const isCreateCsvExportReportPayload = (obj?: { __typename?: any } | null): obj is CreateCsvExportReportPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCreateCsvExportReportPayload"')
      return CreateCsvExportReportPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ReactionPayload_possibleTypes: string[] = ['ReactionPayload']
    export const isReactionPayload = (obj?: { __typename?: any } | null): obj is ReactionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isReactionPayload"')
      return ReactionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const PushSubscriptionPayload_possibleTypes: string[] = ['PushSubscriptionPayload']
    export const isPushSubscriptionPayload = (obj?: { __typename?: any } | null): obj is PushSubscriptionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPushSubscriptionPayload"')
      return PushSubscriptionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const PushSubscription_possibleTypes: string[] = ['PushSubscription']
    export const isPushSubscription = (obj?: { __typename?: any } | null): obj is PushSubscription => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPushSubscription"')
      return PushSubscription_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdatePayload_possibleTypes: string[] = ['ProjectUpdatePayload']
    export const isProjectUpdatePayload = (obj?: { __typename?: any } | null): obj is ProjectUpdatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdatePayload"')
      return ProjectUpdatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdateArchivePayload_possibleTypes: string[] = ['ProjectUpdateArchivePayload']
    export const isProjectUpdateArchivePayload = (obj?: { __typename?: any } | null): obj is ProjectUpdateArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdateArchivePayload"')
      return ProjectUpdateArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectUpdateReminderPayload_possibleTypes: string[] = ['ProjectUpdateReminderPayload']
    export const isProjectUpdateReminderPayload = (obj?: { __typename?: any } | null): obj is ProjectUpdateReminderPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectUpdateReminderPayload"')
      return ProjectUpdateReminderPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatusPayload_possibleTypes: string[] = ['ProjectStatusPayload']
    export const isProjectStatusPayload = (obj?: { __typename?: any } | null): obj is ProjectStatusPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatusPayload"')
      return ProjectStatusPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectStatusArchivePayload_possibleTypes: string[] = ['ProjectStatusArchivePayload']
    export const isProjectStatusArchivePayload = (obj?: { __typename?: any } | null): obj is ProjectStatusArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectStatusArchivePayload"')
      return ProjectStatusArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectRelationPayload_possibleTypes: string[] = ['ProjectRelationPayload']
    export const isProjectRelationPayload = (obj?: { __typename?: any } | null): obj is ProjectRelationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectRelationPayload"')
      return ProjectRelationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestonePayload_possibleTypes: string[] = ['ProjectMilestonePayload']
    export const isProjectMilestonePayload = (obj?: { __typename?: any } | null): obj is ProjectMilestonePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestonePayload"')
      return ProjectMilestonePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestoneMovePayload_possibleTypes: string[] = ['ProjectMilestoneMovePayload']
    export const isProjectMilestoneMovePayload = (obj?: { __typename?: any } | null): obj is ProjectMilestoneMovePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestoneMovePayload"')
      return ProjectMilestoneMovePayload_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestoneMoveIssueToTeam_possibleTypes: string[] = ['ProjectMilestoneMoveIssueToTeam']
    export const isProjectMilestoneMoveIssueToTeam = (obj?: { __typename?: any } | null): obj is ProjectMilestoneMoveIssueToTeam => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestoneMoveIssueToTeam"')
      return ProjectMilestoneMoveIssueToTeam_possibleTypes.includes(obj.__typename)
    }
    


    const ProjectMilestoneMoveProjectTeams_possibleTypes: string[] = ['ProjectMilestoneMoveProjectTeams']
    export const isProjectMilestoneMoveProjectTeams = (obj?: { __typename?: any } | null): obj is ProjectMilestoneMoveProjectTeams => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isProjectMilestoneMoveProjectTeams"')
      return ProjectMilestoneMoveProjectTeams_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationPayload_possibleTypes: string[] = ['OrganizationPayload']
    export const isOrganizationPayload = (obj?: { __typename?: any } | null): obj is OrganizationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationPayload"')
      return OrganizationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationDeletePayload_possibleTypes: string[] = ['OrganizationDeletePayload']
    export const isOrganizationDeletePayload = (obj?: { __typename?: any } | null): obj is OrganizationDeletePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationDeletePayload"')
      return OrganizationDeletePayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationCancelDeletePayload_possibleTypes: string[] = ['OrganizationCancelDeletePayload']
    export const isOrganizationCancelDeletePayload = (obj?: { __typename?: any } | null): obj is OrganizationCancelDeletePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationCancelDeletePayload"')
      return OrganizationCancelDeletePayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationStartTrialPayload_possibleTypes: string[] = ['OrganizationStartTrialPayload']
    export const isOrganizationStartTrialPayload = (obj?: { __typename?: any } | null): obj is OrganizationStartTrialPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationStartTrialPayload"')
      return OrganizationStartTrialPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationInvitePayload_possibleTypes: string[] = ['OrganizationInvitePayload']
    export const isOrganizationInvitePayload = (obj?: { __typename?: any } | null): obj is OrganizationInvitePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationInvitePayload"')
      return OrganizationInvitePayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationDomainSimplePayload_possibleTypes: string[] = ['OrganizationDomainSimplePayload']
    export const isOrganizationDomainSimplePayload = (obj?: { __typename?: any } | null): obj is OrganizationDomainSimplePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationDomainSimplePayload"')
      return OrganizationDomainSimplePayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationDomainPayload_possibleTypes: string[] = ['OrganizationDomainPayload']
    export const isOrganizationDomainPayload = (obj?: { __typename?: any } | null): obj is OrganizationDomainPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationDomainPayload"')
      return OrganizationDomainPayload_possibleTypes.includes(obj.__typename)
    }
    


    const OrganizationDomain_possibleTypes: string[] = ['OrganizationDomain']
    export const isOrganizationDomain = (obj?: { __typename?: any } | null): obj is OrganizationDomain => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isOrganizationDomain"')
      return OrganizationDomain_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationSubscriptionPayload_possibleTypes: string[] = ['NotificationSubscriptionPayload']
    export const isNotificationSubscriptionPayload = (obj?: { __typename?: any } | null): obj is NotificationSubscriptionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationSubscriptionPayload"')
      return NotificationSubscriptionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationPayload_possibleTypes: string[] = ['NotificationPayload']
    export const isNotificationPayload = (obj?: { __typename?: any } | null): obj is NotificationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationPayload"')
      return NotificationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationBatchActionPayload_possibleTypes: string[] = ['NotificationBatchActionPayload']
    export const isNotificationBatchActionPayload = (obj?: { __typename?: any } | null): obj is NotificationBatchActionPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationBatchActionPayload"')
      return NotificationBatchActionPayload_possibleTypes.includes(obj.__typename)
    }
    


    const NotificationArchivePayload_possibleTypes: string[] = ['NotificationArchivePayload']
    export const isNotificationArchivePayload = (obj?: { __typename?: any } | null): obj is NotificationArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isNotificationArchivePayload"')
      return NotificationArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssuePayload_possibleTypes: string[] = ['IssuePayload']
    export const isIssuePayload = (obj?: { __typename?: any } | null): obj is IssuePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssuePayload"')
      return IssuePayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueBatchPayload_possibleTypes: string[] = ['IssueBatchPayload']
    export const isIssueBatchPayload = (obj?: { __typename?: any } | null): obj is IssueBatchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueBatchPayload"')
      return IssueBatchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueArchivePayload_possibleTypes: string[] = ['IssueArchivePayload']
    export const isIssueArchivePayload = (obj?: { __typename?: any } | null): obj is IssueArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueArchivePayload"')
      return IssueArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueRelationPayload_possibleTypes: string[] = ['IssueRelationPayload']
    export const isIssueRelationPayload = (obj?: { __typename?: any } | null): obj is IssueRelationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueRelationPayload"')
      return IssueRelationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueLabelPayload_possibleTypes: string[] = ['IssueLabelPayload']
    export const isIssueLabelPayload = (obj?: { __typename?: any } | null): obj is IssueLabelPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueLabelPayload"')
      return IssueLabelPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImportPayload_possibleTypes: string[] = ['IssueImportPayload']
    export const isIssueImportPayload = (obj?: { __typename?: any } | null): obj is IssueImportPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImportPayload"')
      return IssueImportPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IssueImportDeletePayload_possibleTypes: string[] = ['IssueImportDeletePayload']
    export const isIssueImportDeletePayload = (obj?: { __typename?: any } | null): obj is IssueImportDeletePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIssueImportDeletePayload"')
      return IssueImportDeletePayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationsSettingsPayload_possibleTypes: string[] = ['IntegrationsSettingsPayload']
    export const isIntegrationsSettingsPayload = (obj?: { __typename?: any } | null): obj is IntegrationsSettingsPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationsSettingsPayload"')
      return IntegrationsSettingsPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationTemplatePayload_possibleTypes: string[] = ['IntegrationTemplatePayload']
    export const isIntegrationTemplatePayload = (obj?: { __typename?: any } | null): obj is IntegrationTemplatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationTemplatePayload"')
      return IntegrationTemplatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationPayload_possibleTypes: string[] = ['IntegrationPayload']
    export const isIntegrationPayload = (obj?: { __typename?: any } | null): obj is IntegrationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationPayload"')
      return IntegrationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const GitHubCommitIntegrationPayload_possibleTypes: string[] = ['GitHubCommitIntegrationPayload']
    export const isGitHubCommitIntegrationPayload = (obj?: { __typename?: any } | null): obj is GitHubCommitIntegrationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitHubCommitIntegrationPayload"')
      return GitHubCommitIntegrationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const GitHubEnterpriseServerPayload_possibleTypes: string[] = ['GitHubEnterpriseServerPayload']
    export const isGitHubEnterpriseServerPayload = (obj?: { __typename?: any } | null): obj is GitHubEnterpriseServerPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitHubEnterpriseServerPayload"')
      return GitHubEnterpriseServerPayload_possibleTypes.includes(obj.__typename)
    }
    


    const GitLabIntegrationCreatePayload_possibleTypes: string[] = ['GitLabIntegrationCreatePayload']
    export const isGitLabIntegrationCreatePayload = (obj?: { __typename?: any } | null): obj is GitLabIntegrationCreatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitLabIntegrationCreatePayload"')
      return GitLabIntegrationCreatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const AsksChannelConnectPayload_possibleTypes: string[] = ['AsksChannelConnectPayload']
    export const isAsksChannelConnectPayload = (obj?: { __typename?: any } | null): obj is AsksChannelConnectPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAsksChannelConnectPayload"')
      return AsksChannelConnectPayload_possibleTypes.includes(obj.__typename)
    }
    


    const SlackChannelNameMapping_possibleTypes: string[] = ['SlackChannelNameMapping']
    export const isSlackChannelNameMapping = (obj?: { __typename?: any } | null): obj is SlackChannelNameMapping => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSlackChannelNameMapping"')
      return SlackChannelNameMapping_possibleTypes.includes(obj.__typename)
    }
    


    const SlackAsksTeamSettings_possibleTypes: string[] = ['SlackAsksTeamSettings']
    export const isSlackAsksTeamSettings = (obj?: { __typename?: any } | null): obj is SlackAsksTeamSettings => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSlackAsksTeamSettings"')
      return SlackAsksTeamSettings_possibleTypes.includes(obj.__typename)
    }
    


    const SlackChannelConnectPayload_possibleTypes: string[] = ['SlackChannelConnectPayload']
    export const isSlackChannelConnectPayload = (obj?: { __typename?: any } | null): obj is SlackChannelConnectPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isSlackChannelConnectPayload"')
      return SlackChannelConnectPayload_possibleTypes.includes(obj.__typename)
    }
    


    const IntegrationRequestPayload_possibleTypes: string[] = ['IntegrationRequestPayload']
    export const isIntegrationRequestPayload = (obj?: { __typename?: any } | null): obj is IntegrationRequestPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isIntegrationRequestPayload"')
      return IntegrationRequestPayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdatePayload_possibleTypes: string[] = ['InitiativeUpdatePayload']
    export const isInitiativeUpdatePayload = (obj?: { __typename?: any } | null): obj is InitiativeUpdatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdatePayload"')
      return InitiativeUpdatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdateArchivePayload_possibleTypes: string[] = ['InitiativeUpdateArchivePayload']
    export const isInitiativeUpdateArchivePayload = (obj?: { __typename?: any } | null): obj is InitiativeUpdateArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdateArchivePayload"')
      return InitiativeUpdateArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeUpdateReminderPayload_possibleTypes: string[] = ['InitiativeUpdateReminderPayload']
    export const isInitiativeUpdateReminderPayload = (obj?: { __typename?: any } | null): obj is InitiativeUpdateReminderPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeUpdateReminderPayload"')
      return InitiativeUpdateReminderPayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeToProjectPayload_possibleTypes: string[] = ['InitiativeToProjectPayload']
    export const isInitiativeToProjectPayload = (obj?: { __typename?: any } | null): obj is InitiativeToProjectPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeToProjectPayload"')
      return InitiativeToProjectPayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativePayload_possibleTypes: string[] = ['InitiativePayload']
    export const isInitiativePayload = (obj?: { __typename?: any } | null): obj is InitiativePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativePayload"')
      return InitiativePayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeArchivePayload_possibleTypes: string[] = ['InitiativeArchivePayload']
    export const isInitiativeArchivePayload = (obj?: { __typename?: any } | null): obj is InitiativeArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeArchivePayload"')
      return InitiativeArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const InitiativeRelationPayload_possibleTypes: string[] = ['InitiativeRelationPayload']
    export const isInitiativeRelationPayload = (obj?: { __typename?: any } | null): obj is InitiativeRelationPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isInitiativeRelationPayload"')
      return InitiativeRelationPayload_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationTargetBranchPayload_possibleTypes: string[] = ['GitAutomationTargetBranchPayload']
    export const isGitAutomationTargetBranchPayload = (obj?: { __typename?: any } | null): obj is GitAutomationTargetBranchPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationTargetBranchPayload"')
      return GitAutomationTargetBranchPayload_possibleTypes.includes(obj.__typename)
    }
    


    const GitAutomationStatePayload_possibleTypes: string[] = ['GitAutomationStatePayload']
    export const isGitAutomationStatePayload = (obj?: { __typename?: any } | null): obj is GitAutomationStatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isGitAutomationStatePayload"')
      return GitAutomationStatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const UploadPayload_possibleTypes: string[] = ['UploadPayload']
    export const isUploadPayload = (obj?: { __typename?: any } | null): obj is UploadPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUploadPayload"')
      return UploadPayload_possibleTypes.includes(obj.__typename)
    }
    


    const UploadFile_possibleTypes: string[] = ['UploadFile']
    export const isUploadFile = (obj?: { __typename?: any } | null): obj is UploadFile => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUploadFile"')
      return UploadFile_possibleTypes.includes(obj.__typename)
    }
    


    const UploadFileHeader_possibleTypes: string[] = ['UploadFileHeader']
    export const isUploadFileHeader = (obj?: { __typename?: any } | null): obj is UploadFileHeader => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isUploadFileHeader"')
      return UploadFileHeader_possibleTypes.includes(obj.__typename)
    }
    


    const ImageUploadFromUrlPayload_possibleTypes: string[] = ['ImageUploadFromUrlPayload']
    export const isImageUploadFromUrlPayload = (obj?: { __typename?: any } | null): obj is ImageUploadFromUrlPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isImageUploadFromUrlPayload"')
      return ImageUploadFromUrlPayload_possibleTypes.includes(obj.__typename)
    }
    


    const FavoritePayload_possibleTypes: string[] = ['FavoritePayload']
    export const isFavoritePayload = (obj?: { __typename?: any } | null): obj is FavoritePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFavoritePayload"')
      return FavoritePayload_possibleTypes.includes(obj.__typename)
    }
    


    const EntityExternalLinkPayload_possibleTypes: string[] = ['EntityExternalLinkPayload']
    export const isEntityExternalLinkPayload = (obj?: { __typename?: any } | null): obj is EntityExternalLinkPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEntityExternalLinkPayload"')
      return EntityExternalLinkPayload_possibleTypes.includes(obj.__typename)
    }
    


    const EmojiPayload_possibleTypes: string[] = ['EmojiPayload']
    export const isEmojiPayload = (obj?: { __typename?: any } | null): obj is EmojiPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmojiPayload"')
      return EmojiPayload_possibleTypes.includes(obj.__typename)
    }
    


    const EmailUnsubscribePayload_possibleTypes: string[] = ['EmailUnsubscribePayload']
    export const isEmailUnsubscribePayload = (obj?: { __typename?: any } | null): obj is EmailUnsubscribePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmailUnsubscribePayload"')
      return EmailUnsubscribePayload_possibleTypes.includes(obj.__typename)
    }
    


    const EmailIntakeAddressPayload_possibleTypes: string[] = ['EmailIntakeAddressPayload']
    export const isEmailIntakeAddressPayload = (obj?: { __typename?: any } | null): obj is EmailIntakeAddressPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmailIntakeAddressPayload"')
      return EmailIntakeAddressPayload_possibleTypes.includes(obj.__typename)
    }
    


    const EmailIntakeAddress_possibleTypes: string[] = ['EmailIntakeAddress']
    export const isEmailIntakeAddress = (obj?: { __typename?: any } | null): obj is EmailIntakeAddress => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmailIntakeAddress"')
      return EmailIntakeAddress_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentPayload_possibleTypes: string[] = ['DocumentPayload']
    export const isDocumentPayload = (obj?: { __typename?: any } | null): obj is DocumentPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentPayload"')
      return DocumentPayload_possibleTypes.includes(obj.__typename)
    }
    


    const DocumentArchivePayload_possibleTypes: string[] = ['DocumentArchivePayload']
    export const isDocumentArchivePayload = (obj?: { __typename?: any } | null): obj is DocumentArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isDocumentArchivePayload"')
      return DocumentArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CyclePayload_possibleTypes: string[] = ['CyclePayload']
    export const isCyclePayload = (obj?: { __typename?: any } | null): obj is CyclePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCyclePayload"')
      return CyclePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CycleArchivePayload_possibleTypes: string[] = ['CycleArchivePayload']
    export const isCycleArchivePayload = (obj?: { __typename?: any } | null): obj is CycleArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCycleArchivePayload"')
      return CycleArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerTierPayload_possibleTypes: string[] = ['CustomerTierPayload']
    export const isCustomerTierPayload = (obj?: { __typename?: any } | null): obj is CustomerTierPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerTierPayload"')
      return CustomerTierPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerStatusPayload_possibleTypes: string[] = ['CustomerStatusPayload']
    export const isCustomerStatusPayload = (obj?: { __typename?: any } | null): obj is CustomerStatusPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerStatusPayload"')
      return CustomerStatusPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerPayload_possibleTypes: string[] = ['CustomerPayload']
    export const isCustomerPayload = (obj?: { __typename?: any } | null): obj is CustomerPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerPayload"')
      return CustomerPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedPayload_possibleTypes: string[] = ['CustomerNeedPayload']
    export const isCustomerNeedPayload = (obj?: { __typename?: any } | null): obj is CustomerNeedPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedPayload"')
      return CustomerNeedPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedUpdatePayload_possibleTypes: string[] = ['CustomerNeedUpdatePayload']
    export const isCustomerNeedUpdatePayload = (obj?: { __typename?: any } | null): obj is CustomerNeedUpdatePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedUpdatePayload"')
      return CustomerNeedUpdatePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomerNeedArchivePayload_possibleTypes: string[] = ['CustomerNeedArchivePayload']
    export const isCustomerNeedArchivePayload = (obj?: { __typename?: any } | null): obj is CustomerNeedArchivePayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomerNeedArchivePayload"')
      return CustomerNeedArchivePayload_possibleTypes.includes(obj.__typename)
    }
    


    const CustomViewPayload_possibleTypes: string[] = ['CustomViewPayload']
    export const isCustomViewPayload = (obj?: { __typename?: any } | null): obj is CustomViewPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCustomViewPayload"')
      return CustomViewPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ContactPayload_possibleTypes: string[] = ['ContactPayload']
    export const isContactPayload = (obj?: { __typename?: any } | null): obj is ContactPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isContactPayload"')
      return ContactPayload_possibleTypes.includes(obj.__typename)
    }
    


    const CommentPayload_possibleTypes: string[] = ['CommentPayload']
    export const isCommentPayload = (obj?: { __typename?: any } | null): obj is CommentPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCommentPayload"')
      return CommentPayload_possibleTypes.includes(obj.__typename)
    }
    


    const EmailUserAccountAuthChallengeResponse_possibleTypes: string[] = ['EmailUserAccountAuthChallengeResponse']
    export const isEmailUserAccountAuthChallengeResponse = (obj?: { __typename?: any } | null): obj is EmailUserAccountAuthChallengeResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isEmailUserAccountAuthChallengeResponse"')
      return EmailUserAccountAuthChallengeResponse_possibleTypes.includes(obj.__typename)
    }
    


    const PasskeyLoginStartResponse_possibleTypes: string[] = ['PasskeyLoginStartResponse']
    export const isPasskeyLoginStartResponse = (obj?: { __typename?: any } | null): obj is PasskeyLoginStartResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isPasskeyLoginStartResponse"')
      return PasskeyLoginStartResponse_possibleTypes.includes(obj.__typename)
    }
    


    const CreateOrJoinOrganizationResponse_possibleTypes: string[] = ['CreateOrJoinOrganizationResponse']
    export const isCreateOrJoinOrganizationResponse = (obj?: { __typename?: any } | null): obj is CreateOrJoinOrganizationResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isCreateOrJoinOrganizationResponse"')
      return CreateOrJoinOrganizationResponse_possibleTypes.includes(obj.__typename)
    }
    


    const LogoutResponse_possibleTypes: string[] = ['LogoutResponse']
    export const isLogoutResponse = (obj?: { __typename?: any } | null): obj is LogoutResponse => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isLogoutResponse"')
      return LogoutResponse_possibleTypes.includes(obj.__typename)
    }
    


    const AttachmentPayload_possibleTypes: string[] = ['AttachmentPayload']
    export const isAttachmentPayload = (obj?: { __typename?: any } | null): obj is AttachmentPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAttachmentPayload"')
      return AttachmentPayload_possibleTypes.includes(obj.__typename)
    }
    


    const FrontAttachmentPayload_possibleTypes: string[] = ['FrontAttachmentPayload']
    export const isFrontAttachmentPayload = (obj?: { __typename?: any } | null): obj is FrontAttachmentPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isFrontAttachmentPayload"')
      return FrontAttachmentPayload_possibleTypes.includes(obj.__typename)
    }
    


    const ApiKeyPayload_possibleTypes: string[] = ['ApiKeyPayload']
    export const isApiKeyPayload = (obj?: { __typename?: any } | null): obj is ApiKeyPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isApiKeyPayload"')
      return ApiKeyPayload_possibleTypes.includes(obj.__typename)
    }
    


    const AgentContextPayload_possibleTypes: string[] = ['AgentContextPayload']
    export const isAgentContextPayload = (obj?: { __typename?: any } | null): obj is AgentContextPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentContextPayload"')
      return AgentContextPayload_possibleTypes.includes(obj.__typename)
    }
    


    const AgentActivityPayload_possibleTypes: string[] = ['AgentActivityPayload']
    export const isAgentActivityPayload = (obj?: { __typename?: any } | null): obj is AgentActivityPayload => {
      if (!obj?.__typename) throw new Error('__typename is missing in "isAgentActivityPayload"')
      return AgentActivityPayload_possibleTypes.includes(obj.__typename)
    }
    

export const enumFrequencyResolutionType = {
   daily: 'daily' as const,
   weekly: 'weekly' as const
}

export const enumDay = {
   Sunday: 'Sunday' as const,
   Monday: 'Monday' as const,
   Tuesday: 'Tuesday' as const,
   Wednesday: 'Wednesday' as const,
   Thursday: 'Thursday' as const,
   Friday: 'Friday' as const,
   Saturday: 'Saturday' as const
}

export const enumProjectStatusType = {
   backlog: 'backlog' as const,
   planned: 'planned' as const,
   started: 'started' as const,
   paused: 'paused' as const,
   completed: 'completed' as const,
   canceled: 'canceled' as const
}

export const enumDateResolutionType = {
   month: 'month' as const,
   quarter: 'quarter' as const,
   halfYear: 'halfYear' as const,
   year: 'year' as const
}

export const enumProjectUpdateHealthType = {
   onTrack: 'onTrack' as const,
   atRisk: 'atRisk' as const,
   offTrack: 'offTrack' as const
}

export const enumInitiativeStatus = {
   Planned: 'Planned' as const,
   Active: 'Active' as const,
   Completed: 'Completed' as const
}

export const enumInitiativeUpdateHealthType = {
   onTrack: 'onTrack' as const,
   atRisk: 'atRisk' as const,
   offTrack: 'offTrack' as const
}

export const enumCyclePeriod = {
   before: 'before' as const,
   during: 'during' as const,
   after: 'after' as const
}

export const enumSlaStatus = {
   Breached: 'Breached' as const,
   HighRisk: 'HighRisk' as const,
   MediumRisk: 'MediumRisk' as const,
   LowRisk: 'LowRisk' as const,
   Completed: 'Completed' as const,
   Failed: 'Failed' as const
}

export const enumPaginationOrderBy = {
   createdAt: 'createdAt' as const,
   updatedAt: 'updatedAt' as const
}

export const enumPaginationNulls = {
   first: 'first' as const,
   last: 'last' as const
}

export const enumPaginationSortOrder = {
   Ascending: 'Ascending' as const,
   Descending: 'Descending' as const
}

export const enumContextViewType = {
   activeIssues: 'activeIssues' as const,
   activeCycle: 'activeCycle' as const,
   upcomingCycle: 'upcomingCycle' as const,
   backlog: 'backlog' as const,
   triage: 'triage' as const
}

export const enumPostType = {
   summary: 'summary' as const,
   update: 'update' as const
}

export const enumFeedSummarySchedule = {
   daily: 'daily' as const,
   weekly: 'weekly' as const,
   never: 'never' as const
}

export const enumExternalSyncService = {
   jira: 'jira' as const,
   github: 'github' as const,
   slack: 'slack' as const
}

export const enumProjectTab = {
   customers: 'customers' as const,
   documents: 'documents' as const,
   issues: 'issues' as const
}

export const enumInitiativeTab = {
   overview: 'overview' as const,
   projects: 'projects' as const
}

export const enumCustomerStatusType = {
   active: 'active' as const,
   inactive: 'inactive' as const
}

export const enumProjectMilestoneStatus = {
   unstarted: 'unstarted' as const,
   next: 'next' as const,
   overdue: 'overdue' as const,
   done: 'done' as const
}

export const enumIntegrationService = {
   airbyte: 'airbyte' as const,
   discord: 'discord' as const,
   figma: 'figma' as const,
   figmaPlugin: 'figmaPlugin' as const,
   front: 'front' as const,
   github: 'github' as const,
   githubEnterpriseServer: 'githubEnterpriseServer' as const,
   githubCommit: 'githubCommit' as const,
   githubImport: 'githubImport' as const,
   githubPersonal: 'githubPersonal' as const,
   gitlab: 'gitlab' as const,
   googleCalendarPersonal: 'googleCalendarPersonal' as const,
   googleSheets: 'googleSheets' as const,
   intercom: 'intercom' as const,
   jira: 'jira' as const,
   jiraPersonal: 'jiraPersonal' as const,
   launchDarkly: 'launchDarkly' as const,
   launchDarklyPersonal: 'launchDarklyPersonal' as const,
   loom: 'loom' as const,
   notion: 'notion' as const,
   opsgenie: 'opsgenie' as const,
   pagerDuty: 'pagerDuty' as const,
   salesforce: 'salesforce' as const,
   slack: 'slack' as const,
   slackAsks: 'slackAsks' as const,
   slackCustomViewNotifications: 'slackCustomViewNotifications' as const,
   slackOrgProjectUpdatesPost: 'slackOrgProjectUpdatesPost' as const,
   slackOrgInitiativeUpdatesPost: 'slackOrgInitiativeUpdatesPost' as const,
   slackPersonal: 'slackPersonal' as const,
   slackPost: 'slackPost' as const,
   slackProjectPost: 'slackProjectPost' as const,
   slackProjectUpdatesPost: 'slackProjectUpdatesPost' as const,
   slackInitiativePost: 'slackInitiativePost' as const,
   sentry: 'sentry' as const,
   zendesk: 'zendesk' as const,
   email: 'email' as const
}

export const enumIssueSuggestionType = {
   team: 'team' as const,
   project: 'project' as const,
   assignee: 'assignee' as const,
   label: 'label' as const,
   similarIssue: 'similarIssue' as const,
   relatedIssue: 'relatedIssue' as const
}

export const enumIssueSuggestionState = {
   active: 'active' as const,
   stale: 'stale' as const,
   accepted: 'accepted' as const,
   dismissed: 'dismissed' as const
}

export const enumTriageResponsibilityAction = {
   assign: 'assign' as const,
   notify: 'notify' as const
}

export const enumGitAutomationStates = {
   draft: 'draft' as const,
   start: 'start' as const,
   review: 'review' as const,
   mergeable: 'mergeable' as const,
   merge: 'merge' as const
}

export const enumFacetPageSource = {
   projects: 'projects' as const,
   teamIssues: 'teamIssues' as const,
   feed: 'feed' as const
}

export const enumReleaseChannel = {
   development: 'development' as const,
   internal: 'internal' as const,
   beta: 'beta' as const,
   preRelease: 'preRelease' as const,
   public: 'public' as const
}

export const enumSlaDayCountType = {
   all: 'all' as const,
   onlyBusinessDays: 'onlyBusinessDays' as const
}

export const enumProjectUpdateReminderFrequency = {
   week: 'week' as const,
   twoWeeks: 'twoWeeks' as const,
   month: 'month' as const,
   never: 'never' as const
}

export const enumUserContextViewType = {
   assigned: 'assigned' as const
}

export const enumOAuthClientApprovalStatus = {
   requested: 'requested' as const,
   approved: 'approved' as const,
   denied: 'denied' as const
}

export const enumPullRequestStatus = {
   draft: 'draft' as const,
   open: 'open' as const,
   inReview: 'inReview' as const,
   approved: 'approved' as const,
   merged: 'merged' as const,
   closed: 'closed' as const
}

export const enumSemanticSearchResultType = {
   issue: 'issue' as const,
   project: 'project' as const,
   initiative: 'initiative' as const,
   document: 'document' as const
}

export const enumSendStrategy = {
   desktopThenPush: 'desktopThenPush' as const,
   desktopAndPush: 'desktopAndPush' as const,
   desktop: 'desktop' as const,
   push: 'push' as const
}

export const enumUserRoleType = {
   admin: 'admin' as const,
   guest: 'guest' as const,
   user: 'user' as const,
   app: 'app' as const
}

export const enumOrganizationInviteStatus = {
   pending: 'pending' as const,
   accepted: 'accepted' as const,
   expired: 'expired' as const
}

export const enumAuthenticationSessionType = {
   web: 'web' as const,
   desktop: 'desktop' as const,
   ios: 'ios' as const,
   android: 'android' as const
}

export const enumAgentContextStatus = {
   pending: 'pending' as const,
   active: 'active' as const,
   complete: 'complete' as const,
   awaitingInput: 'awaitingInput' as const
}

export const enumAgentContextType = {
   commentThread: 'commentThread' as const
}

export const enumAgentActivityType = {
   observation: 'observation' as const,
   action: 'action' as const,
   response: 'response' as const,
   error: 'error' as const
}

export const enumViewPreferencesType = {
   organization: 'organization' as const,
   user: 'user' as const
}

export const enumViewType = {
   inbox: 'inbox' as const,
   myIssues: 'myIssues' as const,
   myIssuesCreatedByMe: 'myIssuesCreatedByMe' as const,
   myIssuesSubscribedTo: 'myIssuesSubscribedTo' as const,
   myIssuesActivity: 'myIssuesActivity' as const,
   userProfile: 'userProfile' as const,
   userProfileCreatedByUser: 'userProfileCreatedByUser' as const,
   board: 'board' as const,
   completedCycle: 'completedCycle' as const,
   cycle: 'cycle' as const,
   project: 'project' as const,
   projectDocuments: 'projectDocuments' as const,
   label: 'label' as const,
   triage: 'triage' as const,
   activeIssues: 'activeIssues' as const,
   backlog: 'backlog' as const,
   subIssues: 'subIssues' as const,
   allIssues: 'allIssues' as const,
   dashboards: 'dashboards' as const,
   customView: 'customView' as const,
   customViews: 'customViews' as const,
   roadmapAll: 'roadmapAll' as const,
   initiative: 'initiative' as const,
   initiativeOverview: 'initiativeOverview' as const,
   initiativeOverviewSubInitiatives: 'initiativeOverviewSubInitiatives' as const,
   initiatives: 'initiatives' as const,
   initiativesPlanned: 'initiativesPlanned' as const,
   initiativesCompleted: 'initiativesCompleted' as const,
   projects: 'projects' as const,
   projectsAll: 'projectsAll' as const,
   projectsBacklog: 'projectsBacklog' as const,
   projectsClosed: 'projectsClosed' as const,
   projectLabel: 'projectLabel' as const,
   search: 'search' as const,
   splitSearch: 'splitSearch' as const,
   teams: 'teams' as const,
   archive: 'archive' as const,
   quickView: 'quickView' as const,
   issueIdentifiers: 'issueIdentifiers' as const,
   customers: 'customers' as const,
   customer: 'customer' as const,
   embeddedCustomerNeeds: 'embeddedCustomerNeeds' as const,
   projectCustomerNeeds: 'projectCustomerNeeds' as const,
   reviews: 'reviews' as const,
   myReviews: 'myReviews' as const,
   feedAll: 'feedAll' as const,
   feedCreated: 'feedCreated' as const,
   feedFollowing: 'feedFollowing' as const,
   feedPopular: 'feedPopular' as const,
   workspaceMembers: 'workspaceMembers' as const,
   customRoadmap: 'customRoadmap' as const,
   roadmap: 'roadmap' as const,
   roadmaps: 'roadmaps' as const,
   roadmapClosed: 'roadmapClosed' as const,
   roadmapBacklog: 'roadmapBacklog' as const
}

export const enumUserFlagType = {
   updatedSlackThreadSyncIntegration: 'updatedSlackThreadSyncIntegration' as const,
   completedOnboarding: 'completedOnboarding' as const,
   desktopInstalled: 'desktopInstalled' as const,
   teamsPageIntroductionDismissed: 'teamsPageIntroductionDismissed' as const,
   joinTeamIntroductionDismissed: 'joinTeamIntroductionDismissed' as const,
   desktopDownloadToastDismissed: 'desktopDownloadToastDismissed' as const,
   emptyBacklogDismissed: 'emptyBacklogDismissed' as const,
   emptyCustomViewsDismissed: 'emptyCustomViewsDismissed' as const,
   emptyActiveIssuesDismissed: 'emptyActiveIssuesDismissed' as const,
   emptyMyIssuesDismissed: 'emptyMyIssuesDismissed' as const,
   triageWelcomeDismissed: 'triageWelcomeDismissed' as const,
   cycleWelcomeDismissed: 'cycleWelcomeDismissed' as const,
   projectWelcomeDismissed: 'projectWelcomeDismissed' as const,
   projectBacklogWelcomeDismissed: 'projectBacklogWelcomeDismissed' as const,
   projectUpdatesWelcomeDismissed: 'projectUpdatesWelcomeDismissed' as const,
   pulseWelcomeDismissed: 'pulseWelcomeDismissed' as const,
   analyticsWelcomeDismissed: 'analyticsWelcomeDismissed' as const,
   insightsWelcomeDismissed: 'insightsWelcomeDismissed' as const,
   insightsHelpDismissed: 'insightsHelpDismissed' as const,
   figmaPromptDismissed: 'figmaPromptDismissed' as const,
   issueMovePromptCompleted: 'issueMovePromptCompleted' as const,
   migrateThemePreference: 'migrateThemePreference' as const,
   listSelectionTip: 'listSelectionTip' as const,
   emptyParagraphSlashCommandTip: 'emptyParagraphSlashCommandTip' as const,
   editorSlashCommandUsed: 'editorSlashCommandUsed' as const,
   canPlaySnake: 'canPlaySnake' as const,
   canPlayTetris: 'canPlayTetris' as const,
   importBannerDismissed: 'importBannerDismissed' as const,
   tryInvitePeopleDismissed: 'tryInvitePeopleDismissed' as const,
   tryRoadmapsDismissed: 'tryRoadmapsDismissed' as const,
   tryCyclesDismissed: 'tryCyclesDismissed' as const,
   tryTriageDismissed: 'tryTriageDismissed' as const,
   tryGithubDismissed: 'tryGithubDismissed' as const,
   rewindBannerDismissed: 'rewindBannerDismissed' as const,
   helpIslandFeatureInsightsDismissed: 'helpIslandFeatureInsightsDismissed' as const,
   dueDateShortcutMigration: 'dueDateShortcutMigration' as const,
   slackCommentReactionTipShown: 'slackCommentReactionTipShown' as const,
   issueLabelSuggestionUsed: 'issueLabelSuggestionUsed' as const,
   threadedCommentsNudgeIsSeen: 'threadedCommentsNudgeIsSeen' as const,
   desktopTabsOnboardingDismissed: 'desktopTabsOnboardingDismissed' as const,
   milestoneOnboardingIsSeenAndDismissed: 'milestoneOnboardingIsSeenAndDismissed' as const,
   projectBoardOnboardingIsSeenAndDismissed: 'projectBoardOnboardingIsSeenAndDismissed' as const,
   figmaPluginBannerDismissed: 'figmaPluginBannerDismissed' as const,
   initiativesBannerDismissed: 'initiativesBannerDismissed' as const,
   commandMenuClearShortcutTip: 'commandMenuClearShortcutTip' as const,
   all: 'all' as const
}

export const enumUserFlagUpdateOperation = {
   incr: 'incr' as const,
   decr: 'decr' as const,
   clear: 'clear' as const,
   lock: 'lock' as const
}

export const enumNotificationChannel = {
   desktop: 'desktop' as const,
   mobile: 'mobile' as const,
   email: 'email' as const,
   slack: 'slack' as const
}

export const enumNotificationCategory = {
   assignments: 'assignments' as const,
   statusChanges: 'statusChanges' as const,
   commentsAndReplies: 'commentsAndReplies' as const,
   mentions: 'mentions' as const,
   reactions: 'reactions' as const,
   subscriptions: 'subscriptions' as const,
   documentChanges: 'documentChanges' as const,
   postsAndUpdates: 'postsAndUpdates' as const,
   reminders: 'reminders' as const,
   reviews: 'reviews' as const,
   appsAndIntegrations: 'appsAndIntegrations' as const,
   triage: 'triage' as const,
   customers: 'customers' as const,
   system: 'system' as const
}

export const enumProductIntelligenceScope = {
   workspace: 'workspace' as const,
   teamHierarchy: 'teamHierarchy' as const,
   team: 'team' as const,
   none: 'none' as const
}

export const enumPushSubscriptionType = {
   web: 'web' as const,
   apple: 'apple' as const,
   appleDevelopment: 'appleDevelopment' as const,
   firebase: 'firebase' as const
}

export const enumOrganizationDomainAuthType = {
   saml: 'saml' as const,
   general: 'general' as const
}

export const enumIssueRelationType = {
   blocks: 'blocks' as const,
   duplicate: 'duplicate' as const,
   related: 'related' as const,
   similar: 'similar' as const
}

export const enumSlackChannelType = {
   DirectMessage: 'DirectMessage' as const,
   MultiPersonDirectMessage: 'MultiPersonDirectMessage' as const,
   Private: 'Private' as const,
   Public: 'Public' as const
}

export const enumPullRequestReviewTool = {
   source: 'source' as const,
   graphite: 'graphite' as const
}

export const enumGithubOrgType = {
   user: 'user' as const,
   organization: 'organization' as const
}

export const enumGitLinkKind = {
   closes: 'closes' as const,
   contributes: 'contributes' as const,
   links: 'links' as const
}
